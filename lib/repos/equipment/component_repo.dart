import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/equipment/component.dart';
import 'package:hart_suite/models/equipment/equipment.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/repos/equipment/equipment_repo.dart';

class ComponentRepo {
  final String basePath = 'customers';
  final String collectionName = 'components';
  late String customer;
  late String path;
  late PersonSnapshot? personSnapshot;

  ComponentRepo({bool useMocks = false, this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<Component>> get({bool populate = false}) async {
    List<Component> components = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          components.add(fromDocumentSnapshot(d));
        }
      }
    });

    components.sort((a, b) => a.name.compareTo(b.name));

    if (populate && components.isNotEmpty) {
      populateItems(components: components).then((value) => components = value);
    }

    return components;
  }

  Future<Component?> getById({required String id, bool populate = false}) async {
    Component? component;

    component = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        component = fromDocumentSnapshot(value);
      }
    });

    if (populate && component != null) {
      populateItem(component: component!).then((value) => component = value);
    }

    return component;
  }

  Future<void> update({required Component component}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    component.updated = audit;

    await FirestoreHelper.instance?.updateDocument(path: path, data: component.toMap(), id: component.documentId!);
  }

  Future<void> add({required Component component}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    component.created = audit;

    await FirestoreHelper.instance?.addDocument(path: path, data: component.toMap()).then((value) => component.documentId = value.id);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  Future<List<Component>> populateItems({required List<Component> components}) async {
    for (var component in components) {
      await populateItem(component: component).then((value) => component = value);
    }

    return components;
  }

  Future<Component> populateItem({required Component component}) async {
    EquipmentRepo equipmentRepo;

    equipmentRepo = EquipmentRepo(personSnapshot: personSnapshot, customer: customer);

    for (var key in component.equipment.keys) {
      await equipmentRepo.getById(id: key).then((value) => component.equipment[key] = value);
    }

    return component;
  }

  static Component fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    Component component;
    Map<String, dynamic> data;
    Map<String, Equipment?> equipmentMap;

    equipmentMap = {};

    data = value.data() as Map<String, dynamic>;

    if (data.containsKey('equipment') && data['equipment'] != null) {
      for (var key in data['equipment'].keys) {
        equipmentMap[key] = Equipment.fromMap(data['equipment'][key]);
      }
    }

    component = Component(
        documentId: value.id,
        name: data.containsKey('name') ? data['name'] : '',
        manufacturer: data.containsKey('manufacturer') ? data['manufacturer'] : '',
        description: data.containsKey('description') ? data['description'] : '',
        equipment: equipmentMap,
        quantity: data.containsKey('quantity') ? data['quantity'] : 0,
        created: Auditable.fromMap(data['created']),
        updated: Auditable.fromMap(data['updated']),
        deleted: Auditable.fromMap(data['deleted']));

    return component;
  }
}
