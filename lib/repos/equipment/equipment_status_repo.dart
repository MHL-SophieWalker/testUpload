import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/equipment/equipment_status.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';

class EquipmentStatusRepo {
  final String collectionName = 'equipmentStatus';
  final String basePath = 'customers';
  late String customer;
  late String path;
  late PersonSnapshot? personSnapshot;

  EquipmentStatusRepo({bool useMocks = false, this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<EquipmentStatus>> get() async {
    List<EquipmentStatus> equipmentStatus = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          equipmentStatus.add(fromDocumentSnapshot(d));
        }
      }
    });

    equipmentStatus.sort((a, b) => a.name.compareTo(b.name));

    return equipmentStatus;
  }

  Future<EquipmentStatus?> getById({required String id}) async {
    EquipmentStatus? equipmentStatus;

    equipmentStatus = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        equipmentStatus = fromDocumentSnapshot(value);
      }
    });

    return equipmentStatus;
  }

  Future<void> update({required EquipmentStatus equipmentStatus}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    equipmentStatus.updated = audit;

    await FirestoreHelper.instance?.updateDocument(path: path, data: equipmentStatus.toMap(), id: equipmentStatus.documentId!);
  }

  Future<void> add({required EquipmentStatus equipmentStatus}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    equipmentStatus.created = audit;

    await FirestoreHelper.instance?.addDocument(path: path, data: equipmentStatus.toMap()).then((value) => equipmentStatus.documentId = value.id);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  static EquipmentStatus fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    EquipmentStatus equipmentStatus;
    Map<String, dynamic> data;

    data = value.data() as Map<String, dynamic>;

    equipmentStatus = EquipmentStatus(
        documentId: value.id,
        name: data.containsKey('name') ? data['name'] : '',
        created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
        updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
        deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null);

    return equipmentStatus;
  }
}
