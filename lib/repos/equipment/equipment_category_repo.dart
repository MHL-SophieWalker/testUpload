import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/equipment/equipment_category.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';

class EquipmentCategoryRepo {
  final String collectionName = 'equipmentCategories';
  final String basePath = 'customers';
  late String customer;
  late String path;
  late PersonSnapshot? personSnapshot;

  EquipmentCategoryRepo({bool useMocks = false, this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<EquipmentCategory>> get() async {
    List<EquipmentCategory> equipmentCategory = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          equipmentCategory.add(fromDocumentSnapshot(d));
        }
      }
    });

    return equipmentCategory;
  }

  Future<EquipmentCategory?> getById({required String id}) async {
    EquipmentCategory? equipmentCategory;

    equipmentCategory = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        equipmentCategory = fromDocumentSnapshot(value);
      }
    });

    return equipmentCategory;
  }

  Future<void> update({required EquipmentCategory equipmentCategory}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    equipmentCategory.updated = audit;

    await FirestoreHelper.instance?.updateDocument(path: path, data: equipmentCategory.toMap(), id: equipmentCategory.documentId!);
  }

  Future<void> add({required EquipmentCategory equipmentCategory}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    equipmentCategory.created = audit;

    await FirestoreHelper.instance?.addDocument(path: path, data: equipmentCategory.toMap()).then((value) => equipmentCategory.documentId = value.id);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  static EquipmentCategory fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    EquipmentCategory equipmentCategory;
    Map<String, dynamic> data;

    data = value.data() as Map<String, dynamic>;

    equipmentCategory = EquipmentCategory(
        documentId: value.id,
        name: data.containsKey('name') ? data['name'] : '',
        created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
        updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
        deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null);

    return equipmentCategory;
  }
}
