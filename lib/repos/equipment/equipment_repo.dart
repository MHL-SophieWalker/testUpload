import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/area/area.dart';
import 'package:hart_suite/models/data/data_point.dart';
import 'package:hart_suite/models/equipment/classification.dart';
import 'package:hart_suite/models/equipment/dimensions.dart';
import 'package:hart_suite/models/equipment/equipment.dart';
import 'package:hart_suite/models/equipment/equipment_status.dart';
import 'package:hart_suite/models/equipment/equipment_subcategory.dart';
import 'package:hart_suite/models/equipment/equipment_type.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/models/tag/tag.dart';
import 'package:hart_suite/repos/area/area_repo.dart';
import 'package:hart_suite/repos/data/data_point_repo.dart';
import 'package:hart_suite/repos/equipment/classification_repo.dart';
import 'package:hart_suite/repos/equipment/equipment_status_repo.dart';
import 'package:hart_suite/repos/equipment/equipment_subcategory_repo.dart';
import 'package:hart_suite/repos/equipment/equipment_type_repo.dart';
import 'package:hart_suite/repos/tag/tag_repo.dart';

class EquipmentRepo {
  final String basePath = 'customers';
  final String collectionName = 'equipment';
  late String customer;
  late String path;
  late PersonSnapshot? personSnapshot;

  EquipmentRepo({bool useMocks = false, this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<Equipment>> get({bool populate = false}) async {
    List<Equipment> equipment = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          equipment.add(fromDocumentSnapshot(d));
        }
      }
    });

    if (populate && equipment.isNotEmpty) {
      await populateItems(equipment: equipment).then((value) => equipment = value);
    }

    return equipment;
  }

  Future<Equipment?> getById({required String id, bool populate = false}) async {
    Equipment? equipment;

    equipment = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        equipment = fromDocumentSnapshot(value);
      }
    });

    if (populate && equipment != null) {
      await populateItem(equipment: equipment!).then((value) => equipment = value);
    }

    return equipment;
  }

  Future<void> update({required Equipment equipment}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    equipment.updated = audit;

    await FirestoreHelper.instance?.updateDocument(path: path, data: equipment.toMap(), id: equipment.documentId!);
  }

  Future<void> add({required Equipment equipment}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    equipment.created = audit;

    await FirestoreHelper.instance?.addDocument(path: path, data: equipment.toMap()).then((value) => equipment.documentId = value.id);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  Future<List<Equipment>> populateItems({required List<Equipment> equipment}) async {
    for (var e in equipment) {
      await populateItem(equipment: e).then((value) => e = value);
    }

    return equipment;
  }

  Future<Equipment> populateItem({required Equipment equipment}) async {
    AreaRepo areaRepo;
    EquipmentStatusRepo equipmentStatusRepo;
    EquipmentSubcategoryRepo equipmentSubcategoryRepo;
    EquipmentTypeRepo equipmentTypeRepo;
    ClassificationRepo classificationRepo;
    TagRepo tagRepo;
    DataPointRepo dataPointRepo;

    areaRepo = AreaRepo(personSnapshot: personSnapshot, customer: 'equipment');
    equipmentStatusRepo = EquipmentStatusRepo(personSnapshot: personSnapshot, customer: 'equipment');
    equipmentSubcategoryRepo = EquipmentSubcategoryRepo(personSnapshot: personSnapshot, customer: 'equipment');
    equipmentTypeRepo = EquipmentTypeRepo(personSnapshot: personSnapshot, customer: 'equipment');
    classificationRepo = ClassificationRepo(personSnapshot: personSnapshot, customer: 'equipment');
    tagRepo = TagRepo(personSnapshot: personSnapshot, customer: 'equipment');
    dataPointRepo = DataPointRepo(personSnapshot: personSnapshot, customer: 'equipment');

    for (var key in equipment.area.keys) {
      await areaRepo.getById(id: key).then((value) => equipment.area[key] = value);
    }
    for (var key in equipment.status.keys) {
      await equipmentStatusRepo.getById(id: key).then((value) => equipment.status[key] = value);
    }
    for (var key in equipment.subcategory.keys) {
      await equipmentSubcategoryRepo.getById(id: key).then((value) => equipment.subcategory[key] = value);
    }
    for (var key in equipment.type.keys) {
      await equipmentTypeRepo.getById(id: key).then((value) => equipment.type[key] = value);
    }
    for (var key in equipment.classifications.keys) {
      await classificationRepo.getById(id: key).then((value) => equipment.classifications[key] = value);
    }
    for (var key in equipment.tags.keys) {
      await tagRepo.getById(id: key).then((value) => equipment.tags[key] = value);
    }
    for (var key in equipment.dataPoints.keys) {
      await dataPointRepo.getById(id: key).then((value) => equipment.dataPoints[key] = value);
    }

    return equipment;
  }

  static Equipment fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    Equipment equipment;
    Map<String, dynamic> data;
    Map<String, Area?> areaMap;
    Map<String, EquipmentStatus?> equipmentStatusMap;
    Map<String, EquipmentSubcategory?> equipmentSubcategoryMap;
    Map<String, EquipmentType?> equipmentTypeMap;
    Map<String, Classification?> classificationMap;
    Map<String, Tag?> tagMap;
    Map<String, DataPoint?> dataPointMap;

    data = value.data() as Map<String, dynamic>;

    areaMap = {};
    equipmentStatusMap = {};
    equipmentSubcategoryMap = {};
    equipmentTypeMap = {};
    classificationMap = {};
    tagMap = {};
    dataPointMap = {};

    if (data.containsKey('area') && data['area'] != null) {
      for (var key in data['area'].keys) {
        areaMap[key] = Area.fromMap(data['area'][key]);
      }
    }

    if (data.containsKey('status') && data['status'] != null) {
      for (var key in data['status'].keys) {
        equipmentStatusMap[key] = EquipmentStatus.fromMap(data['status'][key]);
      }
    }

    if (data.containsKey('subcategory') && data['subcategory'] != null) {
      for (var key in data['subcategory'].keys) {
        equipmentSubcategoryMap[key] = EquipmentSubcategory.fromMap(data['subcategory'][key]);
      }
    }

    if (data.containsKey('type') && data['type'] != null) {
      for (var key in data['type'].keys) {
        equipmentTypeMap[key] = EquipmentType.fromMap(data['type'][key]);
      }
    }

    if (data.containsKey('classifications') && data['classifications'] != null) {
      for (var key in data['classifications'].keys) {
        classificationMap[key] = Classification.fromMap(data['classifications'][key]);
      }
    }

    if (data.containsKey('tags') && data['tags'] != null) {
      for (var key in data['tags'].keys) {
        tagMap[key] = Tag.fromMap(data['tags'][key]);
      }
    }

    if (data.containsKey('dataPoints') && data['dataPoints'] != null) {
      for (var key in data['dataPoints'].keys) {
        dataPointMap[key] = DataPoint.fromMap(data['dataPoints'][key]);
      }
    }

    equipment = Equipment(
        documentId: value.id,
        name: data.containsKey('name') ? data['name'] : '',
        description: data.containsKey('description') ? data['description'] : '',
        area: areaMap,
        dimensions: data.containsKey('dimensions')
            ? Dimensions.fromMap(data['dimensions'])!
            : Dimensions(
                height: null,
                width: null,
                length: null,
              ),
        manufacturer: value.get('manufacturer'),
        model: value.get('model'),
        partNumber: value.get('partNumber'),
        serialNumber: value.get('serialNumber'),
        nextInspectionDate: (value.get('nextInspectionDate') as Timestamp).toDate(),
        warrantyEndDate: (value.get('warrantyEndDate') as Timestamp).toDate(),
        status: equipmentStatusMap,
        subcategory: equipmentSubcategoryMap,
        type: equipmentTypeMap,
        classifications: classificationMap,
        tags: tagMap,
        dataPoints: dataPointMap,
        created: Auditable.fromMap(value.get('created')),
        updated: Auditable.fromMap(value.get('updated')),
        deleted: Auditable.fromMap(value.get('deleted')));

    return equipment;
  }
}
