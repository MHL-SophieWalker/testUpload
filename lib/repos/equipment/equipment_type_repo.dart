import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/equipment/equipment_type.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';

class EquipmentTypeRepo {
  final String collectionName = 'equipmentTypes';
  final String basePath = 'customers';
  late String customer;
  late String path;
  late PersonSnapshot? personSnapshot;

  EquipmentTypeRepo({bool useMocks = false, this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<EquipmentType>> get() async {
    List<EquipmentType> equipmentTypes = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          equipmentTypes.add(fromDocumentSnapshot(d));
        }

        equipmentTypes.sort((a, b) => a.name.compareTo(b.name));
      }
    });

    return equipmentTypes;
  }

  Future<EquipmentType?> getById({required String id}) async {
    EquipmentType? equipmentType;

    equipmentType = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        equipmentType = fromDocumentSnapshot(value);
      }
    });

    return equipmentType;
  }

  Future<void> update({required EquipmentType equipmentType}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    equipmentType.updated = audit;

    await FirestoreHelper.instance?.updateDocument(path: path, data: equipmentType.toMap(), id: equipmentType.documentId!);
  }

  Future<void> add({required EquipmentType equipmentType}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    equipmentType.created = audit;

    await FirestoreHelper.instance?.addDocument(path: path, data: equipmentType.toMap()).then((value) => equipmentType.documentId = value.id);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  static EquipmentType fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    EquipmentType equipmentType;
    Map<String, dynamic> data;

    data = value.data() as Map<String, dynamic>;

    equipmentType = EquipmentType(
        documentId: value.id,
        name: data.containsKey('name') ? data['name'] : '',
        created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
        updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
        deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null);

    return equipmentType;
  }
}
