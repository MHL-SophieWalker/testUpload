import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/area/area.dart';
import 'package:hart_suite/models/area/coords.dart';
import 'package:hart_suite/models/calendar/calendar.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/models/profile/team.dart';
import 'package:hart_suite/repos/calendar/calendar_repo.dart';
import 'package:hart_suite/repos/profile/team_repo.dart';

class AreaRepo {
  final String basePath = 'customers';
  final String collectionName = 'areas';
  late String path;
  late String customer;
  late PersonSnapshot? personSnapshot;

  AreaRepo({bool useMocks = false, required this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<Area>> get({bool populate = false}) async {
    List<Area> areas = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollectionWithOrderBy(path: path, orderBy: 'path').then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          areas.add(fromDocumentSnapshot(d));
        }
      }
    });

    if (populate && areas.isNotEmpty) {
      await populateItems(areas: areas).then((value) => areas = value);
    }

    return areas;
  }

  Future<Area?> getById({required String id, bool populate = false}) async {
    Area? area;

    area = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        area = fromDocumentSnapshot(value);
      }
    });

    if (populate && area != null) {
      await populateItem(area: area!).then((value) => area = value);
    }

    return area;
  }

  Future<void> update({required Area area}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    if (area.parent != null && area.parent!.isNotEmpty) {
      for (var key in area.parent!.keys) {
        if (area.parent![key] != null) {
          area.path = '${area.parent![key]!.path}/${area.name}';
        }
      }
    } else {
      area.path = area.name;
    }

    area.updated = audit;

    await FirestoreHelper.instance?.updateDocument(path: path, data: area.toMap(), id: area.documentId!);
  }

  Future<void> add({required Area area}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    if (area.parent != null && area.parent!.isNotEmpty) {
      for (var key in area.parent!.keys) {
        if (area.parent![key] != null) {
          area.path = '${area.parent![key]!.path}/${area.name}';
        }
      }
    } else {
      area.path = area.name;
    }

    area.created = audit;

    await FirestoreHelper.instance?.addDocument(path: path, data: area.toMap()).then((value) => area.documentId = value.id);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: collectionName) ?? const Stream.empty();
  }

  Future<List<Area>> populateItems({required List<Area> areas}) async {
    for (Area area in areas) {
      await populateItem(area: area);
    }

    return areas;
  }

  Future<Area> populateItem({required Area area}) async {
    CalendarRepo calendarRepo;
    TeamRepo teamRepo;

    if (area.calendars != null && area.calendars!.isNotEmpty) {
      calendarRepo = CalendarRepo(personSnapshot: personSnapshot, customer: customer);
      for (var key in area.calendars!.keys) {
        await calendarRepo.getById(id: key).then((value) => area.calendars![key] = value);
      }
    }

    if (area.teams != null && area.teams!.isNotEmpty) {
      teamRepo = TeamRepo(personSnapshot: personSnapshot, customer: customer);
      for (var key in area.teams!.keys) {
        await teamRepo.getById(id: key).then((value) => area.teams![key] = value);
      }
    }

    if (area.parent != null && area.parent!.isNotEmpty) {
      //we should only ever have one parent but as this is a map this is the safest way of retrieving the data
      for (var key in area.parent!.keys) {
        await getById(id: key).then((value) => area.parent![key] = value);
      }
    }

    return area;
  }

  Future<List<Area>> search({required String term, required int limit}) async {
    List<Area> areas = List.empty(growable: true);
    String collectionGroup = 'areas';
    Filter filter;

    filter = Filter('customer', isEqualTo: customer);

    await FirestoreHelper.instance
        ?.getDocumentsBySearchTermWithFilter(path: collectionGroup, field: 'nameLower', searchTerm: term, limit: limit, filter: filter)
        .then((value) {
      for (var d in value.docs) {
        areas.add(fromDocumentSnapshot(d));
      }

      areas.sort((a, b) => a.name.compareTo(b.name));
    });

    return areas;
  }

  static Area fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    Area area;
    Map<String, Calendar?> calMap = {};
    Map<String, Team?> teamMap = {};
    Map<String, Area?> parentMap = {};
    Map<String, dynamic> data;

    data = value.data() as Map<String, dynamic>;

    if (data.containsKey('calendars') && data['calendars'] != null) {
      for (var key in data['calendars'].keys) {
        calMap[key] = Calendar.fromMap(data['calendars'][key]);
      }
    }

    if (data.containsKey('teams') && data['teams'] != null) {
      for (var key in data['teams'].keys) {
        teamMap[key] = Team.fromMap(data['teams'][key]);
      }
    }

    if (data.containsKey('parent') && data['parent'] != null) {
      for (var key in data['parent'].keys) {
        parentMap[key] = Area.fromMap(data['parent'][key]);
      }
    }

    area = Area(
      documentId: value.id,
      name: data.containsKey('name') ? data['name'] : null,
      description: data.containsKey('description') ? data['description'] : null,
      parent: parentMap,
      path: data.containsKey('path') ? data['path'] : null,
      customer: data.containsKey('customer') ? data['customer'] : null,
      calendars: calMap,
      teams: teamMap,
      geoFence: data.containsKey('geoFence') && data['geoFence'] != null
          ? data['geoFence'].forEach((val) {
              Coords.fromMap(val);
            })
          : null,
      created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
      updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
      deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null,
    );

    return area;
  }
}
