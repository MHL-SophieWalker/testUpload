import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/attachment/attachment_type.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';

class AttachmentTypeRepo {
  final String basePath = 'customers';
  late String path;
  final String collectionName = 'attachmentTypes';
  late PersonSnapshot? personSnapshot;

  AttachmentTypeRepo({bool useMocks = false, this.personSnapshot, required String customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<AttachmentType>> get() async {
    List<AttachmentType> attachmentTypes = List.empty(growable: true);

    FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          attachmentTypes.add(fromDocumentSnapshot(d));
        }

        attachmentTypes.sort((a, b) => a.name.compareTo(b.name));
      }
    });

    return attachmentTypes;
  }

  Future<AttachmentType?> getById({required String id}) async {
    AttachmentType? attachmentType;

    attachmentType = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        attachmentType = fromDocumentSnapshot(value);
      }
    });

    return attachmentType;
  }

  Future<void> update({required AttachmentType attachmentType}) async {
    await FirestoreHelper.instance?.updateDocument(path: path, data: attachmentType.toMap(), id: attachmentType.documentId!);
  }

  Future<void> add({required AttachmentType attachmentType}) async {
    await FirestoreHelper.instance?.addDocument(path: path, data: attachmentType.toMap()).then((value) => attachmentType.documentId = value.id);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  static AttachmentType fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    AttachmentType attachmentType;
    Map<String, dynamic> data;

    data = value.data() as Map<String, dynamic>;

    attachmentType = AttachmentType(documentId: value.id, name: data.containsKey('name') ? data['name'] : '');

    return attachmentType;
  }
}
