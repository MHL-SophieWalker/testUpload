import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/global/pending_invitation.dart';

class PendingInvitationRepo {
  final String collectionName = 'pendingInvitations';
  late String path;

  PendingInvitationRepo({bool useMocks = false}) {
    path = collectionName;
    FirestoreHelper.useMocks = useMocks;
  }

  Future<List<PendingInvitation>> get() async {
    List<PendingInvitation> pendingInvitations = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          pendingInvitations.add(fromDocumentSnapshot(d));
        }
      }
    });

    return pendingInvitations;
  }

  Future<PendingInvitation?> getById({required String id}) async {
    PendingInvitation? pendingInvitation;

    pendingInvitation = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        pendingInvitation = fromDocumentSnapshot(value);
      }
    });

    return pendingInvitation;
  }

  Future<List<PendingInvitation>> getDocumentByFilter({required Filter filter, int limit = 100}) async {
    List<PendingInvitation> pendingInvitations = List.empty(growable: true);

    await FirestoreHelper.instance?.getGroupDocumentsByFilter(path: path, filter: filter, limit: limit).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          pendingInvitations.add(fromDocumentSnapshot(d));
        }
      }
    });

    return pendingInvitations;
  }

  Future<String> add({required PendingInvitation data}) async {
    String id = '';

    await FirestoreHelper.instance?.addDocument(path: path, data: data.toMap()).then((value) => id = value.id);

    return id;
  }

  Future<void> update({required String id, required PendingInvitation data}) async {
    await FirestoreHelper.instance?.updateDocument(
      path: path,
      id: id,
      data: data.toMap(),
    );
  }

  static PendingInvitation fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    PendingInvitation pendingInvitation;
    Map<String, dynamic> data;

    data = value.data() as Map<String, dynamic>;

    pendingInvitation = PendingInvitation(
      documentId: value.id,
      email: data.containsKey('email') ? data['email'] : '',
      customer: data.containsKey('customer') ? data['customer'] : '',
      accepted: data.containsKey('accepted') ? data['accepted'] : false,
    );

    return pendingInvitation;
  }
}
