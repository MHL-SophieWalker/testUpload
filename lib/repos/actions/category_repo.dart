import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/actions/category.dart';
import 'package:hart_suite/models/actions/subcategory.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';

class CategoryRepo {
  final String basePath = 'customers';
  final String collectionName = 'apps/Actions/categories';
  late String path;
  late String customer;
  late PersonSnapshot? personSnapshot;

  CategoryRepo({bool useMocks = false, required this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<Category?>> get({bool populate = false}) async {
    List<Category> categories = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollectionWithOrderBy(path: path, orderBy: 'name').then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          categories.add(fromDocumentSnapshot(d));
        }
      }
    });

    return categories;
  }

  Future<Category?> getById({required String id, bool populate = false}) async {
    Category? category;

    category = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        category = fromDocumentSnapshot(value);
      }
    });

    return category;
  }

  Future<void> update({required Category category}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    category.updated = audit;

    await FirestoreHelper.instance?.updateDocument(path: path, data: category.toMap(), id: category.documentId!);
  }

  Future<void> set({required Category category}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    category.updated = audit;

    await FirestoreHelper.instance?.setDocument(path: path, data: category.toMap(), id: category.documentId!);
  }

  Future<void> add({required Category category}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    category.created = audit;

    await FirestoreHelper.instance?.addDocument(path: path, data: category.toMap()).then((value) => category.documentId = value.id);
  }

  Future<void> delete(Category category) async {
    await FirestoreHelper.instance?.removeDocument(path: path, id: category.documentId!);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  Future<List<Category>> search({required String term, required int limit}) async {
    List<Category> categories = List.empty(growable: true);
    String collectionGroup = 'categories';
    Filter filter;

    filter = Filter('customer', isEqualTo: customer);

    await FirestoreHelper.instance
        ?.getDocumentsBySearchTermWithFilter(path: collectionGroup, field: 'nameLower', searchTerm: term, filter: filter)
        .then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          categories.add(fromDocumentSnapshot(d));
        }
      }
    });

    return categories;
  }

  static Category fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    Category category;
    Map<String, dynamic> data;
    Map<String, SubCategory> subCategories;

    subCategories = {};
    data = value.data() as Map<String, dynamic>;

    if (data.containsKey('subCategories') && data['subCategories'] != null) {
      for (var key in data['subCategories'].keys) {
        subCategories[key] = SubCategory.fromMap(data['subCategories'][key])!;
      }
    }

    category = Category(
      documentId: value.id,
      name: data.containsKey('name') ? data['name'] : null,
      subCategories: subCategories,
      customer: data.containsKey('customer') ? data['customer'] : null,
      created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
      updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
      deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null,
    );

    return category;
  }
}
