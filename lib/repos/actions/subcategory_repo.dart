import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/actions/subcategory.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';

class SubCategoryRepo {
  final String basePath = 'customers';
  final String collectionName = 'apps/Actions/subCategories';
  late String path;
  late String customer;
  late PersonSnapshot? personSnapshot;

  SubCategoryRepo({bool useMocks = false, required this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSanpshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<SubCategory>> get({bool populate = false}) async {
    List<SubCategory> subCategories = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          subCategories.add(fromDocumentSnapshot(d));
        }
      }
    });

    return subCategories;
  }

  Future<SubCategory?> getById({required String id, bool populate = false}) async {
    SubCategory? subCategory;

    subCategory = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        subCategory = fromDocumentSnapshot(value);
      }
    });

    return subCategory;
  }

  Future<void> update({required SubCategory subCategory}) async {
    await FirestoreHelper.instance?.updateDocument(path: path, data: subCategory.toMap(), id: subCategory.documentId!);
  }

  Future<void> set({required SubCategory subCategory}) async {
    await FirestoreHelper.instance?.setDocument(path: path, data: subCategory.toMap(), id: subCategory.documentId!);
  }

  Future<void> add({required SubCategory subCategory}) async {
    await FirestoreHelper.instance?.addDocument(path: path, data: subCategory.toMap());
  }

  Future<void> delete({required SubCategory subCategory}) async {
    await FirestoreHelper.instance?.removeDocument(path: path, id: subCategory.documentId!);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  Future<List<SubCategory>> search({required String term, int limit = 5, String field = 'nameLower'}) async {
    List<SubCategory> subCategories = List.empty(growable: true);
    String collectionGroup = 'subCategories';
    Filter customerFilter;

    customerFilter = Filter('customer', isEqualTo: customer);

    await FirestoreHelper.instance
        ?.getDocumentsBySearchTermWithFilter(field: field, searchTerm: term, path: collectionGroup, limit: limit, filter: customerFilter)
        .then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          subCategories.add(fromDocumentSnapshot(d));
        }
      }
    });

    return subCategories;
  }

  static SubCategory fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    SubCategory subCategory;
    Map<String, dynamic> data;

    data = value.data() as Map<String, dynamic>;

    subCategory = SubCategory(
        documentId: value.id,
        name: data.containsKey('name') ? data['name'] : null,
        categoryId: data.containsKey('categoryId') ? data['categoryId'] : null,
        categoryName: data.containsKey('categoryName') ? data['categoryName'] : null,
        customer: data.containsKey('customer') ? data['customer'] : null,
        created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
        updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
        deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null);

    return subCategory;
  }
}
