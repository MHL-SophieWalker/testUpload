import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firebase_storage_helper.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/actions/assignee.dart';
import 'package:hart_suite/models/actions/action.dart';
import 'package:hart_suite/models/actions/subcategory.dart';
import 'package:hart_suite/models/actions/verifier.dart';
import 'package:hart_suite/models/area/area_snapshot.dart';
import 'package:hart_suite/models/attachment/attachment.dart';
import 'package:hart_suite/models/comment/comment.dart';
import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';

class ActionRepo {
  final String basePath = 'customers';
  final String collectionName = 'apps/Actions/actions';
  final String nextRefLocation = 'apps';
  late String nextRefPath;
  late String path;
  late String customer;
  late PersonSnapshot? personSnapshot;

  ActionRepo({bool useMocks = false, required this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    nextRefPath = '$basePath/$customer/$nextRefLocation';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<Action?>> get({bool populate = false}) async {
    List<Action> actions = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) async {
      if (value.docs.isNotEmpty) {
        Map<String, Attachment>? attachments = {};
        Map<String, Assignee> assignees = {};
        Map<String, Verifier> verifiers = {};
        List<Auditable>? log = List.empty(growable: true);
        List<Comment>? comments = List.empty(growable: true);

        for (var d in value.docs) {
          log = [];
          attachments = {};
          assignees = {};
          verifiers = {};

          actions.add(fromDocumentSnapshot(d, log, comments, attachments, assignees, verifiers));
        }

        if (populate && actions.isNotEmpty) {
          await populateItems(actions: actions).then((value) => actions = value);
        }
      }
    });

    return actions;
  }

  Future<Action?> getById({required String id, required bool populate}) async {
    Action? action;
    List<Auditable> log = List.empty(growable: true);
    List<Comment> comments = List.empty(growable: true);
    Map<String, Attachment>? attachments = {};
    Map<String, Assignee> assignees = {};
    Map<String, Verifier> verifiers = {};

    action = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) async {
      if (value.exists) {
        action = fromDocumentSnapshot(value, log, comments, attachments, assignees, verifiers);
      }
    });

    if (populate) {
      await populateItem(action: action!).then((value) => action = value);
    }

    return action;
  }

  Future<List<Action?>> getByFilter({bool populate = false, required Filter filter, int limit = 25}) async {
    List<Action> actions = List.empty(growable: true);

    await FirestoreHelper.instance?.getDocumentsByFilter(path: path, filter: filter, limit: limit).then((value) async {
      if (value.docs.isNotEmpty) {
        List<Auditable> log = List.empty(growable: true);
        List<Comment> comments = List.empty(growable: true);
        Map<String, Attachment>? attachments = {};
        Map<String, Assignee> assignees = {};
        Map<String, Verifier> verifiers = {};

        for (var d in value.docs) {
          log = List.empty(growable: true);
          comments = List.empty(growable: true);
          attachments = {};
          assignees = {};
          verifiers = {};

          actions.add(fromDocumentSnapshot(d, log, comments, attachments, assignees, verifiers));
        }

        if (populate && actions.isNotEmpty) {
          await populateItems(actions: actions).then((value) => actions = value);
        }
      }
    });

    return actions;
  }

  Future<List<Action?>> getByFilterWithOrderBy({bool populate = false, required Filter filter, int limit = 25, required String orderBy}) async {
    List<Action> actions = List.empty(growable: true);

    await FirestoreHelper.instance?.getDocumentsByFilterWithOrderBy(path: path, filter: filter, limit: limit, orderBy: orderBy).then((value) async {
      if (value.docs.isNotEmpty) {
        List<Auditable> log = List.empty(growable: true);
        List<Comment> comments = List.empty(growable: true);
        Map<String, Attachment>? attachments = {};
        Map<String, Assignee> assignees = {};
        Map<String, Verifier> verifiers = {};

        for (var d in value.docs) {
          log = List.empty(growable: true);
          comments = List.empty(growable: true);
          attachments = {};
          assignees = {};
          verifiers = {};

          actions.add(fromDocumentSnapshot(d, log, comments, attachments, assignees, verifiers));
        }

        if (populate && actions.isNotEmpty) {
          await populateItems(actions: actions).then((value) => actions = value);
        }
      }
    });

    return actions;
  }

  Future<List<String>> getAdmins() async {
    List<String> adminIds = List.empty(growable: true);
    String adminPath = '$basePath/$customer/apps';
    String id = 'Actions';

    await FirestoreHelper.instance?.getDocumentById(path: adminPath, id: id).then((value) {
      if (value.exists) {
        for (String s in value.get('admins')) {
          adminIds.add(s);
        }
      }
    });

    return adminIds;
  }

  Future<void> updateAdmins({required List<String> adminIds}) async {
    String adminPath = '$basePath/$customer/apps';
    String id = 'Actions';

    await FirestoreHelper.instance?.updateDocument(path: adminPath, data: {'admins': adminIds}, id: id);
  }

  Future<int> getCount({required Filter filter}) async {
    int count = 0;

    await FirestoreHelper.instance?.getDocumentCountByFilter(path: path, filter: filter).then((value) => count = value.count ?? 0);

    return count;
  }

  Future<void> update({required Action action}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    action.updated = audit;
    action.generateWildTags();

    await FirestoreHelper.instance?.updateDocument(path: path, data: action.toMap(), id: action.documentId!);
  }

  Future<Action> add({required Action action}) async {
    //use a transaction and set the refNum
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    action.created = audit;
    action.generateWildTags();

    final actionRef = await FirestoreHelper.instance?.getDocumentById(path: nextRefPath, id: 'Actions');
    await FirestoreHelper.instance?.runTransaction((transaction) async {
      if (actionRef != null) {
        int refNum = actionRef.get('nextRef');
        actionRef.reference.update({'nextRef': refNum + 1});
        action.refNum = refNum;

        await FirestoreHelper.instance?.addDocument(path: path, data: action.toMap()).then((value) {
          action.documentId = value.id;
        });
      }
    });

    return action;
  }

  Future<void> delete(Action action) async {
    await FirestoreHelper.instance?.removeDocument(path: path, id: action.documentId!);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: collectionName) ?? const Stream.empty();
  }

  Future<List<Action>> populateItems({required List<Action> actions}) async {
    for (Action action in actions) {
      await populateItem(action: action).then((value) => action = value);
    }

    return actions;
  }

  Future<Action> populateItem({required Action action}) async {
    Assignee assignee;
    Verifier verifier;
    Attachment attachment;

    if (action.assignees != null && action.assignees!.isNotEmpty) {
      for (var key in action.assignees!.keys) {
        assignee = action.assignees![key]!;
        assignee.person.remoteImageUrl = await FirebaseStorageHelper.getProfileImageDownloadUrl(imagePath: assignee.person.imagePath ?? '');
      }
    }

    if (action.verifiers != null && action.verifiers!.isNotEmpty) {
      for (var key in action.verifiers!.keys) {
        verifier = action.verifiers![key]!;
        verifier.person.remoteImageUrl = await FirebaseStorageHelper.getProfileImageDownloadUrl(imagePath: verifier.person.imagePath ?? '');
      }
    }

    if (action.attachments != null && action.attachments!.isNotEmpty) {
      for (var key in action.attachments!.keys) {
        attachment = action.attachments![key]!;

        if (attachment.created != null && attachment.created!.person != null) {
          attachment.created!.person!.remoteImageUrl =
              await FirebaseStorageHelper.getProfileImageDownloadUrl(imagePath: attachment.created!.person!.imagePath ?? '');
        }
      }
    }

    return action;
  }

  static Action fromDocumentSnapshot(
    DocumentSnapshot<Object?> value,
    List<Auditable> log,
    List<Comment> comments,
    Map<String, Attachment> attachments,
    Map<String, Assignee> assignees,
    Map<String, Verifier> verifiers,
  ) {
    Action action;
    List<String> firebaseFilterIds, linkedActionIds, wildTags;
    Map<String, dynamic> data;
    List<Discipline> themes;

    data = value.data() as Map<String, dynamic>;
    themes = List.empty(growable: true);

    firebaseFilterIds = List.empty(growable: true);
    linkedActionIds = List.empty(growable: true);
    wildTags = List.empty(growable: true);

    if (data.containsKey('log') && data['log'] != null) {
      for (var key in data['log']) {
        if (key != null && key.isNotEmpty) {
          log.add(Auditable.fromMap(key)!);
        }
      }
    }

    if (data.containsKey('comments') && data['comments'] != null) {
      for (var key in data['comments']) {
        if (key != null && key.isNotEmpty) {
          comments.add(Comment.fromMap(key)!);
        }
      }
    }

    if (data.containsKey('attachments') && data['attachments'] != null) {
      for (var key in data['attachments'].keys) {
        attachments[key] = Attachment.fromMap(data['attachments'][key])!;
      }
    }

    if (data.containsKey('assignees') && data['assignees'] != null) {
      for (var key in data['assignees'].keys) {
        assignees[key] = Assignee.fromMap(data['assignees'][key])!;
      }
    }

    if (data.containsKey('verifiers') && data['verifiers'] != null) {
      for (var key in data['verifiers'].keys) {
        verifiers[key] = Verifier.fromMap(data['verifiers'][key])!;
      }
    }

    if (data.containsKey('firebaseFilterIds') && data['firebaseFilterIds'] != null) {
      for (var av in data['firebaseFilterIds']) {
        firebaseFilterIds.add(av.toString());
      }
    }

    if (data.containsKey('themes') && data['themes'] != null) {
      for (var t in data['themes']) {
        themes.add(Discipline.fromMap(t)!);
      }
    }

    if (data.containsKey('wildTags') && data['wildTags'] != null) {
      for (var wt in data['wildTags']) {
        wildTags.add(wt.toString());
      }
    }

    if (data.containsKey('linkedActionIds') && data['linkedActionIds'] != null) {
      for (var la in data['linkedActionIds']) {
        linkedActionIds.add(la.toString());
      }
    }

    action = Action(
      documentId: value.id,
      refNum: data.containsKey('refNum') ? data['refNum'] : null,
      title: data.containsKey('title') ? data['title'] : null,
      description: data.containsKey('description') ? data['description'] : null,
      due: data.containsKey('due') ? (data['due'] as Timestamp).toDate() : null,
      status: data.containsKey('status') ? data['status'] : null,
      customer: data.containsKey('customer') ? data['customer'] : null,
      subCategory: data.containsKey('subCategory') ? SubCategory.fromMap(data['subCategory']) : null,
      area: data.containsKey('area') ? AreaSnapshot.fromMap(data['area']) : null,
      firebaseFilterIds: firebaseFilterIds,
      log: log,
      attachments: attachments,
      assignees: assignees,
      verifiers: verifiers,
      created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
      updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
      deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null,
      comments: comments,
      themes: themes,
      wildTags: wildTags,
      linkedActionIds: linkedActionIds,
    );

    return action;
  }
}
