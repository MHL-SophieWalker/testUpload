import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/app/app.dart';
import 'package:hart_suite/models/change/change_log.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/models/profile/profile.dart';
import 'package:hart_suite/repos/app/app_repo.dart';
import 'package:hart_suite/repos/profile/profile_repo.dart';

class ChangeLogRepo {
  final String basePath = 'customers';
  final String collectionName = 'changeLogs';
  late String customer;
  late String path;
  late PersonSnapshot? personSnapshot;

  ChangeLogRepo({bool useMocks = false, this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<ChangeLog>> get({bool populate = false}) async {
    List<ChangeLog> changeLogs = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          changeLogs.add(fromDocumentSnapshot(d));
        }
      }
    });

    changeLogs.sort((a, b) => a.created!.dateStamp!.compareTo(b.created!.dateStamp!));

    if (populate && changeLogs.isNotEmpty) {
      changeLogs = await populateItems(changeLogs: changeLogs);
    }

    return changeLogs;
  }

  Future<ChangeLog?> getById({required String id, bool populate = false}) async {
    ChangeLog? changeLog;

    changeLog = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        changeLog = fromDocumentSnapshot(value);
      }
    });

    if (populate && changeLog != null) {
      changeLog = await populateItem(changeLog: changeLog!).then((value) => value);
    }

    return changeLog;
  }

  Future<void> update({required ChangeLog changeLog}) async {
    changeLog.updated = Auditable(
      dateStamp: DateTime.now(),
      person: personSnapshot,
    );
    await FirestoreHelper.instance?.updateDocument(path: path, data: changeLog.toMap(), id: changeLog.documentId!);
  }

  Future<void> add({required ChangeLog changeLog}) async {
    changeLog.created = Auditable(
      dateStamp: DateTime.now(),
      person: personSnapshot,
    );
    await FirestoreHelper.instance?.addDocument(path: path, data: changeLog.toMap()).then((value) => changeLog.documentId = value.id);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  Future<List<ChangeLog>> populateItems({required List<ChangeLog> changeLogs}) async {
    List<ChangeLog> populatedChangeLogs = List.empty(growable: true);

    for (var changeLog in changeLogs) {
      await populateItem(changeLog: changeLog).then((value) => populatedChangeLogs.add(value));
    }

    return populatedChangeLogs;
  }

  Future<ChangeLog> populateItem({required ChangeLog changeLog}) async {
    AppRepo appRepo;
    ProfileRepo profileRepo;

    appRepo = AppRepo(personSnapshot: personSnapshot);
    profileRepo = ProfileRepo(personSnapshot: personSnapshot, customer: customer);

    for (var key in changeLog.app.keys) {
      await appRepo.getById(id: key).then((value) => changeLog.app[key] = value);
    }
    for (var key in changeLog.profile.keys) {
      await profileRepo.getById(id: key).then((value) => changeLog.profile[key] = value);
    }

    return changeLog;
  }

  static ChangeLog fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    ChangeLog changeLog;
    Map<String, App?> appMap = {};
    Map<String, Profile?> profileMap = {};
    Map<String, dynamic> data;

    data = value.data() as Map<String, dynamic>;

    if (data.containsKey('app') && data['app'] != null) {
      for (var key in data['app'].keys) {
        appMap[key] = App.fromMap(data['app'][key]);
      }
    }

    if (data.containsKey('profile') && data['profile'] != null) {
      for (var key in data['profile'].keys) {
        profileMap[key] = Profile.fromMap(data['profile'][key]);
      }
    }

    changeLog = ChangeLog(
        documentId: value.id,
        app: appMap,
        changedDocumentId: data.containsKey('changedDocumentId') ? data['changedDocumentId'] : '',
        profile: profileMap,
        changeTarget: data.containsKey('changeTarget') ? data['changeTarget'] : '',
        changeField: data.containsKey('changeField') ? data['changeField'] : '',
        changeOn: data.containsKey('changeOn') ? (data['changeOn'] as Timestamp).toDate() : DateTime.now(),
        valueFrom: data.containsKey('valueFrom') ? data['valueFrom'] : '',
        valueTo: data.containsKey('valueTo') ? data['valueTo'] : '',
        message: data.containsKey('message') ? data['message'] : '',
        created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
        updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
        deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null);

    return changeLog;
  }
}
