import 'package:hart_suite/helpers/firebase/firestore_helper.dart';

class LicenseRepo {
  final String basePath = 'customers';
  final String collectionName = 'license';
  late String path, customer;

  LicenseRepo({bool useMocks = false, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  Future<bool> userHasLicense({required String userId, required String monthId}) async {
    bool hasLicense;
    int licenses;
    Map<String, dynamic> lic;

    licenses = 0;
    hasLicense = false;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: 'quota').then((value) {
      if (value.exists) {
        if (value['total'] != null) {
          licenses = value['total'];
        } else {
          licenses = 0;
        }
      } else {
        licenses = 0;
      }
    });

    if (licenses > 0) {
      await FirestoreHelper.instance?.getDocumentById(path: path, id: monthId).then((value) async {
        if (value.exists) {
          lic = value.data() as Map<String, dynamic>;

          if (lic[userId] != null) {
            hasLicense = true;
          } else if (lic.keys.length < licenses) {
            lic[userId] = true;
            await FirestoreHelper.instance?.updateDocument(path: path, id: monthId, data: lic).then((value) => hasLicense = true);
          }
        }
      });
    }

    return hasLicense;
  }
}
