import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firebase_storage_helper.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/address.dart';
import 'package:hart_suite/models/profile/contact.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/models/profile/position.dart';
import 'package:hart_suite/repos/discipline/discipline_repo.dart';

class PersonRepo {
  late String path = 'people';
  late PersonSnapshot? personSnapshot;

  PersonRepo({bool useMocks = false, this.personSnapshot}) {
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<Person>> getByCustomer({bool populate = false, required String customer}) async {
    List<Person> people = List.empty(growable: true);
    Filter filter;

    filter = Filter('access', arrayContains: customer);
    //limit set to 1000 as we want all the people in the customer
    await FirestoreHelper.instance?.getDocumentsByFilterWithOrderBy(path: path, filter: filter, limit: 1000, orderBy: 'fullName').then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          people.add(fromDocumentSnapshot(d));
        }
      }
    });

    if (populate && people.isNotEmpty) {
      await populateItems(people: people).then((value) => people = value);
    }

    return people;
  }

  Future<List<Person>> get({bool populate = false}) async {
    List<Person> people = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          people.add(fromDocumentSnapshot(d));
        }
      }
    });

    if (populate && people.isNotEmpty) {
      await populateItems(people: people).then((value) => people = value);
    }

    return people;
  }

  Future<Person?> getById({required String id, bool populate = false}) async {
    Person? person;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        person = fromDocumentSnapshot(value);
      } else {
        person = null;
      }
    });

    if (populate && person != null) {
      await populateItem(person: person!).then((value) => person = value);
    }

    return person;
  }

  Future<List<Person>> getByList({required List<String> ids, bool populate = false}) async {
    List<Person> people = List.empty(growable: true);
    Filter filter;
    Map<int, List<String>> batchedIds = {};

    if (ids.isNotEmpty) {
      if (ids.length > 30) {
        for (var i = 0; i < ids.length; i += 30) {
          batchedIds[i] = ids.sublist(i, i + 30 < ids.length ? i + 30 : ids.length);
        }
      } else {
        batchedIds[0] = ids;
      }

      for (var key in batchedIds.keys) {
        filter = Filter('documentId', whereIn: batchedIds[key]);

        await FirestoreHelper.instance?.getDocumentsByFilter(path: path, filter: filter, limit: 1000).then((value) async {
          if (value.docs.isNotEmpty) {
            for (var d in value.docs) {
              people.add(fromDocumentSnapshot(d));
            }
          }
        });
      }
    }

    if (populate && people.isNotEmpty) {
      people = await populateItems(people: people);
    }

    return people;
  }

  Future<void> update({required Person person}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    person.updated = audit;

    await FirestoreHelper.instance?.updateDocument(path: path, data: person.toMap(), id: person.documentId!);
  }

  Future<void> add({required Person person}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    person.created = audit;

    await FirestoreHelper.instance?.addDocument(path: path, data: person.toMap()).then((value) => person.documentId = value.id);
  }

  Future<void> delete({required Person person}) async {
    await FirestoreHelper.instance?.removeDocument(path: path, id: person.documentId!);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  Future<List<Person>> populateItems({required List<Person> people}) async {
    for (var person in people) {
      await populateItem(person: person).then(
        (value) => person = value,
      );
    }

    return people;
  }

  Future<Person> populateItem({required Person person}) async {
    DisciplineRepo disciplineRepo;

    personSnapshot ??= person.getPersonSnapshot();

    disciplineRepo = DisciplineRepo(personSnapshot: personSnapshot!);

    if (person.disciplines != null && person.disciplines!.isNotEmpty) {
      for (var key in person.disciplines!.keys) {
        await disciplineRepo.getById(id: key).then((value) => person.disciplines![key] = value);
      }
    }

    person.remoteImageUrl = await getProfileImageDownloadUrl(person: person);

    return person;
  }

  Future<String> getProfileImageDownloadUrl({required Person person}) async {
    return FirebaseStorageHelper.getProfileImageDownloadUrl(imagePath: person.getImagePathString());
  }

  Future<List<Person>> search({required String term, String field = 'fullNameLower', int limit = 5, required String customer}) async {
    List<Person> people = List.empty(growable: true);
    Filter filter;

    filter = Filter('access', arrayContains: customer);

    await FirestoreHelper.instance?.getDocumentsBySearchTermWithFilter(path: path, field: field, searchTerm: term, filter: filter, limit: limit).then((value) {
      for (var d in value.docs) {
        people.add(fromDocumentSnapshot(d));
      }
    });

    for (Person person in people) {
      person.remoteImageUrl = await getProfileImageDownloadUrl(person: person);
    }

    return people;
  }

  Future<List<Person>> getDocumentsByFilter({required Filter filter, int limit = 5}) async {
    List<Person> people = List.empty(growable: true);

    await FirestoreHelper.instance?.getDocumentsByFilter(path: path, filter: filter, limit: limit).then((value) {
      for (var d in value.docs) {
        people.add(fromDocumentSnapshot(d));
      }
    });

    for (Person person in people) {
      person.remoteImageUrl = await getProfileImageDownloadUrl(person: person);
    }

    return people;
  }

  Future<void> set({required Person person}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    person.created = audit;

    await FirestoreHelper.instance?.setDocument(path: path, data: person.toMap(), id: person.documentId!);
  }

  Future<Person?> getMyFoetus({int delay = 300, required String id}) {
    return getById(id: id);
  }

  static Person fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    Person person;
    Map<String, dynamic> data;
    Map<String, Discipline?> disciplineMap;

    disciplineMap = {};
    data = value.data() as Map<String, dynamic>;

    if (data.containsKey('disciplines') && data['disciplines'] != null) {
      for (var key in data['disciplines'].keys) {
        disciplineMap[key] = Discipline.fromMap(data['disciplines'][key]);
      }
    }

    person = Person(
      documentId: value.id,
      image: data.containsKey('image') ? data['image'] : '',
      firstName: data.containsKey('firstName') ? data['firstName'] : '',
      lastName: data.containsKey('lastName') ? data['lastName'] : '',
      initials: data.containsKey('initials') ? data['initials'] : '',
      contact: data.containsKey('contact') ? Contact.fromMap(data['contact']) : null,
      address: data.containsKey('address') ? Address.fromMap(data['address']) : null,
      position: data.containsKey('position') ? Position.fromMap(data['position']) : null,
      disciplines: disciplineMap,
      access: data.containsKey('access') && data['access'] != null ? List<String>.from(data['access']) : [],
      lastAccessed: data.containsKey('lastAccessed') ? data['lastAccessed'] : null,
      disabled: data.containsKey('disabled') ? Auditable.fromMap(data['disabled']) : null,
      created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
      updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
      deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null,
      fullName: data.containsKey('fullName') ? data['fullName'] : '',
    );

    return person;
  }
}
