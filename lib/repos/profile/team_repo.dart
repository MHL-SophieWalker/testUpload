import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/calendar/calendar.dart';
import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/models/profile/team.dart';
import 'package:hart_suite/repos/calendar/calendar_repo.dart';
import 'package:hart_suite/repos/discipline/discipline_repo.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';

class TeamRepo {
  final String basePath = 'customers';
  final String collectionName = 'teams';
  late String customer;
  late String path;
  late PersonSnapshot? personSnapshot;

  TeamRepo({bool useMocks = false, this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<Team>> get({bool populate = false}) async {
    List<Team> teams = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollectionWithOrderBy(path: path, orderBy: 'name').then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          teams.add(fromDocumentSnapshot(d));
        }

        teams.sort((a, b) => a.name.compareTo(b.name));
      }
    });

    if (populate && teams.isNotEmpty && personSnapshot != null) {
      await populateItems(teams: teams).then((value) => teams = value);
    }

    return teams;
  }

  Future<Team?> getById({required String id, bool populate = false}) async {
    Team? team;

    team = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        team = fromDocumentSnapshot(value);
      }
    });

    if (populate && team != null && personSnapshot != null) {
      await populateItem(team: team!).then((value) => team = value);
    }

    return team;
  }

  Future<List<Team>?> getByList({required List<String> ids, bool populate = false}) async {
    List<Team>? teams;
    Filter filter;
    Map<int, List<String>> batchedIds = {};

    if (ids.isNotEmpty) {
      if (ids.length > 30) {
        for (var i = 0; i < ids.length; i += 30) {
          batchedIds[i] = ids.sublist(i, i + 30 < ids.length ? i + 30 : ids.length);
        }
      } else {
        batchedIds[0] = ids;
      }

      for (var key in batchedIds.keys) {
        filter = Filter('documentId', whereIn: batchedIds[key]);

        await FirestoreHelper.instance?.getDocumentsByFilter(path: path, filter: filter).then((value) async {
          if (value.docs.isNotEmpty) {
            teams = List.empty(growable: true);
            for (var d in value.docs) {
              teams!.add(fromDocumentSnapshot(d));
            }
          }
        });
      }
    }

    if (populate && teams != null && teams!.isNotEmpty) {
      teams = await populateItems(teams: teams!);
    }

    return teams;
  }

  Future<void> update({required Team team}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    team.updated = audit;

    await FirestoreHelper.instance?.updateDocument(path: path, data: team.toMap(), id: team.documentId!);
  }

  Future<void> add({required Team team}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    team.created = audit;

    await FirestoreHelper.instance?.addDocument(path: path, data: team.toMap()).then((value) => team.documentId = value.id);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  Future<List<Team>> search({required String term, required int limit}) async {
    List<Team> teams = List.empty(growable: true);
    String collectionGroup = 'teams';
    Filter filter;

    filter = Filter('customer', isEqualTo: customer);

    await FirestoreHelper.instance
        ?.getDocumentsBySearchTermWithFilter(path: collectionGroup, field: 'nameLower', searchTerm: term, limit: limit, filter: filter)
        .then((value) {
      for (var d in value.docs) {
        teams.add(fromDocumentSnapshot(d));
      }

      teams.sort((a, b) => a.name.compareTo(b.name));
    });

    return teams;
  }

  Future<List<Team>> populateItems({required List<Team> teams}) async {
    for (Team t in teams) {
      await populateItem(team: t);
    }

    return teams;
  }

  Future<Team> populateItem({required Team team}) async {
    DisciplineRepo disciplineRepo;
    CalendarRepo calendarRepo;
    PersonRepo personRepo;

    disciplineRepo = DisciplineRepo(personSnapshot: personSnapshot);
    calendarRepo = CalendarRepo(personSnapshot: personSnapshot, customer: customer);
    personRepo = PersonRepo(personSnapshot: personSnapshot);

    if (team.disciplines != null) {
      for (var key in team.disciplines!.keys) {
        await disciplineRepo.getById(id: key).then((value) => team.disciplines![key] = value);
      }
    }

    if (team.calendar != null) {
      for (var key in team.calendar!.keys) {
        await calendarRepo.getById(id: key).then((value) => team.calendar![key] = value);
      }
    }

    if (team.leaders != null) {
      for (var key in team.leaders!.keys) {
        await personRepo.getById(id: key, populate: true).then((value) => team.leaders![key] = value);
      }
    }

    if (team.members != null) {
      for (var key in team.members!.keys) {
        await personRepo.getById(id: key, populate: true).then((value) => team.members![key] = value);
      }
    }

    return team;
  }

  static Team fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    Team team;
    Map<String, dynamic> data;
    Map<String, Discipline?> disciplineMap;
    Map<String, Calendar?> calendarMap;
    Map<String, Person?> leadersMap;
    Map<String, Person?> membersMap;

    data = value.data() as Map<String, dynamic>;

    disciplineMap = {};
    calendarMap = {};
    leadersMap = {};
    membersMap = {};

    if (data.containsKey('disciplines') && data['disciplines'] != null) {
      for (var key in data['disciplines'].keys) {
        disciplineMap[key] = Discipline.fromMap(data['disciplines'][key]);
      }
    }

    if (data.containsKey('calendar') && data['calendar'] != null) {
      for (var key in data['calendar'].keys) {
        calendarMap[key] = Calendar.fromMap(data['calendar'][key]);
      }
    }

    if (data.containsKey('leaders') && data['leaders'] != null) {
      for (var key in data['leaders'].keys) {
        leadersMap[key] = Person.fromMap(data['leaders'][key]);
      }
    }

    if (data.containsKey('members') && data['members'] != null) {
      for (var key in data['members'].keys) {
        membersMap[key] = Person.fromMap(data['members'][key]);
      }
    }

    team = Team(
        documentId: value.id,
        name: data.containsKey('name') ? data['name'] : '',
        customer: data.containsKey('customer') ? data['customer'] : '',
        disciplines: disciplineMap,
        calendar: calendarMap,
        leaders: leadersMap,
        members: membersMap,
        created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
        updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
        deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null);

    return team;
  }
}
