import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/data/data_server.dart';
import 'package:hart_suite/models/data/data_server_type.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/repos/data/data_server_type_repo.dart';

class DataServerRepo {
  final String basePath = 'customers';
  final String collectionName = 'dataServers';
  late String customer;
  late String path;
  late PersonSnapshot? personSnapshot;

  DataServerRepo({bool useMocks = false, this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<DataServer>> get({bool populate = false}) async {
    List<DataServer> dataServers = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          dataServers.add(fromDocumentSnapshot(d));
        }
      }
    });

    if (populate && dataServers.isNotEmpty) {
      dataServers = await populateItems(dataServers: dataServers);
    }

    dataServers.sort((a, b) => a.name.compareTo(b.name));

    return dataServers;
  }

  Future<DataServer?> getById({required String id, bool populate = false}) async {
    DataServer? dataServer;

    dataServer = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        dataServer = fromDocumentSnapshot(value);
      }
    });

    if (populate && dataServer != null) {
      await populateItem(dataServer: dataServer!).then((value) => dataServer = value);
    }

    return dataServer;
  }

  Future<void> update({required DataServer dataServer}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    dataServer.updated = audit;

    await FirestoreHelper.instance?.updateDocument(path: path, data: dataServer.toMap(), id: dataServer.documentId!);
  }

  Future<void> add({required DataServer dataServer}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    dataServer.created = audit;

    await FirestoreHelper.instance?.addDocument(path: path, data: dataServer.toMap()).then((value) => dataServer.documentId = value.id);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  Future<List<DataServer>> populateItems({required List<DataServer> dataServers}) async {
    for (var dataServer in dataServers) {
      await populateItem(dataServer: dataServer).then((value) => dataServer = value);
    }

    return dataServers;
  }

  Future<DataServer> populateItem({required DataServer dataServer}) async {
    DataServerTypeRepo dataServerTypeRepo;

    dataServerTypeRepo = DataServerTypeRepo(personSnapshot: personSnapshot, customer: customer);

    for (var key in dataServer.dataServerType.keys) {
      await dataServerTypeRepo.getById(id: key).then((value) => dataServer.dataServerType[key] = value);
    }

    return dataServer;
  }

  static DataServer fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    DataServer dataServer;
    Map<String, dynamic> data;
    Map<String, DataServerType?> dataServerTypeMap;

    dataServerTypeMap = {};

    data = value.data() as Map<String, dynamic>;

    if (data.containsKey('dataServerType') && data['dataServerType'] != null) {
      for (var key in data['dataServerType'].keys) {
        dataServerTypeMap[key] = DataServerType.fromMap(data['dataServerType'][key]);
      }
    }

    dataServer = DataServer(
        documentId: value.id,
        name: data.containsKey('name') ? data['name'] : '',
        connectionString: data.containsKey('connectionString') ? data['connectionString'] : '',
        dataServerType: dataServerTypeMap,
        created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
        updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
        deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null);

    return dataServer;
  }
}
