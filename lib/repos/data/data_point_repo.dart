import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/data/data_point.dart';
import 'package:hart_suite/models/data/data_server.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/repos/data/data_server_repo.dart';

class DataPointRepo {
  final String basePath = 'customers';
  final String collectionName = 'dataPoints';
  late String customer;
  late String path;
  late PersonSnapshot? personSnapshot;

  DataPointRepo({bool useMocks = false, this.personSnapshot, required this.customer}) {
    path = '$basePath/$customer/$collectionName';
    FirestoreHelper.useMocks = useMocks;
  }

  setPersonSnapshot(PersonSnapshot personSnapshot) {
    this.personSnapshot = personSnapshot;
  }

  Future<List<DataPoint>> get({bool populate = false}) async {
    List<DataPoint> dataPoints = List.empty(growable: true);

    await FirestoreHelper.instance?.getDataCollection(path: path).then((value) {
      if (value.docs.isNotEmpty) {
        for (var d in value.docs) {
          dataPoints.add(fromDocumentSnapshot(d));
        }
      }
    });

    dataPoints.sort((a, b) => a.name.compareTo(b.name));

    if (populate && dataPoints.isNotEmpty) {
      await populateItems(dataPoints: dataPoints).then((value) => dataPoints = value);
    }

    return dataPoints;
  }

  Future<DataPoint?> getById({required String id, bool populate = false}) async {
    DataPoint? dataPoint;

    dataPoint = null;

    await FirestoreHelper.instance?.getDocumentById(path: path, id: id).then((value) {
      if (value.exists) {
        dataPoint = fromDocumentSnapshot(value);
      }
    });

    if (populate && dataPoint != null) {
      await populateItem(dataPoint: dataPoint!).then((value) => dataPoint = value);
    }

    return dataPoint;
  }

  Future<void> update({required DataPoint dataPoint}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    dataPoint.updated = audit;

    await FirestoreHelper.instance?.updateDocument(path: path, data: dataPoint.toMap(), id: dataPoint.documentId!);
  }

  Future<void> add({required DataPoint dataPoint}) async {
    Auditable audit = Auditable(person: personSnapshot, dateStamp: DateTime.now());

    dataPoint.created = audit;

    await FirestoreHelper.instance?.addDocument(path: path, data: dataPoint.toMap()).then((value) => dataPoint.documentId = value.id);
  }

  Stream getStream() {
    return FirestoreHelper.instance?.streamDataCollection(path: path) ?? const Stream.empty();
  }

  Future<List<DataPoint>> populateItems({required List<DataPoint> dataPoints}) async {
    for (var dataPoint in dataPoints) {
      await populateItem(dataPoint: dataPoint).then((value) => dataPoint = value);
    }

    return dataPoints;
  }

  Future<DataPoint> populateItem({required DataPoint dataPoint}) async {
    DataServerRepo dataServerRepo;

    dataServerRepo = DataServerRepo(personSnapshot: personSnapshot, customer: customer);

    for (var key in dataPoint.dataServer.keys) {
      await dataServerRepo.getById(id: key, populate: true).then((value) => dataPoint.dataServer[key] = value);
    }

    return dataPoint;
  }

  static DataPoint fromDocumentSnapshot(DocumentSnapshot<Object?> value) {
    DataPoint dataPoint;
    Map<String, dynamic> data;
    Map<String, DataServer?> dataServerMap;

    dataServerMap = {};

    data = value.data() as Map<String, dynamic>;

    if (data.containsKey('dataServer') && data['dataServer'] != null) {
      for (var key in data['dataServer'].keys) {
        dataServerMap[key] = DataServer.fromMap(data['dataServer'][key]);
      }
    }

    dataPoint = DataPoint(
        documentId: value.id,
        name: data.containsKey('name') ? data['name'] : '',
        description: data.containsKey('description') ? data['description'] : '',
        dataServer: dataServerMap,
        readOperation: data.containsKey('readOperation') ? data['readOperation'] : '',
        writeOperation: data.containsKey('writeOperation') ? data['writeOperation'] : '',
        created: data.containsKey('created') ? Auditable.fromMap(data['created']) : null,
        updated: data.containsKey('updated') ? Auditable.fromMap(data['updated']) : null,
        deleted: data.containsKey('deleted') ? Auditable.fromMap(data['deleted']) : null);

    return dataPoint;
  }
}
