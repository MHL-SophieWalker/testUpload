import 'dart:math';

import 'package:flutter/material.dart';

class StyleBase {
  static const double sectionHeight = 100;
  static const double expandedSidebarWidth = 200;
  static const double collapsedSidebarWidth = 52;

  static const Color primaryRed = Color(0xFF5C001C);
  static const Color secondaryBlack = Color(0xFF071013);
  static const Color offRed = Color(0xFFB7999C);
  static const Color grey = Color(0xFFAAAAAA);
  static const Color lightGrey = Color(0xFFDFE0E2);
  static const Color green = Color(0xFF9ECE9A);
  static const Color blue = Color(0xFF496DDB);
  static const Color yellow = Color(0xFFF2AF29);
  static const Color orange = Color(0xFFF0803C);
  static const Color warningRed = Color(0xFFED254E);
  static const Color successGreen = Color(0xFF5CB85C);
  static const Color mediumGrey = Color(0xFFC3C3C3);
  static const Color charcoal = Color(0xFF36454F);
  static const Color darkGrey = Color(0xFF666666);

  static ColorScheme colorScheme = const ColorScheme(
      brightness: Brightness.light,
      primary: primaryRed,
      onPrimary: Colors.white,
      secondary: secondaryBlack,
      onSecondary: Colors.white,
      error: warningRed,
      onError: Colors.white,
      surface: Colors.white,
      onSurface: secondaryBlack,
      tertiary: mediumGrey,
      onTertiary: secondaryBlack);

  static ThemeData themeData = ThemeData(
    useMaterial3: true,
    colorScheme: colorScheme,
    appBarTheme: const AppBarTheme(
      backgroundColor: primaryRed,
      foregroundColor: Colors.white,
    ),
    cardTheme: const CardTheme(
      color: Colors.white,
      elevation: 6,
    ),
    dividerColor: primaryRed,
  );

  static getInputDecoration({String? label, String hint = '', String? errorText, String? helperText}) {
    return InputDecoration(
      labelText: label,
      hintText: hint,
      helperText: helperText,
      hintStyle: const TextStyle(color: darkGrey),
      labelStyle: const TextStyle(color: darkGrey),
      errorText: errorText,
      disabledBorder: const OutlineInputBorder(
        borderSide: BorderSide(color: mediumGrey),
      ),
      enabledBorder: const OutlineInputBorder(
        borderSide: BorderSide(color: mediumGrey),
      ),
      focusedBorder: const OutlineInputBorder(
        borderSide: BorderSide(color: primaryRed),
      ),
      errorBorder: const OutlineInputBorder(
        borderSide: BorderSide(color: warningRed, width: 0.0),
      ),
      focusedErrorBorder: const OutlineInputBorder(
        borderSide: BorderSide(color: warningRed, width: 0.0),
      ),
    );
  }

  static getSnackBar({required String message, int seconds = 2, bool isError = false}) {
    Color color = successGreen;

    if (isError) {
      color = warningRed;
    }

    return SnackBar(
      content: Text(message),
      duration: Duration(seconds: seconds),
      backgroundColor: color,
    );
  }

  static getTextButtonSidebarStyle() {
    return ButtonStyle(
      padding: WidgetStateProperty.all(const EdgeInsets.all(0)),
      foregroundColor: WidgetStateProperty.all(StyleBase.secondaryBlack),
      shape: WidgetStateProperty.all(const BeveledRectangleBorder()),
      overlayColor: WidgetStateProperty.resolveWith<Color?>(
        (Set<WidgetState> states) {
          if (states.contains(WidgetState.hovered)) {
            return StyleBase.lightGrey.withOpacity(0.5);
          }
          return null; // Use the component's default.
        },
      ),
    );
  }

  static double getSectionHeight({required int count, required int columnCount}) {
    double height;

    if (count == 0) {
      count = 1;
    }

    height = (count / min(columnCount, count)).ceil() * StyleBase.sectionHeight;

    return height;
  }

  static BoxDecoration getSidebarBoxShadowDecoration({Color? color, double? radius}) {
    return const BoxDecoration(boxShadow: [
      BoxShadow(color: StyleBase.grey, blurRadius: 5, spreadRadius: 1, offset: Offset(0, 0), blurStyle: BlurStyle.outer),
    ], color: Colors.white);
  }
}
