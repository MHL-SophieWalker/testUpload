import 'package:flutter/material.dart';
import 'package:hart_suite/helpers/class/enums_help.dart';

class StatusIcon extends StatelessWidget {
  final String status;
  final bool showTooltip;

  const StatusIcon({super.key, required this.status, this.showTooltip = false});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(2),
      child: Tooltip(
        message: showTooltip ? _getStatusText() : '',
        child: Container(
          width: 8,
          height: 8,
          decoration: BoxDecoration(color: _getStatusColor(), shape: BoxShape.circle),
        ),
      ),
    );
  }

  _getStatusColor() {
    switch (status) {
      case EnumsHelp.statusOpen:
        return Colors.green;
      case EnumsHelp.statusPastDue:
        return Colors.red;
      case EnumsHelp.statusVerification:
        return Colors.orange;
      case EnumsHelp.statusDone:
        return Colors.grey;
      case EnumsHelp.statusNew:
        return Colors.blue;
      default:
        return Colors.blue;
    }
  }

  _getStatusText() {
    switch (status) {
      case EnumsHelp.statusOpen:
        return 'Open';
      case EnumsHelp.statusPastDue:
        return 'Past Due';
      case EnumsHelp.statusVerification:
        return 'Verification';
      case EnumsHelp.statusDone:
        return 'Done';
      case EnumsHelp.statusNew:
        return 'New';
      default:
        return 'New';
    }
  }
}
