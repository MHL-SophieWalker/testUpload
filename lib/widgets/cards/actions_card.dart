import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/enums_help.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/actions/action_repo.dart';
import 'package:hart_suite/views/action/action_home.dart';
import 'package:hart_suite/widgets/misc/number_circle_coloured.dart';

class ActionsCard extends StatefulWidget {
  final Person? user;
  final bool expanded;

  const ActionsCard({super.key, required this.user, required this.expanded});

  @override
  State<ActionsCard> createState() => _ActionsCardState();
}

class _ActionsCardState extends State<ActionsCard> {
  late ActionRepo repo;
  late Future<int?>? green, amber, red;
  late int greens, ambers, reds;

  @override
  void initState() {
    Filter r, a, g, assignedTome, isOpen, verifiedByMe, pastDue, statusVerification, assOrVer, subCategoryFilter, areaFilter;
    String uid = widget.user!.documentId!;
    super.initState();

    assignedTome = Filter('firebaseFilterIds', arrayContains: 'ass:$uid');
    verifiedByMe = Filter('firebaseFilterIds', arrayContains: 'ver:$uid');
    assOrVer = Filter('firebaseFilterIds', arrayContainsAny: ['ass:$uid', 'ver:$uid']);
    isOpen = Filter('status', isEqualTo: EnumsHelp.statusOpen);
    pastDue = Filter('due', isLessThan: DateTime.now());
    statusVerification = Filter('status', isEqualTo: EnumsHelp.statusVerification);

    //These filters protect against actions raised with invalid data.
    subCategoryFilter = Filter('subcategoryId', isGreaterThanOrEqualTo: '');
    areaFilter = Filter('areaId', isGreaterThanOrEqualTo: '');

    g = Filter.and(subCategoryFilter, areaFilter, assignedTome, isOpen);
    a = Filter.and(subCategoryFilter, areaFilter, verifiedByMe, statusVerification);
    r = Filter.and(subCategoryFilter, areaFilter, assOrVer, pastDue, isOpen);

    repo = ActionRepo(personSnapshot: widget.user!.getPersonSnapshot(), customer: widget.user!.lastAccessed!);

    green = repo.getCount(filter: g).onError((error, stackTrace) => ErrorHandler.logError(exception: error, stack: stackTrace));
    amber = repo.getCount(filter: a).onError((error, stackTrace) => ErrorHandler.logError(exception: error, stack: stackTrace));
    red = repo.getCount(filter: r).onError((error, stackTrace) => ErrorHandler.logError(exception: error, stack: stackTrace));
  }

  @override
  Widget build(BuildContext context) {
    List<Widget> children;
    if ((widget.expanded && !kIsWeb) || (MediaQuery.of(context).size.width < 800) && kIsWeb) {
      children = [];
    } else {
      children = [
        FutureBuilder(
            future: green,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.done) {
                if (snapshot.hasData) {
                  greens = snapshot.data as int;

                  return NumberCircleColoured(
                    message: 'Open actions assigned to me',
                    color: Colors.green,
                    number: greens,
                    onTap: () {
                      Navigator.pushNamed(context, '/actions', arguments: ActionsHomeArgs(selectedStatusDocumentId: EnumsHelp.statusOpen, filterInput: 'a=me'));
                    },
                  );
                } else {
                  return NumberCircleColoured(
                    message: 'Open actions assigned to me',
                    color: Colors.green,
                    number: 0,
                    onTap: () {
                      Navigator.pushNamed(context, '/actions', arguments: ActionsHomeArgs(selectedStatusDocumentId: EnumsHelp.statusOpen, filterInput: 'a=me'));
                    },
                  );
                }
              } else {
                return const CircularProgressIndicator();
              }
            }),
        const Gap(10),
        FutureBuilder(
            future: amber,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.done) {
                if (snapshot.hasData) {
                  ambers = snapshot.data as int;

                  return NumberCircleColoured(
                    message: 'Open actions requiring my verification',
                    color: Colors.amber,
                    number: ambers,
                    onTap: () {
                      Navigator.pushNamed(context, '/actions',
                          arguments: ActionsHomeArgs(selectedStatusDocumentId: EnumsHelp.statusVerification, filterInput: 'v=me'));
                    },
                  );
                } else {
                  return NumberCircleColoured(
                    message: 'Open actions requiring my verification',
                    color: Colors.amber,
                    number: 0,
                    onTap: () {
                      Navigator.pushNamed(context, '/actions',
                          arguments: ActionsHomeArgs(selectedStatusDocumentId: EnumsHelp.statusVerification, filterInput: 'v=me'));
                    },
                  );
                }
              } else {
                return const CircularProgressIndicator();
              }
            }),
        const Gap(10),
        FutureBuilder(
            future: red,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.done) {
                if (snapshot.hasData) {
                  reds = snapshot.data as int;

                  return NumberCircleColoured(
                    message: 'Open actions past due which are assigned to me or need my verification',
                    color: Colors.red,
                    number: reds,
                    onTap: () {
                      Navigator.pushNamed(context, '/actions',
                          arguments: ActionsHomeArgs(selectedStatusDocumentId: EnumsHelp.statusPastDue, filterInput: 'v=me, a=me'));
                    },
                  );
                } else {
                  return NumberCircleColoured(
                    message: 'Open actions past due which are assigned to me or need my verification',
                    color: Colors.red,
                    number: 0,
                    onTap: () {
                      Navigator.pushNamed(context, '/actions',
                          arguments: ActionsHomeArgs(selectedStatusDocumentId: EnumsHelp.statusPastDue, filterInput: 'v=me, a=me'));
                    },
                  );
                }
              } else {
                return const CircularProgressIndicator();
              }
            }),
      ];
    }

    return MouseRegion(
      cursor: SystemMouseCursors.click,
      child: GestureDetector(
        onTap: () {
          Navigator.pushNamed(context, '/actions');
        },
        child: Card(
          color: Theme.of(context).cardColor,
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Padding(
                padding: EdgeInsets.fromLTRB(12, 0, 12, 0),
                child: Icon(Icons.checklist),
              ),
              const Text(
                'Actions',
                overflow: TextOverflow.ellipsis,
                style: TextStyle(fontSize: 18),
              ),
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(4, 4, 12, 4),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: children,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
