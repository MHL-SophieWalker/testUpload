import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/date_help.dart';
import 'package:hart_suite/helpers/class/enums_help.dart';
import 'package:hart_suite/models/actions/action.dart' as hartsuite_action;
import 'package:hart_suite/views/action/action_detail.dart';
import 'package:hart_suite/widgets/status/status_icon.dart';

class ActionListCard extends StatelessWidget {
  static const String overdue = 'PAST DUE';
  const ActionListCard({
    super.key,
    required this.action,
    required this.assigneesAndVerifiers,
    required this.refreshList,
    required this.expanded,
  });

  final hartsuite_action.Action action;
  final List<Widget> assigneesAndVerifiers;
  final Function refreshList;
  final bool expanded;

  @override
  Widget build(BuildContext context) {
    late String status;
    Widget widg;

    if (action.status == 'open' && action.due!.isBefore(DateTime.now())) {
      status = overdue;
    } else {
      status = action.status.toUpperCase();
    }

    widg = kIsWeb
        ? MediaQuery.of(context).size.width > 800
            ? getWebCard(context: context, status: status)
            : getMobileCard(context: context, status: status)
        : expanded
            ? getMiniCard(context: context, status: status)
            : getMobileCard(context: context, status: status);

    return widg;
  }

  Widget getMiniCard({required BuildContext context, required String status}) {
    return Card(
      color: Theme.of(context).cardColor,
      child: ListTile(
        onTap: () => onTap(context: context),
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '#${action.refNum} - ${action.title}',
              overflow: TextOverflow.ellipsis,
            ),
            Text(
              DateHelp.formatDateOnlyFriendly(action.due!),
              textAlign: TextAlign.right,
              overflow: TextOverflow.ellipsis,
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                StatusIcon(status: action.due != null && action.due!.isBefore(DateTime.now()) ? EnumsHelp.statusPastDue : action.status),
                Text(
                  status,
                  textAlign: TextAlign.right,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
            ),
          ],
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '${action.subCategory?.categoryName} - ${action.subCategory?.name}',
              textAlign: TextAlign.right,
              overflow: TextOverflow.ellipsis,
            ),
            const Gap(6),
            Row(
              children: assigneesAndVerifiers,
            ),
          ],
        ),
      ),
    );
  }

  Widget getMobileCard({required BuildContext context, required String status}) {
    TextOverflow overflow;

    overflow = TextOverflow.ellipsis;

    return Card(
      color: Theme.of(context).cardColor,
      child: ListTile(
        onTap: () => onTap(context: context),
        title: Row(children: [
          Expanded(
            child: Align(
              alignment: Alignment.topLeft,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    '#${action.refNum}',
                    overflow: overflow,
                  ),
                  Text(
                    action.title,
                    overflow: overflow,
                  ),
                ],
              ),
            ),
          ),
          const Gap(8),
          Expanded(
            child: Align(
              alignment: Alignment.topRight,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    DateHelp.formatDateOnlyFriendly(action.due!),
                    textAlign: TextAlign.right,
                    overflow: overflow,
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      StatusIcon(status: action.due != null && action.due!.isBefore(DateTime.now()) ? EnumsHelp.statusPastDue : action.status),
                      Text(
                        status,
                        textAlign: TextAlign.right,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ),
                ],
              ),
            ),
          )
        ]),
        subtitle: Row(children: [
          Expanded(
            child: Align(
              alignment: Alignment.topLeft,
              child: Row(
                children: assigneesAndVerifiers,
              ),
            ),
          ),
          Expanded(
            child: Align(
              alignment: Alignment.topRight,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    '${action.subCategory?.categoryName}',
                    textAlign: TextAlign.right,
                    overflow: overflow,
                  ),
                  Text(
                    '${action.subCategory?.name}',
                    textAlign: TextAlign.right,
                    overflow: overflow,
                  ),
                ],
              ),
            ),
          ),
        ]),
      ),
    );
  }

  Widget getWebCard({required BuildContext context, required String status}) {
    return Card(
      color: Theme.of(context).cardColor,
      child: ListTile(
        onTap: () => onTap(context: context),
        title: Row(children: [
          Expanded(
            child: Align(
              alignment: Alignment.topLeft,
              child: Text(
                '#${action.refNum} - ${action.title}',
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ),
          const Gap(8),
          Expanded(
            child: Align(
              alignment: Alignment.topRight,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  Text(
                    DateHelp.formatDateOnlyFriendly(action.due!),
                    textAlign: TextAlign.right,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const Gap(6),
                  StatusIcon(status: action.due != null && action.due!.isBefore(DateTime.now()) ? EnumsHelp.statusPastDue : action.status),
                  Text(
                    status,
                    textAlign: TextAlign.right,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          )
        ]),
        subtitle: Row(children: [
          Expanded(
            child: Align(
              alignment: Alignment.topLeft,
              child: Row(
                children: assigneesAndVerifiers,
              ),
            ),
          ),
          Expanded(
            child: Align(
              alignment: Alignment.topRight,
              child: Text(
                '${action.subCategory?.categoryName} - ${action.subCategory?.name}',
                textAlign: TextAlign.right,
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ),
        ]),
      ),
    );
  }

  void onTap({required BuildContext context}) async {
    bool refresh;
    try {
      refresh = await Navigator.pushNamed(context, ActionDetailPage.route, arguments: action) as bool;
    } catch (e) {
      refresh = false;
      ErrorHandler.logError(exception: e);
    }

    if (refresh) {
      refreshList();
    }
  }
}
