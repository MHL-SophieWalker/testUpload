import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:hart_suite/helpers/class/date_help.dart';
import 'package:hart_suite/helpers/permissions/action_permission_help.dart';
import 'package:hart_suite/helpers/ui/icon_help.dart';
import 'package:hart_suite/models/attachment/attachment.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/widgets/profile/profile_image_disc.dart';
import 'package:hart_suite/widgets/upload/file_upload.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:hart_suite/models/actions/action.dart' as act;

class AttachmentCard extends StatefulWidget {
  const AttachmentCard({super.key, required this.attachment, this.fileUpload, this.deleteAttachment, required this.permissionHelp, required this.action});

  final Attachment attachment;
  final FileUpload? fileUpload;
  final Function? deleteAttachment;
  final ActionPermissionHelp permissionHelp;
  final act.Action action;

  @override
  State<AttachmentCard> createState() => _AttachmentCardState();
}

class _AttachmentCardState extends State<AttachmentCard> {
  late Reference? ref;
  late Future<String> downloadUrl;
  late String url;
  late bool showConfirmDelete;

  @override
  void initState() {
    super.initState();

    url = '';

    if (widget.attachment.created?.person?.imagePath != null && widget.attachment.created?.person?.imagePath != '') {
      ref = FirebaseStorage.instance.ref().child(widget.attachment.created!.person!.imagePath!);
      downloadUrl = ref!.getDownloadURL();
    } else {
      ref = null;
      downloadUrl = Future.value('');
    }

    showConfirmDelete = false;
  }

  @override
  Widget build(BuildContext context) {
    return buildWidget();
  }

  Widget buildWidget() {
    Widget widg;

    downloadUrl.then((value) => setState(() {
          url = value;
        }));

    widg = GestureDetector(
      onTap: () {
        downloadFile();
      },
      child: Card(
        color: Theme.of(context).cardColor,
        child: Padding(
          padding: const EdgeInsets.fromLTRB(0, 4, 0, 4),
          child: Row(
            children: [
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: ProfileImageDisc(
                  fullName: widget.attachment.created?.person?.fullName ?? '',
                  downloadUrl: url,
                ),
              ),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Flexible(child: Text(widget.attachment.created?.person?.fullName ?? '', overflow: TextOverflow.ellipsis)),
                    Flexible(
                      child: Text(DateHelp.formatDateTimeNoSeconds(widget.attachment.created!.dateStamp!),
                          style: const TextStyle(fontSize: 10), overflow: TextOverflow.ellipsis),
                    ),
                    Row(
                      mainAxisSize: MainAxisSize.min,
                      mainAxisAlignment: MainAxisAlignment.start,
                      children: [
                        widget.attachment.isOnline
                            ? Icon(
                                Icons.language,
                                color: StyleBase.blue,
                                size: 14,
                              )
                            : IconHelp.getFileicon(
                                fileExtension: widget.attachment.fileName.split('.').last,
                                size: 14,
                              ),
                        const SizedBox(width: 2),
                        Flexible(child: Text(widget.attachment.fileName, overflow: TextOverflow.ellipsis)),
                      ],
                    ),
                    widget.fileUpload != null ? widget.fileUpload! : Container(),
                  ],
                ),
              ),
              Align(
                alignment: Alignment.centerRight,
                child: widget.permissionHelp.canEditField(ActionPermissionHelp.attachments, actionStatus: widget.action.status)
                    ? widget.deleteAttachment != null
                        ? Padding(
                            padding: const EdgeInsets.fromLTRB(8, 0, 8, 0),
                            child: getDeleteButton(),
                          )
                        : Container()
                    : Container(),
              ),
            ],
          ),
        ),
      ),
    );

    return MouseRegion(
      cursor: SystemMouseCursors.click,
      child: widg,
    );
  }

  Widget getDeleteButton() {
    Widget buttons;

    if (showConfirmDelete) {
      buttons = Row(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          const Text('Are You Sure?'),
          const SizedBox(width: 4),
          TextButton(
            onPressed: () {
              widget.deleteAttachment!();
              showConfirmDelete = false;
            },
            child: const Text('Yes'),
          ),
          TextButton(
            onPressed: () => setState(() {
              showConfirmDelete = false;
            }),
            child: const Text('No'),
          ),
        ],
      );
    } else {
      buttons = IconButton(
        icon: const Icon(Icons.delete),
        color: StyleBase.warningRed,
        onPressed: () {
          setState(() {
            showConfirmDelete = true;
          });
        },
      );
    }

    return buttons;
  }

  downloadFile() async {
    Uri uri;
    String filePath;

    if (widget.attachment.isOnline) {
      filePath = widget.attachment.fileLocation;
    } else {
      filePath = await FirebaseStorage.instance.ref().child(widget.attachment.fileLocation).getDownloadURL();
    }

    uri = Uri.parse(filePath);

    await launchUrl(uri);
  }
}
