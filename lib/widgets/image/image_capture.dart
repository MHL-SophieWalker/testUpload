import 'package:camera/camera.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/ui/crop_help.dart';
import 'package:hart_suite/helpers/firebase/firebase_storage_helper.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/form/material_icon_button.dart';
import 'package:image/image.dart' as img;

class ImageCapture extends StatefulWidget {
  const ImageCapture({
    super.key,
    required this.camera,
    this.height = 350,
    this.width = 350,
    required this.cancelCallback,
    required this.remotePath,
    required this.person,
  });

  final CameraDescription camera;
  final double height, width;
  final Function cancelCallback;
  final String remotePath;
  final Person person;

  @override
  ImageCaptureState createState() => ImageCaptureState();
}

class ImageCaptureState extends State<ImageCapture> {
  late CameraController controller;
  late Future<void> initializeControllerFuture;

  @override
  void initState() {
    super.initState();

    controller = CameraController(
      widget.camera,
      ResolutionPreset.medium,
    );
    initializeControllerFuture = controller.initialize();
  }

  @override
  void dispose() {
    controller.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    Widget view;

    return Column(
      children: [
        SizedBox(
          width: widget.width,
          height: widget.height,
          child: FutureBuilder<void>(
            future: initializeControllerFuture,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.done) {
                view = CameraPreview(controller);
              } else {
                view = const Center(child: FutureBuilderLoader());
              }

              return view;
            },
          ),
        ),
        Row(
          mainAxisAlignment: kIsWeb ? MainAxisAlignment.center : MainAxisAlignment.spaceEvenly,
          children: [
            MaterialIconButton(text: 'Take Picture', icon: Icons.camera).getButton(
                onPressed: () => takePicture(
                      state: widget,
                      controller: controller,
                      initializeControllerFuture: initializeControllerFuture,
                      remotePath: widget.remotePath,
                      callback: widget.cancelCallback,
                      context: context,
                      person: widget.person,
                    )),
            MaterialIconButton(text: 'Cancel', icon: Icons.cancel).getButton(onPressed: widget.cancelCallback),
          ],
        ),
      ],
    );
  }
}

takePicture({
  required ImageCapture state,
  required CameraController controller,
  required Future<void> initializeControllerFuture,
  required String remotePath,
  required Function callback,
  required BuildContext context,
  required Person person,
}) async {
  XFile? image;

  try {
    await initializeControllerFuture;

    await controller.takePicture().then((value) => image = value);

    Uint8List bytes = await image!.readAsBytes();
    img.Image? src = img.decodeImage(bytes);

    await FirebaseStorageHelper.uploadImage(destImage: src!, image: image, remotePath: remotePath).then(
      (ut) => CropHelp.cropImage(
        // ignore: use_build_context_synchronously
        context: context,
        person: person,
        cropped: image!,
      )
          .then(
            (
              value,
            ) =>
                callback(),
          )
          .onError((error, stackTrace) => ErrorHandler.logError(exception: error, stack: stackTrace)),
    );
  } catch (e) {
    ErrorHandler.logError(exception: e, stack: StackTrace.current);
  }
}
