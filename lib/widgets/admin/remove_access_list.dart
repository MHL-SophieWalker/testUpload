import 'package:flutter/material.dart';
import 'package:hart_suite/helpers/ui/icon_help.dart';
import 'package:hart_suite/helpers/ui/layout_help.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/selectors/people_select.dart';
import 'package:hart_suite/widgets/profile/profile_card.dart';

class RemoveAccessList extends StatefulWidget {
  final List<Person> peopleToRemove;
  final Person person;
  final double reservedWidth;

  const RemoveAccessList({super.key, required this.person, required this.peopleToRemove, this.reservedWidth = 0.0});

  @override
  State<RemoveAccessList> createState() => _RemoveAccessListState();
}

class _RemoveAccessListState extends State<RemoveAccessList> {
  late Person user;
  late PersonRepo personRepo;
  late Widget widg, headerText, listView, dividerRow;

  @override
  void initState() {
    super.initState();

    user = widget.person;
    personRepo = PersonRepo();
  }

  @override
  Widget build(BuildContext context) {
    dividerRow = Row(
      children: [
        Expanded(
          child: getDivider(text: 'Users to Remove'),
        ),
        TextButton(
          onPressed: () async {
            await Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => PeopleSelect(
                  customer: user.lastAccessed!,
                  multiSelect: true,
                  exclusionIds: [user.documentId!],
                ),
              ),
            ).then((value) {
              if (value != null) {
                setState(() {
                  widget.peopleToRemove.addAll(value);
                });
              }
            });
          },
          child: const Text('Search Users'),
        ),
      ],
    );

    headerText = Padding(
      padding: const EdgeInsets.all(8.0),
      child: Text(
        'Please use the button below to select the users to remove from ${user.lastAccessed}. After completing this list click the \'remove all\' button in the header to remove the users.',
      ),
    );

    listView = Flexible(
      fit: FlexFit.tight,
      child: ListView.builder(
        shrinkWrap: true,
        itemCount: widget.peopleToRemove.length,
        itemBuilder: (context, index) {
          return Card(
            color: Theme.of(context).cardColor,
            child: Padding(
              padding: const EdgeInsets.all(4),
              child: Row(
                children: [
                  Flexible(
                    fit: FlexFit.tight,
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: ProfileCard(
                        person: widget.peopleToRemove[index],
                        showItems: [],
                      ).profileCard,
                    ),
                  ),
                  Align(
                    alignment: Alignment.centerRight,
                    child: IconButton(
                      onPressed: () {
                        setState(() {
                          widget.peopleToRemove.remove(widget.peopleToRemove[index]);
                        });
                      },
                      icon: IconHelp.getIconFromString(
                        name: 'highlight_remove',
                        semanticLabel: 'Delete',
                        color: StyleBase.warningRed,
                        size: 32,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );

    widg = Padding(
      padding: const EdgeInsets.all(8.0),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          headerText,
          dividerRow,
          listView,
        ],
      ),
    );

    return widg;
  }
}
