import 'package:flutter/material.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/ui/icon_help.dart';
import 'package:hart_suite/models/area/area.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/area/area_repo.dart';
import 'package:hart_suite/views/global_admin/admin.dart';
import 'package:hart_suite/views/area/area_detail.dart';
import 'package:hart_suite/views/error/four04.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';

class AreaList extends StatefulWidget {
  final Person person;
  final bool forceRefresh;

  const AreaList({super.key, required this.person, required this.forceRefresh});

  @override
  State<AreaList> createState() => _AreaListState();
}

class _AreaListState extends State<AreaList> {
  Future<List<Area>?>? places;
  late Person user;

  @override
  void initState() {
    AreaRepo repo;

    super.initState();

    user = widget.person;
    repo = AreaRepo(personSnapshot: user.getPersonSnapshot(), customer: user.lastAccessed!);
    places = repo.get();
  }

  @override
  Widget build(BuildContext context) {
    List<Area> areas = List.empty(growable: true);

    if (widget.forceRefresh) {
      places = AreaRepo(personSnapshot: user.getPersonSnapshot(), customer: user.lastAccessed!).get();
    }

    return FutureBuilder(
      future: places,
      builder: ((context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasData) {
            areas = snapshot.data as List<Area>;

            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                return ClickableCardItem(
                  title: areas[index].name,
                  leading: IconHelp.getIconFromString(name: 'apartment', semanticLabel: 'Area'),
                  onTap: () => Navigator.pushNamed(context, AreaDetailPage.route, arguments: areas[index]),
                  trailing: IconHelp.getIconFromString(name: 'chevron_right', semanticLabel: 'Details'),
                );
              },
            );
          } else if (snapshot.hasError) {
            ErrorHandler.logError(exception: snapshot.error, stack: snapshot.stackTrace);
            return Four04Page(args: Four04Args(page: 'Admin', route: AdminPage.route, collection: AdminPage.colTeams));
          } else {
            return const FutureBuilderLoader();
          }
        } else {
          return const FutureBuilderLoader();
        }
      }),
    );
  }
}
