import 'package:flutter/material.dart';
import 'package:hart_suite/helpers/ui/icon_help.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/profile/team.dart';
import 'package:hart_suite/repos/profile/team_repo.dart';
import 'package:hart_suite/views/global_admin/admin.dart';
import 'package:hart_suite/views/error/four04.dart';
import 'package:hart_suite/views/team/team_detail.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';

class TeamList extends StatefulWidget {
  final Person person;
  final bool forceRefresh;

  const TeamList({super.key, required this.person, required this.forceRefresh});

  @override
  State<TeamList> createState() => _TeamListState();
}

class _TeamListState extends State<TeamList> {
  late TeamRepo teamRepo;
  late Future<List<Team>?>? squads;

  @override
  void initState() {
    super.initState();

    teamRepo = TeamRepo(personSnapshot: widget.person.getPersonSnapshot(), customer: widget.person.lastAccessed!);
    squads = teamRepo.get();
  }

  @override
  Widget build(BuildContext context) {
    List<Team> teams = List.empty(growable: true);

    if (widget.forceRefresh) {
      squads = teamRepo.get();
    }

    return FutureBuilder(
      future: squads,
      builder: ((context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasData) {
            teams = snapshot.data as List<Team>;

            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                return ClickableCardItem(
                  title: teams[index].name,
                  leading: IconHelp.getIconFromString(name: 'groups', semanticLabel: 'Team', size: 26),
                  onTap: () => Navigator.pushNamed(context, TeamDetailPage.route, arguments: teams[index]),
                  trailing: IconHelp.getIconFromString(name: 'chevron_right', semanticLabel: 'Details', size: 26),
                );
              },
            );
          } else if (snapshot.hasError) {
            return Four04Page(args: Four04Args(page: 'Admin', route: AdminPage.route, collection: AdminPage.colTeams));
          } else {
            return const FutureBuilderLoader();
          }
        } else {
          return const FutureBuilderLoader();
        }
      }),
    );
  }
}
