import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:hart_suite/helpers/ui/icon_help.dart';
import 'package:hart_suite/models/global/pending_invitation.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/global/pending_invitation_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/global_admin/admin.dart';
import 'package:hart_suite/views/error/four04.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/form/text_view.dart';

class PendingInvitesList extends StatefulWidget {
  final Person person;

  const PendingInvitesList({super.key, required this.person});

  @override
  State<PendingInvitesList> createState() => _PendingInvitesListState();
}

class _PendingInvitesListState extends State<PendingInvitesList> {
  final List<String> errors = List.empty(growable: true);
  List<PendingInvitation> pendingInvites = List.empty(growable: true);
  Future<List<PendingInvitation>?>? invites;
  late Person user;
  late PendingInvitationRepo piRepo;
  late TextView emailTextView;
  late String inviteeEmail;
  late InputDecoration inputDecoration;

  @override
  void initState() {
    Filter filter;

    super.initState();

    user = widget.person;
    piRepo = PendingInvitationRepo();

    filter = Filter.and(
      Filter('accepted', isNull: true),
      Filter('customer', isEqualTo: user.lastAccessed),
    );

    invites = piRepo.getDocumentByFilter(filter: filter, limit: 500);

    inviteeEmail = '';
  }

  @override
  Widget build(BuildContext context) {
    if (errors.contains('Email')) {
      inputDecoration = StyleBase.getInputDecoration(hint: 'Enter An Email', errorText: 'Invalid Email');
    } else {
      inputDecoration = StyleBase.getInputDecoration(hint: 'Enter An Email', helperText: ' ');
    }

    emailTextView = TextView(
      label: 'Email',
      decoration: inputDecoration,
      text: inviteeEmail,
      inputType: TextInputType.emailAddress,
    );

    return FutureBuilder(
      future: invites,
      builder: ((context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasData) {
            pendingInvites = snapshot.data as List<PendingInvitation>;

            pendingInvites.sort((a, b) => a.email.compareTo(b.email));

            return Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  Padding(
                    padding: const EdgeInsets.all(8),
                    child: Text('Please enter an email to invite a user. When they next log in they will gain access to ${user.lastAccessed!}'),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Expanded(child: emailTextView.child),
                        IconButton(
                          onPressed: () => sendInvitation(),
                          icon: const Icon(
                            Icons.email,
                            size: 36,
                            color: StyleBase.blue,
                          ),
                        )
                      ],
                    ),
                  ),
                  Flexible(
                    fit: FlexFit.tight,
                    child: ListView.builder(
                      shrinkWrap: true,
                      itemCount: snapshot.data!.length,
                      itemBuilder: (context, index) {
                        return ClickableCardItem(
                          title: pendingInvites[index].email,
                          leading: IconHelp.getIconFromString(name: 'person_add_alt_1', semanticLabel: pendingInvites[index].email),
                          onTap: null,
                          trailing: IconButton(
                            onPressed: () {
                              PendingInvitationRepo repo;

                              repo = PendingInvitationRepo();

                              pendingInvites[index].accepted = false;

                              repo.update(id: pendingInvites[index].documentId!, data: pendingInvites[index]).then((value) {
                                setState(() {
                                  pendingInvites.remove(pendingInvites[index]);
                                });
                              });
                            },
                            icon: IconHelp.getIconFromString(
                              name: 'highlight_remove',
                              semanticLabel: 'Delete',
                              color: StyleBase.warningRed,
                              size: 26,
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            );
          } else if (snapshot.hasError) {
            return Four04Page(args: Four04Args(page: 'Admin', route: AdminPage.route, collection: AdminPage.colTeams));
          } else {
            return const FutureBuilderLoader();
          }
        } else {
          return const FutureBuilderLoader();
        }
      }),
    );
  }

  sendInvitation() {
    PendingInvitationRepo repo;
    PendingInvitation pendingInvitation;
    String text;

    repo = PendingInvitationRepo();

    errors.clear();

    pendingInvitation = PendingInvitation(email: emailTextView.controller!.text.toLowerCase(), customer: user.lastAccessed!);
    text = emailTextView.controller!.text.toLowerCase();

    if (text.contains('@') && text.contains('.') && text.length > 4 && text.indexOf('@') < text.lastIndexOf('.')) {
      repo.add(data: pendingInvitation).then((value) {
        setState(() {
          pendingInvitation.documentId = value;
          pendingInvites.add(pendingInvitation);
        });
      });
    } else {
      setState(() {
        errors.add('Email');
        inviteeEmail = emailTextView.controller!.text.toLowerCase();
      });
    }
  }
}
