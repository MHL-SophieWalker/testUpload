import 'package:flutter/material.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/widgets/profile/profile_image_disc.dart';

class BadgedProfileImageDiscTypes {
  static const int actionsAssignee = 1;
  static const int actionsVerifier = 2;
}

class BadgedProfileImageDisc extends StatelessWidget {
  const BadgedProfileImageDisc({
    super.key,
    required this.person,
    required this.badgeType,
  });

  final PersonSnapshot person;
  final int badgeType;

  @override
  Widget build(BuildContext context) {
    String label;
    Color backgroundColor;
    Color textColor;

    if (badgeType == BadgedProfileImageDiscTypes.actionsAssignee) {
      label = 'A';
      backgroundColor = Colors.green;
      textColor = Colors.white;
    } else if (badgeType == BadgedProfileImageDiscTypes.actionsVerifier) {
      label = 'V';
      backgroundColor = Colors.blue;
      textColor = Colors.white;
    } else {
      label = '-';
      backgroundColor = Colors.grey;
      textColor = Colors.black;
    }

    return Badge(
      label: Text(label),
      backgroundColor: backgroundColor,
      textColor: textColor,
      child: ProfileImageDisc(
        fullName: person.fullName,
        downloadUrl: person.remoteImageUrl ?? '',
      ),
    );
  }
}
