import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/helpers/class/date_help.dart';
import 'package:hart_suite/helpers/permissions/action_permission_help.dart';
import 'package:hart_suite/models/actions/action.dart' as act;
import 'package:hart_suite/models/area/area.dart';
import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/selectors/area_select.dart';
import 'package:hart_suite/views/selectors/subcategory_select.dart';
import 'package:hart_suite/views/selectors/theme_select.dart';
import 'package:hart_suite/widgets/form/text_view.dart';

class ActionOverview extends StatefulWidget {
  final act.Action action;
  final bool expanded;
  final Person person;
  final ActionPermissionHelp permissionHelp;
  final List<String> errors;
  final Function updateActionState;

  const ActionOverview(
      {super.key,
      required this.action,
      required this.expanded,
      required this.person,
      required this.permissionHelp,
      required this.errors,
      required this.updateActionState});

  @override
  State<ActionOverview> createState() => _ActionOverviewState();
}

class _ActionOverviewState extends State<ActionOverview> {
  late act.Action action;
  late TextEditingController descriptionController;
  late Widget titleField, descriptionField;

  @override
  void initState() {
    super.initState();
    action = widget.action;
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

//these need initialising outside of the build to prevent the controller keep reinstantiating
//as this prevents the controller from being able to update the value of the text field
    descriptionController = TextEditingController(text: action.description);
    titleField = getTitleField();
    descriptionField = getDescriptionField();
  }

  @override
  Widget build(BuildContext context) {
    Widget overview;

    if (!kIsWeb) {
      overview = oneColumnlayout();
    } else {
      switch (getColumnCount()) {
        case 3:
          overview = threeColumnlayout();
          break;
        case 2:
          overview = twoColumnlayout();
          break;
        case 1:
          overview = oneColumnlayout();
          break;
        default:
          overview = threeColumnlayout();
          break;
      }
    }

    return overview;
  }

  Widget threeColumnlayout() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        const Gap(8),
        Row(
          mainAxisSize: MainAxisSize.max,
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(
              width: getColumnWidth(percentage: 0.66) + 8,
              child: titleField,
            ),
            const Gap(8),
            SizedBox(
              width: getColumnWidth(percentage: 0.34),
              child: getDateField(),
            ),
          ],
        ),
        const Gap(12),
        Row(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(
              width: getColumnWidth(percentage: 0.33),
              child: getAreaField(widthFactor: 0.3),
            ),
            const Gap(8),
            SizedBox(
              width: getColumnWidth(percentage: 0.34),
              child: getSubCategoryField(widthFactor: 0.3),
            ),
            const Gap(8),
            SizedBox(
              width: getColumnWidth(percentage: 0.33),
              child: getThemeField(widthFactor: 0.3),
            ),
          ],
        ),
        const Gap(12),
        Row(
          children: [
            Expanded(
              child: SizedBox(
                width: getColumnWidth(percentage: 1),
                child: descriptionField,
              ),
            ),
          ],
        )
      ],
    );
  }

  Widget twoColumnlayout() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        const Gap(8),
        Row(
          mainAxisSize: MainAxisSize.max,
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              child: SizedBox(
                width: getColumnWidth(percentage: 1),
                child: titleField,
              ),
            ),
          ],
        ),
        const Gap(12),
        Row(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              child: SizedBox(
                width: getColumnWidth(percentage: 0.5),
                child: getDateField(),
              ),
            ),
            const Gap(12),
            Expanded(
              child: SizedBox(
                width: getColumnWidth(percentage: 0.5),
                child: getAreaField(widthFactor: 0.45),
              ),
            ),
          ],
        ),
        const Gap(12),
        Row(
          children: [
            Expanded(
              child: SizedBox(
                width: getColumnWidth(percentage: 0.5),
                child: getSubCategoryField(widthFactor: 0.45),
              ),
            ),
            const Gap(12),
            SizedBox(
              width: getColumnWidth(percentage: 0.5),
              child: getThemeField(widthFactor: 0.45),
            ),
          ],
        ),
        const Gap(12),
        Row(
          children: [
            Expanded(
              child: SizedBox(
                width: getColumnWidth(percentage: 1),
                child: descriptionField,
              ),
            ),
          ],
        )
      ],
    );
  }

  Widget oneColumnlayout() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      mainAxisSize: MainAxisSize.min,
      children: [
        const Gap(8),
        Row(
          children: [
            Expanded(
              child: titleField,
            ),
          ],
        ),
        const Gap(12),
        Row(
          children: [
            Expanded(
              child: getDateField(),
            ),
          ],
        ),
        const Gap(12),
        Row(
          children: [
            Expanded(
              child: getAreaField(widthFactor: 0.9),
            ),
          ],
        ),
        const Gap(12),
        Row(
          children: [
            Expanded(
              child: getSubCategoryField(widthFactor: 0.9),
            ),
          ],
        ),
        const Gap(12),
        Row(
          children: [
            Expanded(
              child: getThemeField(widthFactor: 0.9),
            ),
          ],
        ),
        const Gap(12),
        Row(
          children: [
            Expanded(
              child: descriptionField,
            ),
          ],
        )
      ],
    );
  }

  Widget getTitleField() {
    TextView title;

    title = TextView(
      label: 'Title',
      text: action.title,
      decoration: StyleBase.getInputDecoration(
        errorText: widget.errors.contains('title') ? 'Title is required' : null,
      ),
      enabled: widget.permissionHelp.canEditField(ActionPermissionHelp.title, actionStatus: action.status) || action.documentId == null,
      maxLength: 100,
      required: true,
    );

    title.dataBind(callback: () => setState(() => action.title = title.controller!.text));

    return title.child;
  }

  Widget getAreaField({required double widthFactor}) {
    Widget areaSelect;
    Widget areaField, toShow;
    TextEditingController areaController;

    areaController = TextEditingController(text: action.area?.name);

    areaSelect = GestureDetector(
      behavior: HitTestBehavior.opaque,
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => AreaSelect(
              personSnapshot: widget.person.getPersonSnapshot(),
              customer: widget.person.lastAccessed!,
              multiSelect: false,
              preselectedAreaIds: action.area?.documentId == null ? [] : [action.area!.documentId!],
            ),
          ),
        ).then((value) {
          if (value != null) {
            action.setArea(areaSnap: (value[0] as Area).toSnapshot());
            areaController.text = action.area!.path;

            widget.updateActionState(action);
          }
        });
      },
      child: MouseRegion(
        cursor: SystemMouseCursors.click,
        child: IgnorePointer(
          child: TextView(
            label: 'Area',
            decoration: StyleBase.getInputDecoration(),
            text: action.area?.path ?? '',
            isLauncher: true,
          ).child,
        ),
      ),
    );

    areaField = TextView(
      label: 'Area',
      decoration: StyleBase.getInputDecoration(),
      text: action.area?.path ?? '',
      readOnly: true,
      enabled: false,
      controller: areaController,
    ).child;

    toShow = (widget.permissionHelp.canEditField(ActionPermissionHelp.area, actionStatus: action.status) || action.documentId == null) ? areaSelect : areaField;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        toShow,
      ],
    );
  }

  Widget getSubCategoryField({required double widthFactor}) {
    Widget subCategoryField, toShow, subCategorySelect;
    TextEditingController subCategoryController;

    subCategoryController = TextEditingController(text: action.subCategory?.name);

    subCategorySelect = GestureDetector(
      behavior: HitTestBehavior.opaque,
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => SubCategorySelect(
              personSnapshot: widget.person.getPersonSnapshot(),
              customer: widget.person.lastAccessed!,
              multiSelect: false,
              preselectedCategoryIds: action.subCategory?.categoryId == null ? [] : [action.subCategory!.categoryId!],
              preselectedSubCategoryIds: action.subCategory?.documentId == null ? [] : [action.subCategory!.documentId!],
            ),
          ),
        ).then((value) {
          if (value != null) {
            action.subCategory = value[0];
            subCategoryController.text = action.subCategory!.path;

            widget.updateActionState(action);
          }
        });
      },
      child: MouseRegion(
        cursor: SystemMouseCursors.click,
        child: IgnorePointer(
          child: TextView(
            label: 'Categorisation',
            decoration: StyleBase.getInputDecoration(),
            text: action.subCategory?.path ?? '',
            controller: subCategoryController,
            isLauncher: true,
          ).child,
        ),
      ),
    );

    subCategoryField = TextView(
      label: 'Categorisation',
      decoration: StyleBase.getInputDecoration(),
      text: action.subCategory?.path ?? '',
      readOnly: true,
      enabled: false,
    ).child;

    toShow = widget.permissionHelp.canEditField(ActionPermissionHelp.category, actionStatus: action.status) || action.documentId == null
        ? subCategorySelect
        : subCategoryField;

    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        toShow,
      ],
    );
  }

  Widget getThemeField({required double widthFactor}) {
    Widget themeField, toShow, themeSelect;
    TextEditingController themeController;

    themeController = TextEditingController(
        text: action.themes
                ?.map(
                  (e) => e.name,
                )
                .join(', ') ??
            '');

    themeSelect = GestureDetector(
      behavior: HitTestBehavior.opaque,
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => ThemeSelect(
                personSnapshot: widget.person.getPersonSnapshot(),
                customer: widget.person.lastAccessed!,
                multiSelect: false,
                preselectedThemeIds: action.themes == null ? [] : action.themes!.map((ele) => ele.documentId).nonNulls.toList()),
          ),
        ).then((value) {
          if (value != null) {
            action.themes = [];
            for (Discipline theme in value) {
              action.addTheme(theme: theme);
            }
            themeController.text = action.themes
                    ?.map(
                      (e) => e.name,
                    )
                    .join(', ') ??
                '';

            widget.updateActionState(action);
          }
        });
      },
      child: MouseRegion(
        cursor: SystemMouseCursors.click,
        child: IgnorePointer(
          child: TextView(
            label: 'Themes',
            decoration: StyleBase.getInputDecoration(),
            text: action.themes
                    ?.map(
                      (e) => e.name,
                    )
                    .join(', ') ??
                '',
            controller: themeController,
            isLauncher: true,
          ).child,
        ),
      ),
    );

    themeField = TextView(
      label: 'Themes',
      decoration: StyleBase.getInputDecoration(),
      text: action.themes
              ?.map(
                (e) => e.name,
              )
              .join(', ') ??
          '',
      readOnly: true,
      enabled: false,
    ).child;

    toShow =
        widget.permissionHelp.canEditField(ActionPermissionHelp.theme, actionStatus: action.status) || action.documentId == null ? themeSelect : themeField;

    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        toShow,
      ],
    );
  }

  Widget getDescriptionField() {
    TextView description;

    description = TextView(
      label: 'Description',
      text: action.description,
      decoration: StyleBase.getInputDecoration(
        errorText: widget.errors.contains('description') ? 'Description is required' : null,
      ),
      enabled: widget.permissionHelp.canEditField(ActionPermissionHelp.description, actionStatus: action.status) || action.documentId == null,
      maxLines: 10,
      minLines: 10,
      required: true,
    );

    description.dataBind(callback: () => setState(() => action.description = description.controller!.text));

    return description.child;
  }

  Widget getDateField() {
    return TextField(
      decoration: StyleBase.getInputDecoration().copyWith(
        label: const Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('Due Date'),
            Text(
              '*',
              style: TextStyle(color: Colors.red),
            ),
          ],
        ),
      ),
      enabled: widget.permissionHelp.canEditField(ActionPermissionHelp.dueDate, actionStatus: action.status) || action.documentId == null,
      controller: TextEditingController(text: action.due == null ? '' : DateHelp.formatDateOnly(action.due!)),
      onTap:
          widget.permissionHelp.canEditField(ActionPermissionHelp.dueDate, actionStatus: action.status) || action.documentId == null ? launchDatePicker : null,
    );
  }

  launchDatePicker() {
    showDatePicker(
      context: context,
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
      initialDate: action.due ?? DateTime.now().add(const Duration(days: 30)),
    ).then((value) {
      if (value != null) {
        action.due = value;
        widget.updateActionState(action);
      }
    });
  }

  double getColumnWidth({required double percentage}) {
    double width, columnWidth, offset;

    offset = widget.expanded ? 200 : 50;
    offset += 40;

    width = MediaQuery.of(context).size.width - offset;

    if (percentage > 1) {
      percentage = 1;
    }

    columnWidth = width * percentage;

    return columnWidth;
  }

  int getColumnCount() {
    double width;
    int columnCount;

    width = MediaQuery.of(context).size.width;

    if (width < 600) {
      columnCount = 1;
    } else if (width < 950) {
      columnCount = 2;
    } else {
      columnCount = 3;
    }

    return columnCount;
  }
}
