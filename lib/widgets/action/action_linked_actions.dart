import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/enums_help.dart';
import 'package:hart_suite/models/actions/action.dart' as act;
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/repos/actions/action_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/action/action_detail.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/form/inline_confirmation_buttons.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/status/status_icon.dart';

class ActionLinkedAction extends StatefulWidget {
  final act.Action action;
  final PersonSnapshot personSnapshot;

  const ActionLinkedAction({
    super.key,
    required this.action,
    required this.personSnapshot,
  });

  @override
  State<ActionLinkedAction> createState() => _ActionLinkedActionState();
}

class _ActionLinkedActionState extends State<ActionLinkedAction> {
  late act.Action action;
  late List<act.Action> linkedActions;
  late Future<List<act.Action?>> future;
  late String deleteActionId;
  late bool showConfirmDelete;

  @override
  void initState() {
    Filter filt;
    super.initState();
    action = widget.action;
    linkedActions = List.empty(growable: true);
    showConfirmDelete = false;
    deleteActionId = '';

    if (action.linkedActionIds.isEmpty) {
      future = Future.value(linkedActions);
    } else {
      filt = Filter('documentId', whereIn: action.linkedActionIds);
      future = ActionRepo(personSnapshot: widget.personSnapshot, customer: action.customer).getByFilter(filter: filt);
    }
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: future,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return FutureBuilderLoader();
        } else if (snapshot.hasError) {
          ErrorHandler.logError(exception: snapshot.error, stack: snapshot.stackTrace);
          return Text('Unable to get linked actions');
        } else {
          linkedActions = snapshot.data as List<act.Action>;
          return getContent();
        }
      },
    );
  }

  Widget getContent() {
    Widget widg;
    List<Widget> children;
    double pad;

    pad = kIsWeb ? 4 : 0;

    children = [];

    if (linkedActions.isEmpty) {
      children.add(Text('No actions are linked to this action'));
    } else {
      for (act.Action a in linkedActions) {
        String status;

        a.due != null && a.due!.isBefore(DateTime.now()) && a.status != EnumsHelp.statusDone && a.status != EnumsHelp.statusNew
            ? status = EnumsHelp.statusPastDue
            : status = a.status;

        children.add(ClickableCardItem(
            title: '#${a.refNum.toString()} - ${a.title}',
            leading: StatusIcon(status: status),
            onTap: () {
              //clickthrough to the linked action
              Navigator.pushNamed(context, ActionDetailPage.route, arguments: a);
            },
            trailing: showConfirmDelete
                ? Padding(
                    padding: EdgeInsets.fromLTRB(0, pad, 0, pad),
                    child: InlineConfirmationButtons(confirmCallback: () {
                      setState(() {
                        action.linkedActionIds.remove(deleteActionId);
                        linkedActions.removeWhere((element) => element.documentId == deleteActionId);
                        showConfirmDelete = false;
                      });
                    }, denyCallback: () {
                      setState(() {
                        showConfirmDelete = false;
                      });
                    }),
                  )
                : IconButton(
                    icon: Icon(Icons.delete),
                    color: StyleBase.warningRed,
                    onPressed: () {
                      //handle delete confirmations
                      setState(() {
                        showConfirmDelete = true;
                        deleteActionId = a.documentId!;
                      });
                    },
                  )));
      }
    }

    widg = Column(children: children);

    return widg;
  }
}
