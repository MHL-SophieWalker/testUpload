import 'package:flutter/material.dart';
import 'package:hart_suite/enums/comment_type.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/date_help.dart';
import 'package:hart_suite/helpers/class/enums_help.dart';
import 'package:hart_suite/helpers/permissions/action_permission_help.dart';
import 'package:hart_suite/helpers/ui/layout_help.dart';
import 'package:hart_suite/models/actions/assignee.dart';
import 'package:hart_suite/models/comment/comment.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/actions/action.dart' as act;
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/action/action_home.dart';
import 'package:hart_suite/views/error/four04.dart';
import 'package:hart_suite/widgets/cards/comment_log_card.dart';
import 'package:hart_suite/widgets/form/inline_confirmation_buttons.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/profile/profile_card_with_actions.dart';

class ActionAssignee extends StatefulWidget {
  final act.Action action;
  final bool expanded;
  final Person person;
  final ActionPermissionHelp permissionHelp;
  final Function updateActionState;
  final String? errorText;

  const ActionAssignee({
    super.key,
    required this.action,
    required this.expanded,
    required this.person,
    required this.permissionHelp,
    required this.updateActionState,
    this.errorText,
  });

  @override
  State<ActionAssignee> createState() => _ActionAssigneeState();
}

class _ActionAssigneeState extends State<ActionAssignee> {
  late act.Action action;
  late bool autoCompleteActive;
  late Person person;
  late bool showConfirmDelete;
  late List<Person> assignees;
  String? deleteUserId;
  late Future<List<Person>> peopleFuture;

  @override
  void initState() {
    super.initState();
    action = widget.action;
    autoCompleteActive = false;
    person = widget.person;
    showConfirmDelete = false;
    assignees = List.empty(growable: true);

    resetFuture();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
        future: peopleFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            if (snapshot.hasData) {
              for (var ass in snapshot.data as List<Person>) {
                if (!assignees.any((val) => val.documentId == ass.documentId)) {
                  assignees.add(ass);
                }
              }

              return buildWidget();
            } else if (snapshot.hasError) {
              ErrorHandler.logError(exception: snapshot.error);
              return Four04Page(args: Four04Args(page: 'Actions Home', route: ActionsHome.route));
            } else {
              return const FutureBuilderLoader();
            }
          } else {
            return const FutureBuilderLoader();
          }
        });
  }

  Widget buildWidget() {
    return SingleChildScrollView(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          getAssignees(),
        ],
      ),
    );
  }

  Widget getAssignees() {
    Widget widg, comments;
    List<Comment> assigneeComments;
    List<Widget> asses, assigneeCommentCards, children;

    asses = List.empty(growable: true);
    assigneeCommentCards = List.empty(growable: true);
    children = List.empty(growable: true);

    for (var a in assignees) {
      asses.add(
        ProfileCardWithActions(
          user: a,
          buttons: getButtons(user: a),
        ),
      );
    }

    if (action.comments != null) {
      assigneeComments = action.comments!.where((element) => element.type == CommentType.assignee).toList();
    } else {
      assigneeComments = List.empty(growable: true);
    }

    for (var c in assigneeComments) {
      assigneeCommentCards.add(
        CommentLogCard(
          comment: c,
        ),
      );
    }

    comments = Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Row(
          children: [
            Expanded(child: getDivider(text: 'Comments')),
          ],
        ),
        ...assigneeCommentCards,
      ],
    );

    if (assignees.isNotEmpty) {
      children.addAll(asses);
    } else {
      children.add(
        const Padding(
          padding: EdgeInsets.all(8.0),
          child: Text('No assignees yet'),
        ),
      );
    }

    if (assigneeComments.isNotEmpty) {
      children.add(comments);
    }

    widg = Column(
      mainAxisSize: MainAxisSize.min,
      children: children,
    );

    return widg;
  }

  List<Widget> getButtons({required Person user}) {
    List<Widget> buttons = List.empty(growable: true);
    Widget delete;

    if (!showConfirmDelete) {
      if (action.assignees![user.documentId!]?.done != null) {
        buttons.add(
          Text(
            'Completed ${DateHelp.formatDateTimeNoSeconds(action.assignees![user.documentId!]!.done!)}',
            style: const TextStyle(fontSize: 12),
            overflow: TextOverflow.ellipsis,
          ),
        );
      }
      //we can only sign as assignee if we are the assignee, added the user == person check to only show button for your assignee
      if ((widget.permissionHelp.canEditField(ActionPermissionHelp.signAsAssignee, actionStatus: action.status) || action.documentId == null) &&
          user.documentId == person.documentId &&
          action.assignees![user.documentId!]?.done == null &&
          action.documentId != null &&
          action.status != EnumsHelp.statusDone) {
        buttons.add(IconButton(
          icon: const Icon(Icons.check),
          color: StyleBase.successGreen,
          onPressed: () => setState(() {
            action.assignees![user.documentId!]?.done = DateTime.now();
          }),
        ));
      } else if ((widget.permissionHelp.canEditField(ActionPermissionHelp.signAsVerifier, actionStatus: action.status) ||
              widget.permissionHelp.canEditField(ActionPermissionHelp.signAsAssignee, actionStatus: action.status) ||
              action.documentId == null) &&
          action.assignees![user.documentId!]?.done != null &&
          action.status != EnumsHelp.statusDone) {
        buttons.add(IconButton(
          icon: const Icon(Icons.remove_done_rounded),
          color: StyleBase.blue,
          onPressed: () => setState(() {
            action.assignees![user.documentId!]?.done = null;
          }),
        ));
      }
    }

    if (showConfirmDelete && user.documentId == deleteUserId) {
      delete = InlineConfirmationButtons(
        confirmCallback: () => removeAssignee(user),
        denyCallback: () => setState(() {
          showConfirmDelete = false;
          deleteUserId = null;
        }),
      );
    } else {
      delete = IconButton(
        icon: const Icon(Icons.delete),
        color: StyleBase.warningRed,
        onPressed: () {
          setState(() {
            showConfirmDelete = true;
            deleteUserId = user.documentId;
          });
        },
      );
    }

    if (widget.permissionHelp.canEditField(ActionPermissionHelp.changeAssignees, actionStatus: action.status) ||
        action.documentId == null && action.status != EnumsHelp.statusDone) {
      buttons.add(
        delete,
      );
    }

    return buttons;
  }

  void removeAssignee(Person user) {
    setState(() {
      action.removeAssignee(assigneeId: user.documentId!); //remove from the action (Assignee objects)
      assignees.removeWhere((element) => element.documentId == user.documentId); //remove from the list of Person objects
      deleteUserId = null;
      widget.updateActionState(action);
    });

    resetFuture();
  }

  void addAssignee(usr) {
    Assignee assignee = Assignee(
      documentId: usr.documentId,
      done: null,
      person: usr.getPersonSnapshot(),
      created: Auditable(person: usr.getPersonSnapshot(), dateStamp: DateTime.now()),
    );

    return setState(() {
      action.addAssignee(assignee: assignee);
      assignees.add(usr);
      widget.updateActionState(action);
    });
  }

  resetFuture() {
    peopleFuture = PersonRepo().getByList(ids: action.assignees!.keys.toList(), populate: true);
  }
}
