import 'package:flutter/material.dart';
import 'package:hart_suite/enums/action_log_type.dart';
import 'package:hart_suite/enums/comment_type.dart';
import 'package:hart_suite/extensions/string_extension.dart';
import 'package:hart_suite/helpers/class/date_help.dart';
import 'package:hart_suite/helpers/ui/layout_help.dart';
import 'package:hart_suite/models/actions/action.dart' as act;
import 'package:hart_suite/models/comment/comment.dart';
import 'package:hart_suite/models/filterable/icon_text.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/views/filtering/action_log_filterable_list.dart';
import 'package:hart_suite/views/filtering/selected_filters.dart';
import 'package:hart_suite/widgets/cards/comment_log_card.dart';
import 'package:hart_suite/widgets/cards/log_card.dart';

class ActionLog extends StatefulWidget {
  const ActionLog({super.key, required this.action, required this.expanded});

  final act.Action action;
  final bool expanded;

  @override
  State<ActionLog> createState() => _ActionLogState();
}

class _ActionLogState extends State<ActionLog> {
  late act.Action action;
  late List<Object> today, yesterday, thisWeek, lastWeek, older, filteredList;
  DateTime? filterFrom, filterTo;
  CommentType? filterCommentType;
  ActionLogType? logType;

  @override
  void initState() {
    super.initState();
    action = widget.action;

    filteredList = List.empty(growable: true);

    action.log ??= List.empty(growable: true);
    action.comments ??= List.empty(growable: true);

    filterLogs();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        SelectedFilters(
            filters: generateFilterIcons(),
            onTap: () => Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) {
                      return ActionLogFilterableList(
                        from: filterFrom,
                        to: filterTo,
                        commentType: filterCommentType,
                        logType: logType,
                      );
                    },
                  ),
                ).then((value) {
                  if (value != null) {
                    setState(() {
                      filterFrom = value['from'];
                      filterTo = value['to'];
                      filterCommentType = value['commentType'];
                      logType = value['logType'];
                    });

                    filterLogs();
                  }
                }),
            sidebarWidth: widget.expanded ? 200 : 50),
        ...getLogs(),
      ],
    );
  }

  filterLogs() {
    filteredList.clear();

    if (logType != null) {
      if (logType == ActionLogType.comment) {
        filteredList.addAll(action.comments!);
      } else if (logType == ActionLogType.log) {
        filteredList.addAll(action.log!);
      }
    } else {
      filteredList.addAll(action.log!);
      filteredList.addAll(action.comments!);
    }

    if (filterCommentType != null) {
      filteredList.removeWhere((ele) => ele is Comment && ele.type != filterCommentType);
      filteredList.removeWhere((ele) => ele is Auditable);
    }

    if (filterFrom != null) {
      filteredList.removeWhere((ele) => ele is Auditable && ele.dateStamp!.isBefore(filterFrom!));
      filteredList.removeWhere((ele) => ele is Comment && ele.created!.dateStamp!.isBefore(filterFrom!));
    }

    if (filterTo != null) {
      filteredList.removeWhere((ele) => ele is Auditable && ele.dateStamp!.isAfter(filterTo!));
      filteredList.removeWhere((ele) => ele is Comment && ele.created!.dateStamp!.isAfter(filterTo!));
    }

    categorizeLog();
  }

  List<Object> sortLog(List<Object> log) {
    log.sort((a, b) {
      if (a is Auditable && b is Auditable) {
        return b.dateStamp!.compareTo(a.dateStamp!);
      } else if (a is Auditable && b is Comment) {
        return b.created!.dateStamp!.compareTo(a.dateStamp!);
      } else if (a is Comment && b is Auditable) {
        return b.dateStamp!.compareTo(a.created!.dateStamp!);
      } else if (a is Comment && b is Comment) {
        return b.created!.dateStamp!.compareTo(a.created!.dateStamp!);
      }
      return 0;
    });

    return log;
  }

  void categorizeLog() {
    DateTime now = DateTime.now();
    today = [];
    yesterday = [];
    thisWeek = [];
    lastWeek = [];
    older = [];
    for (var item in filteredList) {
      if (item is Auditable) {
        if (item.dateStamp!.isAfter(DateTime(now.year, now.month, now.day))) {
          today.add(item);
        } else if (item.dateStamp!.isAfter(DateTime(now.year, now.month, now.day).subtract(const Duration(days: 1)))) {
          yesterday.add(item);
        } else if (item.dateStamp!.isAfter(DateTime(now.year, now.month, now.day).subtract(const Duration(days: 6)))) {
          thisWeek.add(item);
        } else if (item.dateStamp!.isAfter(DateTime(now.year, now.month, now.day).subtract(const Duration(days: 13)))) {
          lastWeek.add(item);
        } else {
          older.add(item);
        }
      } else if (item is Comment) {
        if (item.created!.dateStamp!.isAfter(DateTime(now.year, now.month, now.day))) {
          today.add(item);
        } else if (item.created!.dateStamp!.isAfter(DateTime(now.year, now.month, now.day).subtract(const Duration(days: 1)))) {
          yesterday.add(item);
        } else if (item.created!.dateStamp!.isAfter(DateTime(now.year, now.month, now.day).subtract(const Duration(days: 6)))) {
          thisWeek.add(item);
        } else if (item.created!.dateStamp!.isAfter(DateTime(now.year, now.month, now.day).subtract(const Duration(days: 13)))) {
          lastWeek.add(item);
        } else {
          older.add(item);
        }
      }
    }

    today = sortLog(today);
    yesterday = sortLog(yesterday);
    thisWeek = sortLog(thisWeek);
    lastWeek = sortLog(lastWeek);
    older = sortLog(older);
  }

  List<Widget> getLogs() {
    List<Widget> widgets;

    widgets = List.empty(growable: true);

    if (today.isNotEmpty) {
      widgets.add(getDivider(text: 'Today'));
      for (var l in today) {
        if (l is Auditable) {
          widgets.add(LogCard(log: l));
        } else if (l is Comment) {
          widgets.add(CommentLogCard(comment: l));
        }
      }
    }

    if (yesterday.isNotEmpty) {
      widgets.add(getDivider(text: 'Yesterday'));
      for (var l in yesterday) {
        if (l is Auditable) {
          widgets.add(LogCard(log: l));
        } else if (l is Comment) {
          widgets.add(CommentLogCard(comment: l));
        }
      }
    }

    if (thisWeek.isNotEmpty) {
      widgets.add(getDivider(text: 'This Week'));
      for (var l in thisWeek) {
        if (l is Auditable) {
          widgets.add(LogCard(log: l));
        } else if (l is Comment) {
          widgets.add(CommentLogCard(comment: l));
        }
      }
    }

    if (lastWeek.isNotEmpty) {
      widgets.add(getDivider(text: 'Last Week'));
      for (var l in lastWeek) {
        if (l is Auditable) {
          widgets.add(LogCard(log: l));
        } else if (l is Comment) {
          widgets.add(CommentLogCard(comment: l));
        }
      }
    }

    if (older.isNotEmpty) {
      widgets.add(getDivider(text: 'Older'));
      for (var l in older) {
        if (l is Auditable) {
          widgets.add(LogCard(log: l));
        } else if (l is Comment) {
          widgets.add(CommentLogCard(comment: l));
        }
      }
    }

    return widgets;
  }

  List<IconText> generateFilterIcons() {
    List<IconText> filters = List.empty(growable: true);
    String dateText, notSet, all;

    notSet = 'Not Set';
    dateText = notSet;
    all = 'All';

    if (filterFrom != null && filterTo != null) {
      dateText = '${DateHelp.formatDateOnly(filterFrom!)} - ${DateHelp.formatDateOnly(filterTo!)}';
    } else if (filterFrom != null) {
      dateText = 'After ${DateHelp.formatDateOnly(filterFrom!)}';
    } else if (filterTo != null) {
      dateText = 'Before ${DateHelp.formatDateOnly(filterTo!)}';
    }

    filters.add(IconText(
      icon: Icons.change_history,
      text: logType?.name.toTitleCase() ?? all,
      tooltip: 'Log Type',
      isOn: logType != null,
    ));

    filters.add(IconText(
      icon: Icons.comment_bank_outlined,
      text: filterCommentType?.name.toTitleCase() ?? all,
      tooltip: 'Commenter Role',
      isOn: filterCommentType != null,
    ));

    filters.add(IconText(
      icon: Icons.calendar_today,
      text: dateText,
      tooltip: 'Due Date',
      isOn: dateText != notSet,
    ));

    return filters;
  }
}
