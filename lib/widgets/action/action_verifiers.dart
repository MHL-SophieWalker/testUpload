import 'package:flutter/material.dart';
import 'package:hart_suite/enums/comment_type.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/date_help.dart';
import 'package:hart_suite/helpers/class/enums_help.dart';
import 'package:hart_suite/helpers/permissions/action_permission_help.dart';
import 'package:hart_suite/helpers/ui/layout_help.dart';
import 'package:hart_suite/models/actions/verifier.dart';
import 'package:hart_suite/models/comment/comment.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/actions/action.dart' as act;
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/action/action_home.dart';
import 'package:hart_suite/views/error/four04.dart';
import 'package:hart_suite/widgets/cards/comment_log_card.dart';
import 'package:hart_suite/widgets/form/inline_confirmation_buttons.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/profile/profile_card_with_actions.dart';

class ActionVerifiers extends StatefulWidget {
  final act.Action action;
  final bool expanded;
  final Person person;
  final ActionPermissionHelp permissionHelp;
  final Function updateActionState;
  final String? errorText;

  const ActionVerifiers(
      {super.key,
      required this.action,
      required this.expanded,
      required this.person,
      required this.permissionHelp,
      required this.updateActionState,
      this.errorText});

  @override
  State<ActionVerifiers> createState() => _ActionVerifiersState();
}

class _ActionVerifiersState extends State<ActionVerifiers> {
  late act.Action action;
  late bool autoCompleteActive;
  late Person person;
  late bool showConfirmDelete;
  late List<Person> verifiers;
  late Future<List<Person>> verifiersFuture;
  String? deleteUserId;

  @override
  void initState() {
    super.initState();
    action = widget.action;
    autoCompleteActive = false;
    person = widget.person;
    showConfirmDelete = false;
    verifiers = List.empty(growable: true);

    resetVerifierFuture();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
        future: verifiersFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            if (snapshot.hasData) {
              for (var ver in snapshot.data as List<Person>) {
                if (!verifiers.any((val) => val.documentId == ver.documentId)) {
                  verifiers.add(ver);
                }
              }

              return buildWidget();
            } else if (snapshot.hasError) {
              ErrorHandler.logError(exception: snapshot.error);
              return Four04Page(args: Four04Args(page: 'Actions Home', route: ActionsHome.route));
            } else {
              return const FutureBuilderLoader();
            }
          } else {
            return const FutureBuilderLoader();
          }
        });
  }

  Widget buildWidget() {
    return SingleChildScrollView(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          getVerifiers(),
        ],
      ),
    );
  }

  Widget getVerifiers() {
    Widget widg, comments;
    List<Widget> vers, commentCards, children;
    List<Comment> verifiersComments;

    if (action.comments != null) {
      verifiersComments = action.comments!.where((element) => element.type == CommentType.verifier).toList();
    } else {
      verifiersComments = List.empty(growable: true);
    }

    vers = List.empty(growable: true);
    commentCards = List.empty(growable: true);
    children = List.empty(growable: true);

    for (var a in verifiers) {
      vers.add(
        ProfileCardWithActions(
          user: a,
          buttons: getButtons(user: a),
        ),
      );
    }

    for (var c in verifiersComments) {
      commentCards.add(
        CommentLogCard(
          comment: c,
        ),
      );
    }

    if (verifiers.isNotEmpty) {
      children.addAll(vers);
    } else {
      children.add(
        const Padding(
          padding: EdgeInsets.all(8.0),
          child: Text('No verifiers yet'),
        ),
      );
    }

    comments = Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        getDivider(text: 'Comments'),
        ...commentCards,
      ],
    );

    if (verifiersComments.isNotEmpty) {
      children.add(comments);
    }

    widg = Column(
      mainAxisSize: MainAxisSize.min,
      children: children,
    );

    return widg;
  }

  List<Widget> getButtons({required Person user}) {
    List<Widget> buttons = List.empty(growable: true);
    Widget delete;

    if (!showConfirmDelete) {
      if (action.verifiers![user.documentId!]?.done != null) {
        buttons.add(
          Text(
            'Completed ${DateHelp.formatDateTimeNoSeconds(action.verifiers![user.documentId!]!.done!)}',
            style: const TextStyle(fontSize: 12),
            overflow: TextOverflow.ellipsis,
          ),
        );
      }
      //we can only sign as verifier if we are the verifier, added the user == person check to only show button for your verifier
      if ((widget.permissionHelp.canEditField(ActionPermissionHelp.signAsVerifier, actionStatus: action.status) || action.documentId == null) &&
          user.documentId == person.documentId &&
          action.verifiers![user.documentId!]?.done == null &&
          action.documentId != null &&
          (action.assignees != null && !action.assignees!.values.any((ass) => ass.done == null))) {
        buttons.add(IconButton(
          icon: const Icon(Icons.check),
          color: StyleBase.successGreen,
          onPressed: () => setState(() {
            action.verifiers![user.documentId!]?.done = DateTime.now();
          }),
        ));
        //no actionStatus passed here as we always want the verifier to
        //be able to unsign and reopen the action - this is logged in the audit trail
      } else if ((widget.permissionHelp.canEditField(ActionPermissionHelp.signAsVerifier) || action.documentId == null) &&
          action.verifiers![user.documentId!]?.done != null) {
        buttons.add(IconButton(
          icon: const Icon(Icons.remove_done_rounded),
          color: StyleBase.blue,
          onPressed: () {
            setState(() {
              action.verifiers![user.documentId!]?.done = null;
              action.status = action.due != null && action.due!.isBefore(DateTime.now()) ? EnumsHelp.statusVerification : EnumsHelp.statusPastDue;
            });

            widget.updateActionState(action);
          },
        ));
      }
    }

    if (showConfirmDelete && user.documentId == deleteUserId) {
      delete = InlineConfirmationButtons(
        confirmCallback: () => removeVerifier(user),
        denyCallback: () => setState(() {
          showConfirmDelete = false;
          deleteUserId = null;
        }),
      );
    } else {
      delete = IconButton(
        icon: const Icon(Icons.delete),
        color: StyleBase.warningRed,
        onPressed: () {
          setState(() {
            showConfirmDelete = true;
            deleteUserId = user.documentId;
          });
        },
      );
    }

    if (widget.permissionHelp.canEditField(ActionPermissionHelp.changeVerifiers, actionStatus: action.status) || action.documentId == null) {
      buttons.add(
        delete,
      );
    }

    return buttons;
  }

  void removeVerifier(Person user) {
    setState(() {
      action.removeVerifier(verifierId: user.documentId!); //remove from the action (Verifier objects)
      verifiers.removeWhere((element) => element.documentId == user.documentId); //remove from the list of Person objects
      deleteUserId = null;
      widget.updateActionState(action);
    });

    resetVerifierFuture();
  }

  void addVerifier(usr) {
    Verifier verifier = Verifier(
      documentId: usr.documentId,
      done: null,
      person: usr.getPersonSnapshot(),
      created: Auditable(person: usr.getPersonSnapshot(), dateStamp: DateTime.now()),
    );

    return setState(() {
      action.addVerifier(verifier: verifier);
      verifiers.add(usr);
      widget.updateActionState(action);
    });
  }

  resetVerifierFuture() {
    verifiersFuture = PersonRepo().getByList(ids: action.verifiers!.keys.toList(), populate: true);
  }
}
