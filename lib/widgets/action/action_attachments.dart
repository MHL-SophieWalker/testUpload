// ignore_for_file: must_be_immutable

import 'package:file_picker/file_picker.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/files/file_type_helper.dart';
import 'package:hart_suite/helpers/firebase/firebase_storage_helper.dart';
import 'package:hart_suite/helpers/permissions/action_permission_help.dart';
import 'package:hart_suite/models/actions/action.dart' as act;
import 'package:hart_suite/models/attachment/attachment.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/widgets/cards/attachment_card.dart';
import 'package:hart_suite/widgets/upload/file_upload.dart';

class ActionAttachments extends StatefulWidget {
  ActionAttachments({super.key, required this.action, required this.person, required this.widthOffset, required this.permissionHelp}) {
    processDeleteAttachmentsQueue = _ActionAttachmentsState.processDeleteAttachmentQueue;
  }

  final act.Action action;
  final Person person;
  final double widthOffset;
  final ActionPermissionHelp permissionHelp;
  late Function upload, refresh, processDeleteAttachmentsQueue;
  late List<Widget> attachments;

  @override
  State<ActionAttachments> createState() => _ActionAttachmentsState();
}

class _ActionAttachmentsState extends State<ActionAttachments> {
  UploadTask? task;
  late List<Widget> attachments;
  static List<String> filePathsToDelete = List.empty(growable: true);

  @override
  void initState() {
    super.initState();
    task = null;
    attachments = getAttachments();

    widget.attachments = attachments;

    widget.upload = uploadAttachment;
    filePathsToDelete = List.empty(growable: true);
    widget.processDeleteAttachmentsQueue = processDeleteAttachmentQueue;
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    widget.refresh = () => setState(() {
          attachments = getAttachments();
        });
  }

  @override
  Widget build(BuildContext context) {
    Widget widg;

    if (attachments.isEmpty) {
      widg = const Center(
        child: Text('Nothing Attached Yet'),
      );
    } else {
      widg = Column(
        mainAxisSize: MainAxisSize.min,
        children: attachments,
      );
    }

    return widg;
  }

  List<Widget> getAttachments() {
    List<Widget> attachs;

    attachs = List.empty(growable: true);

    widget.action.attachments ??= {};

    for (Attachment attachment in widget.action.attachments!.values) {
      attachs.add(AttachmentCard(
        permissionHelp: widget.permissionHelp,
        attachment: attachment,
        deleteAttachment: () => queueDeleteAttachment(documentId: attachment.documentId!),
        action: widget.action,
      ));
    }

    return attachs;
  }

  uploadAttachment() async {
    Map<String, String> extensions;
    UploadTask? task;
    FilePickerResult? result;

    extensions = FileTypeHelper.getExtensions();

    result = await FilePicker.platform.pickFiles(type: FileType.custom, allowedExtensions: extensions.keys.toList(), allowMultiple: true);

    if (result != null) {
      if (kIsWeb) {
        for (var r in result.files.toList()) {
          FirebaseStorageHelper.uploadFile(
                  contentType: extensions[r.extension?.toLowerCase()]!,
                  path: '${widget.action.customer}/actions/${widget.action.documentId!}/${r.name}',
                  bytes: r.bytes)
              .then((p0) {
            task = p0;

            if (mounted) {
              setState(() {
                attachments.add(
                  AttachmentCard(
                    permissionHelp: widget.permissionHelp,
                    attachment: Attachment(
                      fileName: 'Uploading...',
                      fileLocation: '',
                      documentId: '',
                      created: Auditable(
                        person: widget.person.getPersonSnapshot(),
                        dateStamp: DateTime.now(),
                      ),
                    ),
                    fileUpload: FileUpload(
                      task: task,
                      successCallback: successCallback,
                      errorCallback: errorCallback,
                      widthOffset: widget.widthOffset,
                    ),
                    action: widget.action,
                  ),
                );
              });
            }
          });
        }
      } else {
        for (var r in result.files.toList()) {
          FirebaseStorageHelper.uploadFile(
                  contentType: extensions[r.extension?.toLowerCase()]!,
                  path: '${widget.action.customer}/actions/${widget.action.documentId!}/${r.name}',
                  localPath: r.path)
              .then((p0) {
            task = p0;

            if (mounted) {
              setState(() {
                attachments.add(
                  AttachmentCard(
                    permissionHelp: widget.permissionHelp,
                    attachment: Attachment(
                      fileName: 'Uploading...',
                      fileLocation: '',
                      documentId: '',
                      created: Auditable(
                        person: widget.person.getPersonSnapshot(),
                        dateStamp: DateTime.now(),
                      ),
                    ),
                    fileUpload: FileUpload(
                      task: task,
                      successCallback: successCallback,
                      errorCallback: errorCallback,
                      widthOffset: widget.widthOffset,
                    ),
                    action: widget.action,
                  ),
                );
              });
            }
          });
        }
      }
    } else {
      task = null;
    }
  }

  queueDeleteAttachment({required String documentId}) {
    setState(() {
      if (!widget.action.attachments![documentId]!.isOnline) {
        filePathsToDelete.add(widget.action.attachments![documentId]!.fileLocation);
      }

      widget.action.attachments!.remove(documentId);
      widget.refresh();
    });
  }

  static processDeleteAttachmentQueue() {
    for (String path in filePathsToDelete) {
      try {
        FirebaseStorageHelper.deleteFile(path);
      } catch (ex) {
        //the main error that will be caught is file does not exist. This is not a problem, Firebase provides no way to check if a file exists before deleting it.
        ErrorHandler.logError(exception: ex);
      }
    }

    filePathsToDelete.clear();
  }

  errorCallback() {
    ErrorHandler.logError(exception: 'An error occureed while uploading the file to Firebase.');
  }

  successCallback({required String path, required String name}) {
    Auditable created;
    Attachment attachment;

    created = Auditable(person: widget.person.getPersonSnapshot(), dateStamp: DateTime.now());

    attachment = Attachment(
      fileName: name,
      fileLocation: path,
      documentId: name,
      created: created,
    );

    widget.action.attachments ??= {};

    setState(() {
      widget.action.attachments![attachment.documentId!] = attachment;
    });

    widget.refresh();
  }
}
