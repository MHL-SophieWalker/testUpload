import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/address.dart';
import 'package:hart_suite/models/profile/contact.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/models/profile/position.dart';
import 'package:hart_suite/models/profile/profile.dart';

class Person extends Profile {
  String? image;
  String firstName;
  String initials;
  String lastName;
  Contact? contact;
  Address? address;
  Position? position;
  Auditable? disabled;
  List<String> access;
  String? lastAccessed;
  String fullName;

  Person(
      {required this.image,
      required this.firstName,
      this.initials = '',
      required this.lastName,
      this.contact,
      this.address,
      this.position,
      this.disabled,
      this.access = const [],
      this.lastAccessed,
      super.documentId,
      required super.disciplines,
      super.created,
      super.updated,
      super.deleted,
      this.fullName = ''})
      : super() {
    if (fullName.isEmpty) {
      if (initials.isNotEmpty) {
        fullName = '${firstName.trim()} ${initials.trim()} ${lastName.trim()}';
      } else {
        fullName = '${firstName.trim()} ${lastName.trim()}';
      }
    }

    if ((lastAccessed == null || lastAccessed == '') && access.isNotEmpty) {
      lastAccessed = access.last;
    }
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'documentId': documentId,
      'image': image,
      'firstName': firstName,
      'initials': initials,
      'lastName': lastName,
      'fullName': fullName,
      'fullNameLower': fullName.toLowerCase(),
      'lastNameLower': lastName.toLowerCase(),
      'contact': contact?.toMap(),
      'address': address?.toMap(),
      'position': position?.toMap(),
      'disabled': disabled?.toMap(),
      'access': access.toList(),
      'lastAccessed': lastAccessed,
      'created': created?.toMap(),
      'updated': updated?.toMap(),
      'deleted': deleted?.toMap(),
      'disciplines': disciplines?.map((key, value) => MapEntry(key, value?.toMap())),
    };
  }

  static Person? fromMap(Map<String, dynamic>? map) {
    Person? person;
    Map<String, Discipline?> disciplineMap = {};

    if (map == null || map.isEmpty || map['documentId'] == null) {
      person = null;
    } else {
      if (map['disciplines'] != null) {
        for (var key in map['disciplines'].keys) {
          disciplineMap[key] = Discipline.fromMap(map['disciplines'][key]);
        }
      }

      person = Person(
        documentId: map.containsKey('documentId') ? map['documentId'] : null,
        image: map.containsKey('image') ? map['image'] : '',
        firstName: map.containsKey('firstName') ? map['firstName'] : '',
        initials: map.containsKey('initials') ? map['initials'] : '',
        lastName: map.containsKey('lastName') ? map['lastName'] : '',
        fullName: map.containsKey('fullName') ? map['fullName'] : '',
        contact: map.containsKey('contact') ? Contact.fromMap(map['contact']) : null,
        address: map.containsKey('address') ? Address.fromMap(map['address']) : null,
        position: map.containsKey('position') ? Position.fromMap(map['position']) : null,
        disabled: map.containsKey('disabled') ? Auditable.fromMap(map['disabled']) : null,
        access: map.containsKey('access') && map['access'] != null && map['access'].length > 0 ? List<String>.from(map['access']) : [],
        lastAccessed: map.containsKey('lastAccessed') ? map['lastAccessed'] : null,
        created: map.containsKey('created') ? Auditable.fromMap(map['created']) : null,
        updated: map.containsKey('updated') ? Auditable.fromMap(map['updated']) : null,
        deleted: map.containsKey('deleted') ? Auditable.fromMap(map['deleted']) : null,
        disciplines: disciplineMap,
      );
    }

    return person;
  }

  static Map<String, Person?> populate(Map<String, dynamic> map) {
    Map<String, Person?> innerMap;

    innerMap = <String, Person?>{};

    for (var key in map.keys) {
      innerMap[key] = Person.fromMap(map[key]);
    }

    return innerMap;
  }

  PersonSnapshot getPersonSnapshot() {
    return PersonSnapshot(
      uid: documentId ?? '',
      fullName: '$firstName $lastName',
      imagePath: getImagePathString(),
    );
  }
}
