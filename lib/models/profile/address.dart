class Address {
  String line1 = '';
  String? line2;
  String city = '';
  String state = '';
  String postCode = '';
  String country = '';

  Address({required this.line1, this.line2, required this.city, required this.state, required this.postCode, required this.country});

  Map<String, dynamic> toMap() {
    return {'line1': line1, 'line2': line2, 'city': city, 'state': state, 'postCode': postCode, 'country': country};
  }

  static Address? fromMap(Map<String, dynamic>? map) {
    Address? address;

    if (map == null || map.isEmpty) {
      address = Address(line1: '', city: '', state: '', postCode: '', country: '');
    } else {
      address = Address(
        line1: map.containsKey('line1') ? map['line1'] : '',
        line2: map.containsKey('line2') ? map['line2'] : '',
        city: map.containsKey('city') ? map['city'] : '',
        state: map.containsKey('state') ? map['state'] : '',
        postCode: map.containsKey('postCode') ? map['postCode'] : '',
        country: map.containsKey('country') ? map['country'] : '',
      );
    }

    return address;
  }

  static Map<String, Address?> populate(Map<String, dynamic> map) {
    Map<String, Address?> innerMap;

    innerMap = <String, Address?>{};

    for (var key in map.keys) {
      innerMap[key] = Address.fromMap(map[key]);
    }

    return innerMap;
  }
}
