import 'package:hart_suite/models/app/app.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/profile.dart';
import 'package:hart_suite/models/profile/role.dart';

class ProfileAppRole {
  String? documentId;
  Map<String, Profile?> profile;
  Map<String, App?> app;
  Map<String, Role?> role;
  Auditable? created;
  Auditable? updated;
  Auditable? deleted;

  ProfileAppRole({this.documentId, required this.profile, required this.app, required this.role, this.created, this.updated, this.deleted}) {
    documentId ??= '${profile.keys.first}_${app.keys.first}_${role.keys.first}';
  }

  Map<String, dynamic> toMap() {
    return {
      'documentId': documentId,
      'profile': profile.map((key, value) => MapEntry(key, value?.toMap())),
      'app': app.map((key, value) => MapEntry(key, value?.toMap())),
      'role': role.map((key, value) => MapEntry(key, value?.toMap())),
      'created': created?.toMap(),
      'updated': updated?.toMap(),
      'deleted': deleted?.toMap()
    };
  }

  static ProfileAppRole? fromMap(Map<String, dynamic>? map) {
    ProfileAppRole? profileAppRole;
    Map<String, Profile?> profileMap = {};
    Map<String, App?> appMap = {};
    Map<String, Role?> roleMap = {};

    if (map == null || map.isEmpty || map['documentId'] == null) {
      profileAppRole = null;
    } else {
      if (map.containsKey('profile') && map['profile'] != null) {
        for (var key in map['profile'].keys) {
          profileMap[key] = Profile.fromMap(map['profile'][key]);
        }
      }

      if (map.containsKey('app') && map['app'] != null) {
        for (var key in map['app'].keys) {
          appMap[key] = App.fromMap(map['app'][key]);
        }
      }

      if (map.containsKey('role') && map['role'] != null) {
        for (var key in map['role'].keys) {
          roleMap[key] = Role.fromMap(map['role'][key]);
        }
      }

      profileAppRole = ProfileAppRole(
        documentId: map.containsKey('documentId') ? map['documentId'] : null,
        profile: profileMap,
        app: appMap,
        role: roleMap,
        created: map.containsKey('created') ? Auditable.fromMap(map['created']) : null,
        updated: map.containsKey('updated') ? Auditable.fromMap(map['updated']) : null,
        deleted: map.containsKey('deleted') ? Auditable.fromMap(map['deleted']) : null,
      );
    }

    return profileAppRole;
  }

  static Map<String, ProfileAppRole?> populate(Map<String, dynamic> map) {
    Map<String, ProfileAppRole?> innerMap;

    innerMap = <String, ProfileAppRole?>{};

    for (var key in map.keys) {
      innerMap[key] = ProfileAppRole.fromMap(map[key]);
    }

    return innerMap;
  }
}
