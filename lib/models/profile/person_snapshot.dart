class PersonSnapshot {
  String uid;
  String fullName;
  String? imagePath;
  //IMPORTANT - Never send this property to FireBase!!
  String? remoteImageUrl;

  PersonSnapshot({required this.uid, required this.fullName, this.imagePath});

  Map<String, dynamic> toMap() {
    return {'uid': uid, 'fullName': fullName, 'imagePath': imagePath};
  }

  static PersonSnapshot? fromMap(Map<String, dynamic>? map) {
    PersonSnapshot? person;

    if (map == null || map.isEmpty || map['uid'] == null) {
      person = null;
    } else {
      person = PersonSnapshot(
        uid: map.containsKey('uid') ? map['uid'] : null,
        fullName: map.containsKey('fullName') ? map['fullName'] : null,
        imagePath: map.containsKey('imagePath') ? map['imagePath'] : null,
      );
    }

    return person;
  }

  static PersonSnapshot? fromPersonMap(Map<String, dynamic>? map) {
    PersonSnapshot? person;

    if (map == null || map.isEmpty || map['documentId'] == null) {
      person = null;
    } else {
      person = PersonSnapshot(
        uid: map.containsKey('documentId') ? map['documentId'] : null,
        fullName: map.containsKey('fullName') ? map['fullName'] : null,
        imagePath: map.containsKey('image') ? map['image'] : null,
      );
    }

    return person;
  }
}
