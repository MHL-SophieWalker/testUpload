import 'package:flutter/material.dart';
import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/profile/team.dart';

abstract class Profile {
  String? documentId;
  Map<String, Discipline?>? disciplines;
  String? remoteImageUrl;

  Auditable? created;
  Auditable? updated;
  Auditable? deleted;

  Profile({this.documentId, this.disciplines, this.created, this.updated, this.deleted});

  static Profile? fromMap(Map<String, dynamic>? map) {
    Profile? prof;

    if (map == null || map.isEmpty || map['documentId'] == null) {
      prof = null;
    } else if (map['firstName'] != null) {
      prof = Person.fromMap(map);
    } else {
      prof = Team.fromMap(map);
    }

    return prof;
  }

  Map<String, dynamic> toMap();

  static Map<String, Profile?> populate(Map<String, dynamic> map) {
    Map<String, Profile?> innerMap;

    innerMap = <String, Profile?>{};

    for (var key in map.keys) {
      innerMap[key] = Profile.fromMap(map[key]);
    }

    return innerMap;
  }

  Widget getProfileImage({double width = 350, double height = 350, required String imagePath}) {
    return SizedBox(
      width: width,
      height: height,
      child: Stack(
        children: [
          Image.network(
            width: width,
            height: height,
            imagePath,
            errorBuilder: (context, error, stackTrace) => getProfileImagePlaceholder(),
          ),
          Positioned(
            bottom: 10,
            right: 8,
            child: ClipRRect(
              borderRadius: BorderRadius.circular(4),
              child: SizedBox(
                width: 8,
                height: 20,
                child: ColoredBox(
                  color: Colors.grey[400]!,
                ),
              ),
            ),
          ),
          Positioned(
            bottom: 8,
            right: 0,
            child: Icon(
              Icons.more_vert,
              color: Colors.grey[850],
            ),
          )
        ],
      ),
    );
  }

  Widget getProfileImagePlaceholder() {
    return const Icon(
      Icons.person,
      size: 350,
    );
  }

  String getImagePathString() {
    return 'profileImages/$documentId/image.jpg';
  }
}
