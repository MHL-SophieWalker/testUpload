class AttachmentType {
  String? documentId;
  String name;

  AttachmentType({this.documentId, required this.name});

  Map<String, dynamic> toMap() {
    return {'documentId': documentId, 'name': name};
  }

  static AttachmentType? fromMap(Map<String, dynamic>? map) {
    AttachmentType? attachmentType;

    if (map == null || map.isEmpty || map['documentId'] == null) {
      attachmentType = null;
    } else {
      attachmentType = AttachmentType(
        documentId: map.containsKey('documentId') ? map['documentId'] : null,
        name: map.containsKey('name') ? map['name'] : '',
      );
    }

    return attachmentType;
  }

  static Map<String, AttachmentType?> populate(Map<String, dynamic> map) {
    Map<String, AttachmentType?> innerMap;

    innerMap = <String, AttachmentType?>{};

    for (var key in map.keys) {
      innerMap[key] = AttachmentType.fromMap(map[key]);
    }

    return innerMap;
  }
}
