class Platform {
  String? documentId;
  String name;

  Platform({this.documentId, required this.name});

  Map<String, dynamic> toMap() {
    return {'documentId': documentId, 'name': name};
  }

  static Platform? fromMap(Map<String, dynamic>? map) {
    Platform? platform;

    if (map == null || map.isEmpty || map['documentId'] == null) {
      platform = null;
    } else {
      platform = Platform(
        documentId: map.containsKey('documentId') ? map['documentId'] : null,
        name: map.containsKey('name') ? map['name'] : '',
      );
    }

    return platform;
  }

  static Map<String, Platform?> populate(Map<String, dynamic> map) {
    Map<String, Platform?> innerMap;

    innerMap = <String, Platform?>{};

    for (var key in map.keys) {
      innerMap[key] = Platform.fromMap(map[key]);
    }

    return innerMap;
  }
}
