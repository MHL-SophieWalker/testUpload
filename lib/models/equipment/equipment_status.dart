import 'package:hart_suite/models/general/auditable.dart';

class EquipmentStatus {
  String? documentId;
  String name;
  Auditable? created;
  Auditable? updated;
  Auditable? deleted;

  EquipmentStatus({this.documentId, required this.name, this.created, this.updated, this.deleted});

  Map<String, dynamic> toMap() {
    return {'documentId': documentId, 'name': name, 'created': created?.toMap(), 'updated': updated?.toMap(), 'deleted': deleted?.toMap()};
  }

  static EquipmentStatus? fromMap(Map<String, dynamic>? map) {
    EquipmentStatus? equipmentStatus;

    if (map == null || map.isEmpty || map['documentId'] == null) {
      equipmentStatus = null;
    } else {
      equipmentStatus = EquipmentStatus(
        documentId: map.containsKey('documentId') ? map['documentId'] : null,
        name: map.containsKey('name') ? map['name'] : '',
        created: map.containsKey('created') ? Auditable.fromMap(map['created']) : null,
        updated: map.containsKey('updated') ? Auditable.fromMap(map['updated']) : null,
        deleted: map.containsKey('deleted') ? Auditable.fromMap(map['deleted']) : null,
      );
    }

    return equipmentStatus;
  }

  static Map<String, EquipmentStatus?> populate(Map<String, dynamic> map) {
    Map<String, EquipmentStatus?> innerMap;

    innerMap = <String, EquipmentStatus?>{};

    for (var key in map.keys) {
      innerMap[key] = EquipmentStatus.fromMap(map[key]);
    }

    return innerMap;
  }
}
