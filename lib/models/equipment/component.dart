import 'package:hart_suite/models/equipment/equipment.dart';
import 'package:hart_suite/models/general/auditable.dart';

class Component {
  String? documentId;
  String name;
  String manufacturer;
  String description;
  Map<String, Equipment?> equipment;
  int quantity;
  Auditable? created;
  Auditable? updated;
  Auditable? deleted;

  Component(
      {this.documentId,
      required this.name,
      required this.manufacturer,
      required this.description,
      required this.equipment,
      required this.quantity,
      this.created,
      this.updated,
      this.deleted});

  Map<String, dynamic> toMap() {
    return {
      'documentId': documentId,
      'name': name,
      'manufacturer': manufacturer,
      'description': description,
      'equipment': equipment.map((key, value) => MapEntry(key, value?.toMap())),
      'quantity': quantity,
      'created': created?.toMap(),
      'updated': updated?.toMap(),
      'deleted': deleted?.toMap()
    };
  }

  static Component? fromMap(Map<String, dynamic>? map) {
    Component? component;
    Map<String, Equipment?> equipmentMap = {};

    if (map == null || map.isEmpty || map['documentId'] == null) {
      component = null;
    } else {
      if (map.containsKey('equipment') && map['equipment'] != null) {
        for (var key in map['equipment'].keys) {
          equipmentMap[key] = Equipment.fromMap(map['equipment'][key]);
        }
      }

      component = Component(
        documentId: map.containsKey('documentId') ? map['documentId'] : null,
        name: map.containsKey('name') ? map['name'] : '',
        manufacturer: map.containsKey('manufacturer') ? map['manufacturer'] : '',
        description: map.containsKey('description') ? map['description'] : '',
        equipment: equipmentMap,
        quantity: map.containsKey('quantity') ? map['quantity'] : 0,
        created: map.containsKey('created') ? Auditable.fromMap(map['created']) : null,
        updated: map.containsKey('updated') ? Auditable.fromMap(map['updated']) : null,
        deleted: map.containsKey('deleted') ? Auditable.fromMap(map['deleted']) : null,
      );
    }

    return component;
  }

  static Map<String, Component?> populate(Map<String, dynamic> map) {
    Map<String, Component?> innerMap;

    innerMap = <String, Component?>{};

    for (var key in map.keys) {
      innerMap[key] = Component.fromMap(map[key]);
    }

    return innerMap;
  }
}
