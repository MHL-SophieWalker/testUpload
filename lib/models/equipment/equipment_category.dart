import 'package:hart_suite/models/general/auditable.dart';

class EquipmentCategory {
  String? documentId;
  String name;
  Auditable? created;
  Auditable? updated;
  Auditable? deleted;

  EquipmentCategory({this.documentId, required this.name, this.created, this.updated, this.deleted});

  Map<String, dynamic> toMap() {
    return {'documentId': documentId, 'name': name, 'created': created?.toMap(), 'updated': updated?.toMap(), 'deleted': deleted?.toMap()};
  }

  static EquipmentCategory? fromMap(Map<String, dynamic>? map) {
    EquipmentCategory? equipmentCategory;

    if (map == null || map.isEmpty || map['documentId'] == null) {
      equipmentCategory = null;
    } else {
      equipmentCategory = EquipmentCategory(
        documentId: map.containsKey('documentId') ? map['documentId'] : null,
        name: map.containsKey('name') ? map['name'] : '',
        created: map.containsKey('created') ? Auditable.fromMap(map['created']) : null,
        updated: map.containsKey('updated') ? Auditable.fromMap(map['updated']) : null,
        deleted: map.containsKey('deleted') ? Auditable.fromMap(map['deleted']) : null,
      );
    }

    return equipmentCategory;
  }

  static Map<String, EquipmentCategory?> populate(Map<String, dynamic> map) {
    Map<String, EquipmentCategory?> innerMap;

    innerMap = <String, EquipmentCategory?>{};

    for (var key in map.keys) {
      innerMap[key] = EquipmentCategory.fromMap(map[key]);
    }

    return innerMap;
  }
}
