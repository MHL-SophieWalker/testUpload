import 'package:hart_suite/models/actions/assignee.dart';
import 'package:hart_suite/models/actions/verifier.dart';
import 'package:hart_suite/models/actions/subcategory.dart';
import 'package:hart_suite/models/area/area_snapshot.dart';
import 'package:hart_suite/models/attachment/attachment.dart';
import 'package:hart_suite/models/comment/comment.dart';
import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/models/general/auditable.dart';

class Action {
  String? documentId;
  String title;
  late String? titleLower;
  String description;
  DateTime? due;
  String status;
  String customer;
  SubCategory? subCategory;
  AreaSnapshot? area;
  List<Auditable>? log;
  List<Comment>? comments;
  Map<String, Attachment>? attachments;
  Map<String, Assignee>? assignees;
  Map<String, Verifier>? verifiers;
  Auditable? created;
  Auditable? updated;
  Auditable? deleted;
  List<String>? firebaseFilterIds;
  int? refNum;
  List<Discipline>? themes;
  List<String> linkedActionIds;
  List<String> wildTags;
  String? areaId, subcategoryId; //used purely for Firebase Filtering
  List<String?>? themeIds; //used purely for Firebase Filtering

  Action({
    this.documentId,
    required this.title,
    required this.description,
    this.due,
    required this.status,
    required this.customer,
    this.subCategory,
    this.area,
    this.log,
    this.attachments,
    this.assignees,
    this.verifiers,
    this.created,
    this.updated,
    this.deleted,
    this.firebaseFilterIds,
    this.refNum,
    this.comments,
    this.themes,
    this.linkedActionIds = const [],
    this.wildTags = const [],
  }) {
    titleLower = title.toLowerCase();
    due = due ?? DateTime.now().add(const Duration(days: 28));

    assignees ??= {};
    verifiers ??= {};
    firebaseFilterIds ??= List.empty(growable: true);
    areaId ??= area?.documentId;
    subcategoryId ??= subCategory?.documentId;
    themeIds = themes?.map((e) => e.documentId).toList();
    generateWildTags();
  }

  static Action? fromMap(Map<String, dynamic>? map) {
    Action? action;
    List<Auditable>? log;
    List<Comment>? comments;

    if (map == null || map.isEmpty || map['documentId'] == null) {
      action = null;
    } else {
      if (map.containsKey('log') && map['log'] != null) {
        log = List.empty(growable: true);

        for (var l in map['log']) {
          if (Auditable.fromMap(l) != null) {
            log.add(Auditable.fromMap(l)!);
          }
        }
      }

      if (map.containsKey('comments') && map['comments'] != null) {
        comments = List.empty(growable: true);

        for (var c in map['comments']) {
          if (Comment.fromMap(c) != null) {
            comments.add(Comment.fromMap(c)!);
          }
        }
      }

      action = Action(
        documentId: map.containsKey('documentId') ? map['documentId'] : null,
        title: map.containsKey('title') ? map['title'] : '',
        description: map.containsKey('description') ? map['description'] : '',
        due: map.containsKey('due') ? (map['due'] as DateTime) : null,
        status: map.containsKey('status') ? map['status'] : 'TBC',
        customer: map.containsKey('customer') ? map['customer'] : '',
        subCategory: map.containsKey('subCategory') ? SubCategory.fromMap(map['subCategory']) : null,
        area: map.containsKey('area') ? AreaSnapshot.fromMap(map['area']) : null,
        log: log,
        attachments: map.containsKey('attachments') ? map['attachments']?.map((key, value) => MapEntry(key, Attachment.fromMap(value))) : {},
        assignees: map.containsKey('assignees') ? map['assignees']?.map((key, value) => MapEntry(key, Assignee.fromMap(value))) : {},
        verifiers: map.containsKey('verifiers') ? map['verifiers']?.map((key, value) => MapEntry(key, Verifier.fromMap(value))) : {},
        created: map.containsKey('created') ? Auditable.fromMap(map['created']) : null,
        updated: map.containsKey('updated') ? Auditable.fromMap(map['updated']) : null,
        deleted: map.containsKey('deleted') ? Auditable.fromMap(map['deleted']) : null,
        firebaseFilterIds: map.containsKey('firebaseFilterIds') ? map['firebaseFilterIds'] : null,
        refNum: map.containsKey('refNum') ? map['refNum'] : null,
        comments: comments,
        wildTags: map.containsKey('wildTags') ? map['wildTags'] : null,
        linkedActionIds: map.containsKey('linkedActionIds') ? map['linkedActionIds'] : [],
      );
    }

    return action;
  }

  Map<String, dynamic> toMap() {
    List<Map<String, dynamic>> logMap = List.empty(growable: true);
    List<Map<String, dynamic>> commentMap = List.empty(growable: true);

    if (log != null) {
      for (var l in log!) {
        logMap.add(l.toMap());
      }
    }

    if (comments != null) {
      for (var c in comments!) {
        commentMap.add(c.toMap());
      }
    }

    return {
      'documentId': documentId,
      'title': title,
      'titleLower': title.toLowerCase(),
      'description': description,
      'due': due,
      'status': status.toLowerCase(),
      'customer': customer,
      'subCategory': subCategory?.toMap(),
      'area': area?.toMap(),
      'log': logMap,
      'attachments': attachments?.map((key, value) => MapEntry(key, value.toMap())) ?? {},
      'assignees': assignees!.map((key, value) => MapEntry(key, value.toMap())),
      'verifiers': verifiers!.map((key, value) => MapEntry(key, value.toMap())),
      'created': created?.toMap(),
      'updated': updated?.toMap(),
      'deleted': deleted?.toMap(),
      'firebaseFilterIds': firebaseFilterIds,
      'refNum': refNum,
      'comments': commentMap,
      'themes': themes?.map((e) => e.toMap()).toList(),
      'areaId': areaId,
      'subcategoryId': subcategoryId ?? subCategory?.documentId,
      'themeIds': themeIds,
      'wildTags': wildTags,
      'linkedActionIds': linkedActionIds,
    };
  }

  addAssignee({required Assignee assignee}) {
    assignees![assignee.documentId!] = assignee;
    firebaseFilterIds!.add('ass:${assignee.documentId!}');
    firebaseFilterIds!.add('per:${assignee.documentId!}');
  }

  removeAssignee({required String assigneeId}) {
    assignees!.remove(assigneeId);
    firebaseFilterIds!.remove('ass:$assigneeId');
    firebaseFilterIds!.remove('per:$assigneeId');
  }

  addVerifier({required Verifier verifier}) {
    verifiers![verifier.documentId!] = verifier;
    firebaseFilterIds!.add('ver:${verifier.documentId!}');
    firebaseFilterIds!.add('per:${verifier.documentId!}');
  }

  removeVerifier({required String verifierId}) {
    verifiers!.remove(verifierId);
    firebaseFilterIds!.remove('ver:$verifierId');
    firebaseFilterIds!.remove('per:$verifierId');
  }

  addTheme({required Discipline theme}) {
    themes ??= [];
    themeIds ??= [];
    themes!.add(theme);
    themeIds!.add(theme.documentId);
  }

  removeTheme({required Discipline theme}) {
    themes!.remove(theme);
    themeIds!.remove(theme.documentId);
  }

  setArea({required AreaSnapshot areaSnap}) {
    area = areaSnap;
    areaId = areaSnap.documentId;
  }

  generateWildTags() {
    List<String> tags = [];
    String toMatch;

    toMatch = title;
    toMatch += ' $description';
    toMatch += ' ${area?.name}';
    toMatch += ' ${subCategory?.name}';
    toMatch += ' ${themes?.join(' ')}';
    toMatch += ' ${refNum.toString()}';

    // Regular expression to match URLs
    RegExp urlRegExp = RegExp(r'(https?://[^\s]+|www\.[^\s]+)');
    // Regular expression to match words
    RegExp wordRegExp = RegExp(r'\b\w+\b');

    // Find all URLs in the description
    Iterable<RegExpMatch> urlMatches = urlRegExp.allMatches(toMatch);
    // Add URLs to tags
    for (var match in urlMatches) {
      tags.add(match.group(0)!.toLowerCase());
    }

    // Remove URLs from the description
    String descriptionWithoutUrls = toMatch.replaceAll(urlRegExp, '');

    // Find all words in the description without URLs
    Iterable<RegExpMatch> wordMatches = wordRegExp.allMatches(descriptionWithoutUrls);
    // Add words to tags, filtering out short words
    for (var match in wordMatches) {
      String word = match.group(0)!;
      if (word.length > 2) {
        tags.add(word.toLowerCase());
      }
    }

    // Remove duplicates by converting to a set and back to a list
    tags = tags.toSet().toList();

    wildTags = tags;
  }
}
