import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/main/home.dart';

import '../error/four04.dart';

class ChangeCustomer extends StatefulWidget {
  static const route = '/changeCustomer';

  const ChangeCustomer({
    super.key,
  });

  @override
  State<ChangeCustomer> createState() => _ChangeCustomerState();
}

class _ChangeCustomerState extends State<ChangeCustomer> {
  late Person? user;
  late PersonRepo personRepo;
  late Future<Person?>? foetus;

  @override
  void initState() {
    super.initState();

    personRepo = PersonRepo();

    foetus = personRepo.getMyFoetus(id: FirebaseAuth.instance.currentUser!.uid);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Change Customer'),
      ),
      body: FutureBuilder(
        future: foetus,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            if (snapshot.hasData) {
              user = snapshot.data as Person;

              return buildWidget();
            } else if (snapshot.hasError) {
              return Four04Page(args: Four04Args(page: 'Home', route: HomePage.route));
            } else {
              return const Center(
                child: CircularProgressIndicator(),
              );
            }
          } else {
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
        },
      ),
    );
  }

  Widget buildWidget() {
    late List<Widget> access;
    late List<Widget> customers;
    customers = List.empty(growable: true);
    access = List.empty(growable: true);

    access.add(Padding(
      padding: const EdgeInsets.fromLTRB(16, 0, 16, 0),
      child: Text('You are currently seeing data for ${user!.lastAccessed}. To see data for another customer please click one of the buttons below.'),
    ));

    access.add(const Gap(16));

    for (String acc in user!.access) {
      if (acc != user!.lastAccessed) {
        //don't show current customer in switcher
        customers.add(
          Padding(
            padding: const EdgeInsets.fromLTRB(8, 0, 8, 0),
            child: MaterialButton(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              color: StyleBase.lightGrey,
              onPressed: () {
                PersonRepo personRepo = PersonRepo(personSnapshot: user!.getPersonSnapshot());

                user!.lastAccessed = acc;

                // ignore: use_build_context_synchronously
                personRepo.update(person: user!).then((value) => Navigator.of(context).pushNamedAndRemoveUntil(HomePage.route, (route) => false));
              },
              child: Padding(
                padding: const EdgeInsets.all(8),
                child: Text(acc),
              ),
            ),
          ),
        );
      }
    }

    if (kIsWeb) {
      access.add(
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: customers,
        ),
      );
    } else {
      access.add(
        Column(
          children: customers,
        ),
      );
    }

    return Center(
      child: Padding(
        padding: const EdgeInsets.only(top: 20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          children: access,
        ),
      ),
    );
  }
}
