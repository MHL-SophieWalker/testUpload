import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/licenses/license_registry_helper.dart';
import 'package:hart_suite/helpers/ui/app_card_helper.dart';
import 'package:hart_suite/helpers/ui/filter_help.dart';
import 'package:hart_suite/helpers/ui/layout_help.dart';
import 'package:hart_suite/helpers/class/license_helper.dart';
import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/models/general/filter.dart';
import 'package:hart_suite/models/global/pending_invitation.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/discipline/discipline_repo.dart';
import 'package:hart_suite/repos/global/global_admin_repo.dart';
import 'package:hart_suite/repos/global/pending_invitation_repo.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/global_admin/admin.dart';
import 'package:hart_suite/views/auth/auth_gate.dart';
import 'package:hart_suite/views/main/change_customer.dart';
import 'package:hart_suite/views/error/four04.dart';
import 'package:hart_suite/views/profile/my_profile.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/misc/app_version_info.dart';
import 'package:hart_suite/widgets/misc/expand_clicker.dart';
import 'package:cloud_firestore/cloud_firestore.dart' as cloud_firestore;
import 'package:hart_suite/widgets/settings/settings_profile.dart';
import 'package:hart_suite/widgets/sidebar/sidebar_additional_button.dart';
import 'package:url_launcher/url_launcher_string.dart';

class _InitialisationData {
  final Person person;
  final List<Filter> disciplines;
  List<PendingInvitation> pendingInvitations;
  bool isAdmin;

  _InitialisationData({
    required this.person,
    required this.disciplines,
    required this.pendingInvitations,
    required this.isAdmin,
  });
}

class HomePage extends StatefulWidget {
  static const route = '/home';
  static const double expandedWidth = 150;
  static const double collapsedWidth = 52;
  const HomePage({super.key, required this.title});

  final String title;

  @override
  State<HomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<HomePage> {
  late bool expanded, firstRun, isAdmin, userHasCustomer, checkingPendingAccess, userIsLicensed;
  late List<Filter> disciplines;
  late Person? user;
  late Future<_InitialisationData> initialisationData;
  late _InitialisationData initialData;
  late Offset? offset;

  @override
  void initState() {
    super.initState();

    expanded = true;
    firstRun = true;
    isAdmin = false;
    userHasCustomer = true;
    disciplines = List.empty(growable: true);
    checkingPendingAccess = true;

    initialisationData = getInitialisationData();

    LicenseRegistryHelper.addAllLicenses();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: initialisationData,
      builder: ((context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasData) {
            initialData = snapshot.data as _InitialisationData;

            user = initialData.person;
            disciplines = initialData.disciplines;
            isAdmin = initialData.isAdmin;

            return buildWidget();
          } else if (snapshot.hasError) {
            ErrorHandler.logError(exception: snapshot.error);
            return Four04Page(args: Four04Args(page: 'Login', route: AuthGate.route));
          } else {
            return const FutureBuilderLoader();
          }
        } else {
          return const FutureBuilderLoader();
        }
      }),
    );
  }

  Widget buildWidget() {
    List<Widget> cards = List.empty(growable: true);
    Widget widg;

    if (MediaQuery.of(context).size.width < 600 && firstRun) {
      expanded = false;
    }

    firstRun = false;
    cards = AppCardHelper.getFilteredAppCards(disciplines, user!, expanded);

    widg = Scaffold(
      appBar: getAppBar(title: widget.title),
      body: Row(
        children: [
          Expanded(
            child: Row(
              children: [
                Container(
                  decoration: StyleBase.getSidebarBoxShadowDecoration(),
                  child: SizedBox(
                    width: expanded ? HomePage.expandedWidth : HomePage.collapsedWidth,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        ExpandClicker(
                            onTap: () => setState(() {
                                  expanded = !expanded;
                                }),
                            expanded: expanded),
                        Expanded(
                          child: Container(),
                        ),
                        GestureDetector(
                          onPanDown: (details) => setState(() {
                            offset = details.globalPosition;
                          }),
                          child: Column(
                            children: [
                              Padding(
                                padding: const EdgeInsets.only(left: 2),
                                child: getBottomSidebarButton(
                                    onPressed: showProfilePopupMenu,
                                    child: SettingsProfile(user: user!, expanded: expanded),
                                    tooltip: expanded ? null : 'Profile'),
                              ),
                              user!.access.isNotEmpty
                                  ? getBottomSidebarButton(
                                      onPressed: user!.access.length > 1 ? changeCustomerPressed : null,
                                      child: SizedBox(
                                        width: expanded ? HomePage.expandedWidth : HomePage.collapsedWidth,
                                        child: Padding(
                                          padding: const EdgeInsets.all(12.0),
                                          child:
                                              user!.lastAccessed != null ? getCustomerSwitcher(customer: user!.lastAccessed!, context: context) : Container(),
                                        ),
                                      ),
                                      tooltip: expanded ? null : user!.lastAccessed,
                                    )
                                  : Container(),
                              getBottomSidebarButton(
                                onPressed: () => showAboutDialog(
                                  context: context,
                                  applicationIcon: Image.asset(
                                    'assets/images/icon.png',
                                    height: 50,
                                    scale: 1,
                                  ),
                                  applicationName: 'HartSuite',
                                  applicationLegalese:
                                      '© 2024 M HART LTD. \r\n HartSuite® is a trading name of M HART LTD registered in the United Kingdom (11498798)',
                                ),
                                child: Padding(padding: const EdgeInsets.all(12), child: getAbout(context: context)),
                              )
                            ],
                          ),
                        ),
                        AppVersionInfo(expanded: expanded),
                      ],
                    ),
                  ),
                ),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: user!.lastAccessed != null
                        ? userIsLicensed
                            ? getAppCardsBody(
                                cards,
                                getColumnCount(context: context, excludedWidth: expanded ? HomePage.expandedWidth : HomePage.collapsedWidth),
                              )
                            : Center(child: Text('You do not have any licenses available for ${user!.lastAccessed}. Please contact your administrator.'))
                        : const Center(child: Text('You do not have any customers assigned. Please contact your administrator.')),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
    return widg;
  }

  changeCustomerPressed() {
    Navigator.pushNamed(context, ChangeCustomer.route);
  }

  Widget getBottomSidebarButton({required Function? onPressed, required Widget child, String? tooltip}) {
    return SidebarAdditionalButton(
      onPressed: onPressed,
      expandedWidth: HomePage.expandedWidth,
      collapsedWidth: HomePage.collapsedWidth,
      expanded: expanded,
      child: child,
    );
  }

  showSettingsPopupMenu() async {
    double left, top, right, bottom;
    Size screenSize;
    List<PopupMenuEntry<int>> items = [];

    if (isAdmin) {
      items.add(const PopupMenuItem(
        value: 2,
        child: Text('Admin'),
      ));
    }

    items.add(const PopupMenuItem(
      value: 3,
      child: Text('Privacy Policy'),
    ));

    screenSize = MediaQuery.of(context).size;

    left = offset!.dx;
    top = offset!.dy;
    right = screenSize.width - offset!.dx;
    bottom = screenSize.height - offset!.dy;

    await showMenu(
      context: context,
      position: RelativeRect.fromLTRB(left, top, right, bottom),
      items: items,
      elevation: 8.0,
    ).then((value) {
      if (value != null) {
        switch (value) {
          case 2:
            //admin
            Navigator.pushNamed(
              // ignore: use_build_context_synchronously
              context,
              AdminPage.route,
            );
            break;
          case 3:
            //privacy policy
            launchUrlString('https://www.hartsuite.com/terms/privacy');
            break;
        }
      }
    });
  }

  showProfilePopupMenu() async {
    double left, top, right, bottom;
    Size screenSize;
    List<PopupMenuEntry<int>> items = [];

    items.add(const PopupMenuItem(
      value: 1,
      child: Text('My Profile'),
    ));

    items.add(const PopupMenuItem(
      value: 0,
      child: Text('Logout'),
    ));

    screenSize = MediaQuery.of(context).size;

    left = offset!.dx;
    top = offset!.dy;
    right = screenSize.width - offset!.dx;
    bottom = screenSize.height - offset!.dy;

    await showMenu(
      context: context,
      position: RelativeRect.fromLTRB(left, top, right, bottom),
      items: items,
      elevation: 8.0,
    ).then((value) {
      if (value != null) {
        switch (value) {
          case 0:
            //logout
            // ignore: use_build_context_synchronously
            signOut(context: context);
            break;
          case 1:
            //user settings
            Navigator.pushNamed(
              // ignore: use_build_context_synchronously
              context,
              MyProfilePage.route,
            );
            break;
        }
      }
    });
  }

  signOut({required BuildContext context}) async {
    await FirebaseAuth.instance
        .signOut()
        .then((value) => Navigator.pushNamedAndRemoveUntil(
              // ignore: use_build_context_synchronously
              context,
              AuthGate.route,
              (route) => false,
            ))
        .onError(
          (error, stackTrace) => ErrorHandler.logError(
            exception: error,
            stack: stackTrace,
          ),
        );
  }

  Widget getAppCardsBody(List<Widget> cards, int columnCount) {
    Widget widg;

    if (cards.isEmpty) {
      widg = const Center(
        child: Text('No apps to display'),
      );
    } else {
      widg = GridView.builder(
        itemCount: cards.length,
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: columnCount,
          mainAxisExtent: 100,
          crossAxisSpacing: 8,
          mainAxisSpacing: 8,
        ),
        itemBuilder: (context, index) {
          return cards[index];
        },
      );
    }

    return widg;
  }

  Widget getCustomerSwitcher({required String customer, required BuildContext context}) {
    Widget switcher;

    switcher = const Row(
      children: [
        Icon(Icons.domain),
      ],
    );

    if (expanded) {
      if (expanded) {
        switcher = Row(
          children: [
            const Icon(Icons.domain),
            const SizedBox(width: 10),
            Expanded(
              child: Text(
                customer,
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        );
      }
    }

    return switcher;
  }

  Widget getAbout({required BuildContext context}) {
    Widget about;

    about = const Row(
      children: [
        Icon(Icons.info_outline),
      ],
    );

    if (expanded) {
      if (expanded) {
        about = const Row(
          children: [
            Icon(Icons.info_outline),
            SizedBox(width: 10),
            Expanded(
              child: Text(
                'About',
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        );
      }
    }

    return about;
  }

  void disciplinePressed(int index) {
    if (index == 0) {
      disciplines[0].selected = true;

      for (var i = 1; i < disciplines.length; i++) {
        disciplines[i].selected = false;
      }
    } else {
      disciplines[0].selected = false;
      disciplines[index].selected = !disciplines[index].selected;

      if (!FilterHelp.getSelectedFilterBools(disciplines).contains(true)) {
        disciplines[0].selected = true;
      }
    }
  }

  AppBar getAppBar({required String title}) {
    List<Widget> actions;

    actions = List.empty(growable: true);

    if (isAdmin) {
      actions.add(IconButton(
        icon: const Icon(Icons.admin_panel_settings),
        onPressed: () {
          Navigator.pushNamed(context, AdminPage.route);
        },
      ));
    }

    return AppBar(
      title: Text(title),
      actions: actions,
    );
  }

  Future<_InitialisationData> getInitialisationData() async {
    PersonRepo personRepo;
    Person? person;
    List<Discipline> disciplines;
    DisciplineRepo disciplineRepo;
    List<Filter> filters;
    PendingInvitationRepo pendingInvitationRepo;
    List<PendingInvitation> pendingInvitations;
    GlobalAdminRepo globalAdminRepo;
    List<String> admins;
    bool isAdmin;

    personRepo = PersonRepo();
    person = await personRepo.getById(id: FirebaseAuth.instance.currentUser!.uid);

    if (person == null) {
      throw Exception('User not found');
    }

    personRepo.setPersonSnapshot(person.getPersonSnapshot());

    disciplineRepo = DisciplineRepo();
    disciplines = await disciplineRepo.get();

    filters = List.empty(growable: true);
    filters.add(Filter(id: 'all', name: 'All', iconCode: 'all_out', semanticLabel: 'All', selected: true));

    for (Discipline d in disciplines) {
      filters.add(Filter(id: d.documentId, name: d.name, iconCode: d.iconCode, semanticLabel: d.name));
    }

    pendingInvitations = List.empty(growable: true);

    if (person.contact?.email != null && person.contact!.email!.isNotEmpty) {
      pendingInvitationRepo = PendingInvitationRepo();
      pendingInvitations = await pendingInvitationRepo.getDocumentByFilter(
        filter: cloud_firestore.Filter.and(
          cloud_firestore.Filter('email', isEqualTo: person.contact!.email),
          cloud_firestore.Filter('accepted', isNull: true),
        ),
      );

      if (pendingInvitations.isNotEmpty) {
        for (PendingInvitation p in pendingInvitations) {
          person.access.add(p.customer);

          person.lastAccessed ??= p.customer;
          await personRepo.update(person: person);

          p.accepted = true;
          await pendingInvitationRepo.update(id: p.documentId!, data: p);
        }
      }
    }

    if (person.lastAccessed != null && person.access.isNotEmpty) {
      userIsLicensed = await LicenseHelper.checkLicense(userId: person.documentId!, customer: person.lastAccessed!);
    } else {
      userIsLicensed = false;
    }

    admins = List.empty(growable: true);

    if (person.lastAccessed != null) {
      //if lastAccessed is null the user has no customers and cannot be an admin
      globalAdminRepo = GlobalAdminRepo(customer: person.lastAccessed!);
      admins = await globalAdminRepo.get();
    }

    isAdmin = admins.contains(person.documentId);

    person.remoteImageUrl = await personRepo.getProfileImageDownloadUrl(person: person);

    return _InitialisationData(
      person: person,
      disciplines: filters,
      pendingInvitations: pendingInvitations,
      isAdmin: isAdmin,
    );
  }
}
