import 'dart:io';

import 'package:camera/camera.dart';
import 'package:file_picker/file_picker.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/map_help.dart';
import 'package:hart_suite/helpers/ui/feedback_help.dart';
import 'package:hart_suite/helpers/firebase/firebase_storage_helper.dart';
import 'package:hart_suite/helpers/ui/layout_help.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/models/profile/position.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/auth/auth_gate.dart';
import 'package:hart_suite/views/main/home.dart';
import 'package:hart_suite/views/profile/link_account.dart';
import 'package:hart_suite/views/selectors/people_select.dart';
import 'package:hart_suite/widgets/image/image_capture.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/form/text_view.dart';
import 'package:permission_handler/permission_handler.dart';

import '../error/four04.dart';

class MyProfilePage extends StatefulWidget {
  static const route = '/myProfile';
  const MyProfilePage({super.key, required this.title});

  final String title;

  @override
  State<MyProfilePage> createState() => _MyProfilePageState();
}

class _MyProfilePageState extends State<MyProfilePage> with TickerProviderStateMixin {
  late Person? person;
  late Widget view;
  late Reference imageRef, storageBaseRef;
  late List<TextView> userTextViews, contactTextViews, addressTextViews, positionTextViews;
  late List<CameraDescription?> cameras;
  late bool isCapture, showLoader, firstRun, updateImagePath;
  late AnimationController animationController, fadeAnimationController;
  late Animation<double> animation, fadeAnimation;
  late String imagePath;
  late Future<Person?>? foetus;
  late PersonRepo personRepo;
  late PersonSnapshot managerSnap;
  late Widget manager;
  late Map<String, dynamic> personMap;

  @override
  initState() {
    super.initState();

    personRepo = PersonRepo();
    person = null;
    storageBaseRef = FirebaseStorage.instance.ref();
    userTextViews = List.empty(growable: true);
    contactTextViews = List.empty(growable: true);
    positionTextViews = List.empty(growable: true);
    addressTextViews = List.empty(growable: true);
    cameras = List.empty(growable: true);
    isCapture = false;
    imagePath = '';
    showLoader = false;
    firstRun = true;

    foetus = personRepo.getMyFoetus(id: FirebaseAuth.instance.currentUser!.uid);

    animationController = AnimationController(vsync: this, duration: const Duration(seconds: 1))
      ..addListener(() {
        setState(() {});
      });
    animation = CurvedAnimation(parent: animationController, curve: Curves.fastOutSlowIn);

    fadeAnimationController = AnimationController(vsync: this, duration: const Duration(milliseconds: 1500))
      ..addListener(() {
        setState(() {});
      });
    fadeAnimation = CurvedAnimation(parent: fadeAnimationController, curve: Curves.easeInOut);

    getCameras().then(
      (value) => cameras.addAll(value),
    );

    isCapture = false;

    fadeAnimationController.forward();

    personMap = {};

    updateImagePath = true;
  }

  @override
  void dispose() {
    animationController.dispose();
    fadeAnimationController.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: foetus,
      builder: ((context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasData) {
            person = snapshot.data as Person;

            if (firstRun) {
              personMap = person!.toMap();
              firstRun = false;
            }

            setupUserTextViews();
            setupContactTextViews();
            setupPositionTextViews();
            setupAddressTextViews();

            if (updateImagePath) {
              imageRef = imageRef = storageBaseRef.child(person!.getImagePathString());

              FirebaseStorageHelper.getProfileImageDownloadUrl(imagePath: person!.getImagePathString()).then((value) {
                if (mounted) {
                  setState(() {
                    imagePath = value;
                    updateImagePath = false;
                  });
                }
              });
            }

            return buildWidget();
          } else if (snapshot.hasError) {
            return Four04Page(args: Four04Args(page: 'Home', route: HomePage.route));
          } else {
            return const FutureBuilderLoader();
          }
        } else {
          return const FutureBuilderLoader();
        }
      }),
    );
  }

  Widget buildWidget() {
    int columnCount = getColumnCount(context: context);

    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop) {
          if (canNavigateAway()) {
            SchedulerBinding.instance.addPostFrameCallback((_) {
              Navigator.pop(context);
            });

            return;
          }

          _showBackDialog(context: context);
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text(widget.title),
          actions: getAppBarActions(context: context),
          leading: !Navigator.canPop(context) ? IconButton(icon: const Icon(Icons.home), onPressed: () => navigateHome()) : null,
        ),
        body: Padding(
          padding: const EdgeInsets.fromLTRB(16, 0, 16, 0),
          child: ListView(
            scrollDirection: Axis.vertical,
            shrinkWrap: true,
            children: [
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: showLoader
                    ? const Center(
                        child: Padding(
                          padding: EdgeInsets.all(150),
                          child: SizedBox(
                            height: 50,
                            width: 50,
                            child: CircularProgressIndicator(),
                          ),
                        ),
                      )
                    : getProfileImage(
                        context: context,
                        refreshCallback: () => imageRef.getDownloadURL().then(
                              (value) => setState(() {
                                imagePath = value;
                                updateImagePath = true;
                              }),
                            ),
                      ),
              ),
              getSection(
                  context: context,
                  items: userTextViews.map((e) => e.child).toList(),
                  sectionHeight: StyleBase.getSectionHeight(count: userTextViews.length, columnCount: columnCount),
                  columnCount: columnCount),
              const Gap(8),
              getDivider(text: 'Contact'),
              getSection(
                  context: context,
                  items: contactTextViews.map((e) => e.child).toList(),
                  sectionHeight: StyleBase.getSectionHeight(count: contactTextViews.length, columnCount: columnCount),
                  columnCount: columnCount),
              const Gap(8),
              getDivider(text: 'Position'),
              getSection(
                  context: context,
                  items: getPositionWidgets(),
                  sectionHeight: StyleBase.getSectionHeight(count: positionTextViews.length, columnCount: columnCount),
                  columnCount: columnCount),
              const Gap(8),
              getDivider(text: 'Address'),
              getSection(
                  context: context,
                  items: addressTextViews.map((e) => e.child).toList(),
                  sectionHeight: StyleBase.getSectionHeight(count: addressTextViews.length, columnCount: columnCount),
                  columnCount: columnCount),
              const Gap(24)
            ],
          ),
        ),
      ),
    );
  }

  Future<void> toggleImageExpand({required Function callback}) async {
    if (animation.status == AnimationStatus.completed) {
      animationController.reverse();
      fadeAnimationController.forward();

      return Future.delayed(const Duration(milliseconds: 700), () {
        isCapture = !isCapture;
      }).then((value) => callback());
    } else {
      isCapture = !isCapture;
      animationController.forward();
      fadeAnimationController.reverse();
      callback();
    }
  }

  List<Widget> getPositionWidgets() {
    List<Widget> widgets = List.empty(growable: true);

    widgets = positionTextViews.map((e) => e.child).toList();

    manager = GestureDetector(
      behavior: HitTestBehavior.opaque,
      onTap: () async {
        await Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => PeopleSelect(
              customer: person!.lastAccessed!,
              exclusionIds: [person!.documentId!],
            ),
          ),
        ).then((value) {
          if (value != null) {
            setState(() {
              person!.position ??= Position(jobTitle: '', department: '', company: '', division: '');
              person!.position!.manager = value[0].getPersonSnapshot();
            });
          }
        });
      },
      child: MouseRegion(
        cursor: SystemMouseCursors.click,
        child: IgnorePointer(
          child: TextView(
            label: 'Manager',
            decoration: StyleBase.getInputDecoration(),
            text: person!.position?.manager?.fullName ?? '',
            isLauncher: true,
          ).child,
        ),
      ),
    );

    widgets.add(manager);

    return widgets;
  }

  Widget getProfileImage({
    required BuildContext context,
    required Function refreshCallback,
  }) {
    Widget widget;
    double height, width;
    CameraDescription? camera;

    height = 350;
    width = 350;

    if (!isCapture) {
      widget = FadeTransition(
        opacity: fadeAnimation,
        child: GestureDetector(
          onTapDown: (TapDownDetails details) {
            showUploadCapturemenu(
              offset: details.globalPosition,
              context: context,
              showCapture: cameras.first != null,
              refreshCallback: refreshCallback,
            );
          },
          child: Center(
            child: SizedBox(
              height: height,
              width: width,
              child: MouseRegion(
                cursor: SystemMouseCursors.click,
                child: person!.getProfileImage(imagePath: imagePath),
              ),
            ),
          ),
        ),
      );
    } else {
      if (cameras.first != null) {
        if (kIsWeb) {
          camera = cameras.first;
        } else {
          camera = cameras.firstWhere((element) => element?.lensDirection == CameraLensDirection.front, orElse: () => cameras.first);
        }
      }
      widget = Center(
        child: SizeTransition(
          sizeFactor: animation,
          axis: Axis.vertical,
          axisAlignment: 1.0,
          child: ImageCapture(
            camera: camera!,
            height: height,
            width: width,
            cancelCallback: () => toggleImageExpand(
              callback: () => imageRef.getDownloadURL().then(
                    (value) => setState(() {
                      imagePath = value;
                      updateImagePath = true;
                    }),
                  ),
            ),
            remotePath: person!.getImagePathString(),
            person: person!,
          ),
        ),
      );
    }

    return widget;
  }

  Widget getInput({required String label, required TextEditingController controller}) {
    return TextField(
      decoration: StyleBase.getInputDecoration(label: label),
      controller: controller,
    );
  }

  void saveProfile() {
    PersonRepo repo;
    PersonSnapshot snapshot;

    snapshot = PersonSnapshot(uid: person!.documentId ?? '', fullName: '${person!.firstName} ${person!.lastName}', imagePath: person!.image);

    repo = PersonRepo(personSnapshot: snapshot);

    person!.documentId = FirebaseAuth.instance.currentUser!.uid;
    person!.image = person!.getImagePathString();

    repo.update(person: person!).then(
      (value) {
        // ignore: use_build_context_synchronously
        FeedbackHelp.showSnackbar(context: context, message: 'Profile saved successfully.');
        personMap = person!.toMap();
      },
    ).onError(
      (error, stackTrace) {
        FeedbackHelp.showSnackbar(
            // ignore: use_build_context_synchronously
            context: context,
            message: 'An error occurred while saving.',
            error: true,
            exception: error,
            stackTrace: stackTrace,
            details: []);
      },
    );
  }

  List<Widget> getAppBarActions({required BuildContext context}) {
    return [
      IconButton(
        icon: const Icon(Icons.save),
        onPressed: () {
          saveProfile();
        },
      ),
      IconButton(
        onPressed: () {
          Navigator.pushNamed(context, LinkAccount.route);
        },
        icon: const Icon(Icons.manage_accounts),
      ),
      IconButton(
        onPressed: () {
          deleteAccount();
        },
        icon: const Icon(Icons.delete_forever),
      ),
    ];
  }

  showUploadCapturemenu({
    required Offset offset,
    required BuildContext context,
    required bool showCapture,
    required Function refreshCallback,
  }) async {
    double left, top, right, bottom;
    Size screenSize;

    screenSize = MediaQuery.of(context).size;

    left = offset.dx;
    top = offset.dy;
    right = screenSize.width - offset.dx;
    bottom = screenSize.height - offset.dy;

    await showMenu(
      context: context,
      position: RelativeRect.fromLTRB(left, top, right, bottom),
      items: [
        const PopupMenuItem(
          value: 0,
          child: Text('Upload'),
        ),
        if (showCapture)
          const PopupMenuItem(
            value: 1,
            child: Text('Capture'),
          ),
        const PopupMenuItem(
          value: 3,
          child: Text('Delete'),
        ),
      ],
      elevation: 8.0,
    ).then((value) {
      if (value != null) {
        switch (value) {
          case 0:
            //upload
            upload(person: person!, callback: refreshCallback);
            break;
          case 1:
            //capture
            if (kIsWeb) {
              toggleImageExpand(
                callback: () => imageRef.getDownloadURL().then(
                      (value) => setState(() {
                        imagePath = value;
                        updateImagePath = true;
                      }),
                    ),
              );
            } else {
              Permission.camera.request().then((value) {
                if (value.isGranted) {
                  toggleImageExpand(
                    callback: () => imageRef.getDownloadURL().then(
                          (value) => setState(() {
                            imagePath = value;
                            updateImagePath = true;
                          }),
                        ),
                  );
                }
              });
            }
            break;
          case 3:
            //delete
            try {
              setState(() {
                showLoader = true;
              });
              storageBaseRef.child(person!.getImagePathString()).delete().then((value) => {
                    setState(() {
                      imagePath = '';
                      showLoader = false;
                    })
                  });
            } catch (e) {
              ErrorHandler.logError(exception: e);
            }
        }
      }
    });
  }

  Future<List<CameraDescription?>> getCameras() async {
    final cameras = await availableCameras();

    return cameras;
  }

  setupUserTextViews() {
    if (userTextViews.isEmpty) {
      TextView firstName, initials, lastName;

      firstName = TextView(label: 'First Name', decoration: StyleBase.getInputDecoration(), text: person!.firstName);
      firstName.dataBind(callback: () => person!.firstName = firstName.controller!.text);

      initials = TextView(label: 'Initials', decoration: StyleBase.getInputDecoration(), text: person!.initials);
      initials.dataBind(callback: () => person!.initials = initials.controller!.text);

      lastName = TextView(label: 'Last Name', decoration: StyleBase.getInputDecoration(), text: person!.lastName);
      lastName.dataBind(callback: () => person!.lastName = lastName.controller!.text);

      userTextViews.add(firstName);
      userTextViews.add(initials);
      userTextViews.add(lastName);
    }
  }

  setupContactTextViews() {
    if (contactTextViews.isEmpty) {
      TextView email, telephone, mobile;

      email = TextView(label: 'Email', decoration: StyleBase.getInputDecoration(), text: person!.contact?.email ?? '');
      email.dataBind(callback: () => person!.contact?.email = email.controller!.text);

      telephone = TextView(label: 'Telephone', decoration: StyleBase.getInputDecoration(), text: person!.contact?.telephone ?? '');
      telephone.dataBind(callback: () => person!.contact?.telephone = telephone.controller!.text);

      mobile = TextView(label: 'Mobile', decoration: StyleBase.getInputDecoration(), text: person!.contact?.mobile ?? '');
      mobile.dataBind(callback: () => person!.contact?.mobile = mobile.controller!.text);

      contactTextViews.add(email);
      contactTextViews.add(telephone);
      contactTextViews.add(mobile);
    }
  }

  setupPositionTextViews() {
    if (positionTextViews.isEmpty) {
      TextView jobTitle, department, company, division;

      jobTitle = TextView(label: 'Job Title', decoration: StyleBase.getInputDecoration(), text: person!.position?.jobTitle ?? '');
      jobTitle.dataBind(callback: () => person!.position?.jobTitle = jobTitle.controller!.text);

      department = TextView(label: 'Department', decoration: StyleBase.getInputDecoration(), text: person!.position?.department ?? '');
      department.dataBind(callback: () => person!.position?.department = department.controller!.text);

      company = TextView(label: 'Company', decoration: StyleBase.getInputDecoration(), text: person!.position?.company ?? '');
      company.dataBind(callback: () => person!.position?.company = company.controller!.text);

      division = TextView(label: 'Division', decoration: StyleBase.getInputDecoration(), text: person!.position?.division ?? '');
      division.dataBind(callback: () => person!.position?.division = division.controller!.text);

      positionTextViews.add(jobTitle);
      positionTextViews.add(department);
      positionTextViews.add(company);
      positionTextViews.add(division);
    }
  }

  setupAddressTextViews() {
    if (addressTextViews.isEmpty) {
      TextView line1, line2, city, state, postCode, country;

      line1 = TextView(label: 'Address 1', decoration: StyleBase.getInputDecoration(), text: person!.address?.line1 ?? '');
      line1.dataBind(callback: () => person!.address?.line1 = line1.controller!.text);

      line2 = TextView(label: 'Address 2', decoration: StyleBase.getInputDecoration(), text: person!.address?.line2 ?? '');
      line2.dataBind(callback: () => person!.address?.line2 = line2.controller!.text);

      city = TextView(label: 'City', decoration: StyleBase.getInputDecoration(), text: person!.address?.city ?? '');
      city.dataBind(callback: () => person!.address?.city = city.controller!.text);

      state = TextView(label: 'State', decoration: StyleBase.getInputDecoration(), text: person!.address?.state ?? '');
      state.dataBind(callback: () => person!.address?.state = state.controller!.text);

      postCode = TextView(label: 'Post Code', decoration: StyleBase.getInputDecoration(), text: person!.address?.postCode ?? '');
      postCode.dataBind(callback: () => person!.address?.postCode = postCode.controller!.text);

      country = TextView(label: 'Country', decoration: StyleBase.getInputDecoration(), text: person!.address?.country ?? '');
      country.dataBind(callback: () => person!.address?.country = country.controller!.text);

      addressTextViews.add(line1);
      addressTextViews.add(line2);
      addressTextViews.add(city);
      addressTextViews.add(state);
      addressTextViews.add(postCode);
      addressTextViews.add(country);
    }
  }

  upload({required Person person, required Function callback}) async {
    Uint8List? bytes;
    FilePickerResult? result = await FilePicker.platform.pickFiles(type: FileType.image);

    if (result != null) {
      if (kIsWeb) {
        bytes = result.files.first.bytes;

        if (bytes != null) {
          UploadTask uploadTask = FirebaseStorage.instance.ref().child(person.getImagePathString()).putData(bytes, SettableMetadata(contentType: 'image/jpg'));

          uploadTask.whenComplete(() => callback());
        }
      } else {
        File file = File(result.files.first.path!);

        if (file.existsSync()) {
          UploadTask uploadTask = FirebaseStorage.instance.ref().child(person.getImagePathString()).putFile(file, SettableMetadata(contentType: 'image/jpg'));

          uploadTask.whenComplete(() => callback());
        }
      }
    }
  }

  deleteAccount() {
    showDialog<String>(
        context: context,
        builder: (BuildContext context) {
          bool deletingAccount = false;
          return StatefulBuilder(builder: (context, setState) {
            return AlertDialog(
              title: const Text('Confirm Delete'),
              content: getDeletingText(deletingAccount),
              actions: deletingAccount
                  ? []
                  : [
                      TextButton(
                        onPressed: () => {Navigator.pop(context, 'Cancel')},
                        child: const Text('Cancel'),
                      ),
                      TextButton(
                        onPressed: () {
                          setState(() {
                            deletingAccount = true;
                            executeDeleteAccount();
                          });
                        },
                        child: const Text('OK'),
                      ),
                    ],
            );
          });
        });
  }

  executeDeleteAccount() async {
    PersonRepo personRepo;
    Person toDelete;
    Auditable deleted;

    deleted = Auditable(person: person!.getPersonSnapshot(), dateStamp: DateTime.now());

    personRepo = PersonRepo(personSnapshot: person!.getPersonSnapshot());
    toDelete = Person(
        documentId: person!.documentId,
        image: person!.image,
        firstName: person!.firstName,
        lastName: person!.lastName,
        disciplines: person!.disciplines,
        deleted: deleted);

    personRepo.delete(person: toDelete).then((value) async {
      imageRef = storageBaseRef.child(person!.getImagePathString());

      try {
        await imageRef.delete();
      } finally {
        FirebaseAuth.instance.currentUser!.delete().then((value) {
          SchedulerBinding.instance.addPostFrameCallback(
            (timeStamp) => Navigator.pushNamedAndRemoveUntil(context, AuthGate.route, (route) => false),
          );
        });
      }
    });
  }

  Widget getDeletingText(bool deletingAccount) {
    if (deletingAccount) {
      return const SizedBox(
        height: 110,
        child: Column(
          children: [
            Text('Deleting in progress. Please wait...'),
            Gap(32),
            Align(
              alignment: AlignmentDirectional.bottomCenter,
              child: Padding(padding: EdgeInsets.only(bottom: 16), child: CircularProgressIndicator()),
            ),
          ],
        ),
      );
    } else {
      return const Text(
          'Are you sure you want to delete your account? This action cannot be undone. \r\nOnce your account has been deleted you will be automatically logged out.');
    }
  }

  void _showBackDialog({required BuildContext context}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: const Text(
            'Are you sure you want to leave this page? Any unsaved changes will be lost',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                Navigator.pop(context); //pop the dialog
                Navigator.pushReplacementNamed(context, HomePage.route); //refresh the page on a call
              },
            ),
          ],
        );
      },
    );
  }

  bool canNavigateAway() {
    return MapHelp.equals(personMap, person!.toMap());
  }

  navigateHome() {
    if (canNavigateAway()) {
      Navigator.pushNamed(context, HomePage.route);
    } else {
      _showBackDialog(context: context);
    }
  }
}
