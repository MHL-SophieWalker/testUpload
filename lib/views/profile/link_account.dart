import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:hart_suite/helpers/ui/feedback_help.dart';
import 'package:hart_suite/helpers/ui/layout_help.dart';
import 'package:sign_in_button/sign_in_button.dart';

class LinkAccount extends StatelessWidget {
  static const route = '/link_account';

  const LinkAccount({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: const Text('Link Account'),
        ),
        body: getLinkAccountsGrid(context: context));
  }
}

Widget getLinkAccountsGrid({required BuildContext context}) {
  List<SignInButton> buttons = List.empty(growable: true);

  buttons.add(
    SignInButton(
      Buttons.google,
      onPressed: () => {
        linkGoogleAccount(context: context),
      },
      text: 'Link Google',
    ),
  );

  // buttons.add(SignInButton(
  //   Buttons.apple,
  //   onPressed: () => {},
  //   text: 'Link Apple',
  // ));

  buttons.add(SignInButton(
    Buttons.microsoft,
    onPressed: () => {
      linkMicrosoftAccount(context: context),
    },
    text: 'Link Microsoft',
    padding: kIsWeb ? const EdgeInsets.fromLTRB(0, 15, 0, 15) : const EdgeInsets.fromLTRB(0, 0, 0, 0),
  ));

  return Padding(
    padding: const EdgeInsets.all(8.0),
    child: GridView.builder(
      itemCount: buttons.length,
      shrinkWrap: true,
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: getColumnCount(context: context),
        mainAxisSpacing: 10,
        mainAxisExtent: 50,
        crossAxisSpacing: 10,
      ),
      itemBuilder: (context, index) {
        return buttons[index];
      },
    ),
  );
}

linkMicrosoftAccount({required BuildContext context}) async {
  final microsoftProvider = MicrosoftAuthProvider();
  microsoftProvider.setCustomParameters({'prompt': 'select_account'});

  try {
    if (kIsWeb) {
      await FirebaseAuth.instance.currentUser!.linkWithPopup(microsoftProvider);
    } else {
      await FirebaseAuth.instance.currentUser!.linkWithProvider(microsoftProvider);
    }
  } on FirebaseAuthException catch (e) {
    if (context.mounted) {
      FeedbackHelp.showSnackbar(
        context: context,
        message: getLinkAccountErrorMessage(ex: e),
        error: true,
        exception: e,
      );
    }
  }
}

linkGoogleAccount({required BuildContext context}) async {
  final googleProvider = GoogleAuthProvider();
  googleProvider.setCustomParameters({'prompt': 'select_account'});

  try {
    if (kIsWeb) {
      await FirebaseAuth.instance.currentUser!.linkWithPopup(googleProvider);
    } else {
      await FirebaseAuth.instance.currentUser!.linkWithProvider(googleProvider);
    }
  } on FirebaseAuthException catch (e) {
    if (context.mounted) {
      FeedbackHelp.showSnackbar(
        context: context,
        message: getLinkAccountErrorMessage(ex: e),
        error: true,
        exception: e,
      );
    }
  }
}

String getLinkAccountErrorMessage({required FirebaseAuthException ex}) {
  String errorMessage;

  switch (ex.code) {
    case "provider-already-linked":
      errorMessage = "The provider has already been linked to the user.";
      break;
    case "invalid-credential":
      errorMessage = "The provider's credential is not valid.";
      break;
    case "credential-already-in-use":
      errorMessage = "The account corresponding to the credential already exists, "
          "or is already linked to a Firebase User.";
      break;
    // See the API reference for the full list of error codes.
    default:
      errorMessage = "Unknown error.";
  }

  return errorMessage;
}
