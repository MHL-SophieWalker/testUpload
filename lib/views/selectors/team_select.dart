import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/map_help.dart';
import 'package:hart_suite/models/profile/team.dart';
import 'package:hart_suite/repos/profile/team_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/form/text_view.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';

class TeamSelect extends StatefulWidget {
  const TeamSelect({
    super.key,
    required this.customer,
    this.multiSelect = false,
    this.preselectedTeamIds = const [],
    this.preventRemovalOfPreSelected = false,
    this.exclusionIds = const [],
  });

  final String customer;
  final bool preventRemovalOfPreSelected, multiSelect; //Regardless of multiselect or not, the return type will be a list of people
  final List<String> preselectedTeamIds, exclusionIds;

  @override
  State<TeamSelect> createState() => _TeamSelectState();
}

class _TeamSelectState extends State<TeamSelect> {
  late Future<List<Team>> teams;
  late List<Team> selectedTeams, allTeams, filteredTeams;
  late TextView searchView;
  late bool refreshTeams, firstRun;

  @override
  void initState() {
    super.initState();
    teams = TeamRepo(customer: widget.customer).get(populate: true);

    selectedTeams = List.empty(growable: true);
    filteredTeams = List.empty(growable: true);

    searchView = TextView(label: 'Search Teams', decoration: StyleBase.getInputDecoration(), text: '');

    searchView.dataBind(callback: () => searchTeams(searchView.controller!.text));

    refreshTeams = true;
    firstRun = true;
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop) {
          if (!MapHelp.equalsList(widget.preselectedTeamIds, selectedTeams.map((person) => person.documentId!).toList())) {
            _showBackDialog(context: context);
          } else {
            SchedulerBinding.instance.addPostFrameCallback((_) {
              Navigator.pop(context);
            });

            return;
          }
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text(widget.multiSelect ? 'Select Teams' : 'Select Team'),
          actions: [
            IconButton(
              icon: const Icon(Icons.check),
              onPressed: () {
                Navigator.pop(context, selectedTeams);
              },
            ),
          ],
        ),
        body: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(8.0),
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.all(4),
                  child: searchView.child,
                ),
                FutureBuilder<List<Team>>(
                  future: teams,
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.done) {
                      if (snapshot.hasData) {
                        if (refreshTeams) {
                          allTeams = snapshot.data!;

                          if (widget.exclusionIds.isNotEmpty) {
                            allTeams.removeWhere((person) => widget.exclusionIds.contains(person.documentId));
                          }

                          if (firstRun && widget.preselectedTeamIds.isNotEmpty) {
                            selectedTeams = allTeams.where((person) => widget.preselectedTeamIds.contains(person.documentId)).toList();
                          }

                          filteredTeams = allTeams.where((person) => !selectedTeams.contains(person)).toList();

                          refreshTeams = false;
                        }

                        firstRun = false;

                        return Column(
                          children: [
                            ...buildSelectedTeams(),
                            ...buildTeams(),
                          ],
                        );
                      } else if (snapshot.hasError) {
                        ErrorHandler.logError(exception: snapshot.error, stack: snapshot.stackTrace);
                        return const Center(
                          child: Text('Cannot Find People - Please ensure you are connected to the internet and try again.'),
                        );
                      }
                    } else {
                      return const FutureBuilderLoader();
                    }

                    return const FutureBuilderLoader();
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  List<Widget> buildSelectedTeams() {
    List<Widget> cards;

    cards = List.empty(growable: true);

    for (var team in selectedTeams) {
      cards.add(
        ClickableCardItem(
          title: team.name,
          //leading: const Icon(Icons.groups),
          onTap: widget.preventRemovalOfPreSelected && widget.preselectedTeamIds.contains(team.documentId) ? null : () => unselectTeam(team: team),
          trailing: widget.preventRemovalOfPreSelected && widget.preselectedTeamIds.contains(team.documentId)
              ? const Tooltip(
                  message: 'Cannot Remove Preselected Team',
                  child: Icon(Icons.remove),
                )
              : const Tooltip(
                  message: 'Remove Team',
                  child: Icon(
                    Icons.close,
                    color: Colors.red,
                  ),
                ),
        ),
      );
    }

    return cards;
  }

  List<Widget> buildTeams() {
    List<Widget> cards;

    cards = List.empty(growable: true);

    for (var team in filteredTeams) {
      cards.add(
        ClickableCardItem(
          title: team.name,
          //leading: const Icon(Icons.groups),
          onTap: () => selectTeam(team: team),
          trailing: const Icon(
            Icons.add,
            color: Colors.green,
          ),
        ),
      );
    }

    if (cards.isEmpty && selectedTeams.isEmpty) {
      cards.add(
        const Center(
          child: Text('No Teams Found'),
        ),
      );
    }

    return cards;
  }

  searchTeams(String searchTerm) {
    if (searchTerm.isEmpty) {
      filteredTeams = allTeams;
    } else {
      filteredTeams = allTeams.where((team) => team.name.toLowerCase().contains(searchTerm.toLowerCase())).toList();
    }
    setState(() {});
  }

  selectTeam({required Team team}) {
    setState(() {
      if (widget.multiSelect) {
        selectedTeams.add(team);
      } else {
        selectedTeams = [team];
      }

      refreshTeams = true;
    });
  }

  unselectTeam({required Team team}) {
    setState(() {
      selectedTeams.remove(team);
      refreshTeams = true;
    });
  }

  void _showBackDialog({required BuildContext context}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: const Text(
            'Are you sure you want to leave this page? You have unsaved changes.',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                Navigator.pop(context); //pop the dialog
                Navigator.pop(context);
              },
            ),
          ],
        );
      },
    );
  }
}
