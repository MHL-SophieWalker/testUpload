import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/map_help.dart';
import 'package:hart_suite/models/actions/subcategory.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/models/actions/category.dart' as cat;
import 'package:hart_suite/repos/actions/category_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/form/text_view.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';

class SubCategorySelect extends StatefulWidget {
  const SubCategorySelect({
    super.key,
    required this.customer,
    required this.personSnapshot,
    this.multiSelect = false,
    this.preselectedCategoryIds = const [],
    this.preventRemovalOfPreSelected = false,
    this.exclusionIds = const [],
    required this.preselectedSubCategoryIds,
  });

  final String customer;
  final bool preventRemovalOfPreSelected, multiSelect; //Regardless of multiselect or not, the return type will be a list of people
  final List<String> preselectedCategoryIds, preselectedSubCategoryIds, exclusionIds;
  final PersonSnapshot personSnapshot;

  @override
  State<SubCategorySelect> createState() => _SubCategorySelectState();
}

class _SubCategorySelectState extends State<SubCategorySelect> {
  late Future<List<cat.Category?>> categories;
  late List<cat.Category?> selectedCategories, allCategories, filteredCategories;
  late TextView searchView;
  late bool refreshCategories, firstRun, showSubCats;
  late List<SubCategory> selectedSubCategories, filteredSubCategories, allSubCatsForCategory;

  @override
  void initState() {
    super.initState();
    categories = CategoryRepo(customer: widget.customer, personSnapshot: widget.personSnapshot).get(populate: true);

    selectedCategories = List.empty(growable: true);
    filteredCategories = List.empty(growable: true);
    selectedSubCategories = List.empty(growable: true);
    filteredSubCategories = List.empty(growable: true);
    allSubCatsForCategory = List.empty(growable: true);
    showSubCats = false;

    searchView = TextView(label: showSubCats ? 'Search SubCategories' : 'Search Categories', decoration: StyleBase.getInputDecoration(), text: '');

    searchView.dataBind(callback: () => searchCategories(searchView.controller!.text));

    refreshCategories = true;
    firstRun = true;
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop) {
          if (!MapHelp.equalsList(widget.preselectedSubCategoryIds, selectedSubCategories.map((subcat) => subcat.documentId!).toList())) {
            _showBackDialog(context: context);
          } else {
            SchedulerBinding.instance.addPostFrameCallback((_) {
              Navigator.pop(context);
            });

            return;
          }
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Select Categorisation'),
          actions: [
            IconButton(
              icon: const Icon(Icons.check),
              onPressed: () {
                Navigator.pop(context, selectedSubCategories);
              },
            ),
          ],
        ),
        body: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(8.0),
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.all(4),
                  child: searchView.child,
                ),
                FutureBuilder<List<cat.Category?>>(
                  future: categories,
                  builder: (context, snapshot) {
                    List<Widget> children;
                    if (snapshot.connectionState == ConnectionState.done) {
                      if (snapshot.hasData) {
                        if (refreshCategories) {
                          allCategories = snapshot.data!;

                          if (widget.exclusionIds.isNotEmpty) {
                            allCategories.removeWhere((category) => widget.exclusionIds.contains(category!.documentId));
                          }

                          if (firstRun && widget.preselectedCategoryIds.isNotEmpty) {
                            selectedCategories = allCategories.where((category) => widget.preselectedCategoryIds.contains(category!.documentId)).toList();
                          }

                          if (firstRun && widget.preselectedSubCategoryIds.isNotEmpty) {
                            selectedSubCategories = allCategories
                                .map((category) => category!.subCategories!.values)
                                .expand((element) => element)
                                .where((subCategory) => widget.preselectedSubCategoryIds.contains(subCategory.documentId))
                                .toList();

                            selectedCategories.addAll(allCategories
                                .where((category) =>
                                    category!.subCategories!.values.any((subCategory) => widget.preselectedSubCategoryIds.contains(subCategory.documentId)))
                                .toList());
                          }

                          selectedCategories = selectedCategories.toSet().toList();
                          selectedSubCategories = selectedSubCategories.toSet().toList();

                          initialiseFilteredLists();

                          refreshCategories = false;
                        }

                        firstRun = false;

                        if (showSubCats) {
                          children = [getReturnToCategories(), ...buildSelectedSubCategories(), ...buildSubCategories()];
                        } else {
                          children = [...buildSelectedCategories(), ...buildCategories()];
                        }

                        return Column(children: children);
                      } else if (snapshot.hasError) {
                        ErrorHandler.logError(exception: snapshot.error, stack: snapshot.stackTrace);
                        return const Center(
                          child: Text('Cannot Find Categories - Please ensure you are connected to the internet and try again.'),
                        );
                      }
                    } else {
                      return const FutureBuilderLoader();
                    }

                    return const FutureBuilderLoader();
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  List<Widget> buildSelectedCategories() {
    List<Widget> cards;

    cards = List.empty(growable: true);

    for (var category in selectedCategories.nonNulls) {
      cards.add(
        ClickableCardItem(
          title: category.name,
          //leading: const Icon(Icons.category),
          onTap: () => setState(() {
            allSubCatsForCategory = category.subCategories!.values.toList();
            initialiseFilteredLists();
            showSubCats = true;
            resetSearchView();
            searchView.controller!.text = '';
          }),
          trailing: const Icon(Icons.check, color: StyleBase.grey),
        ),
      );
    }

    return cards;
  }

  List<Widget> buildCategories() {
    List<Widget> cards;

    cards = List.empty(growable: true);

    for (var category in filteredCategories.nonNulls) {
      cards.add(
        ClickableCardItem(
          title: category.name,
          //leading: const Icon(Icons.category),
          onTap: () => setState(() {
            allSubCatsForCategory = category.subCategories!.values.toList();
            initialiseFilteredLists();
            showSubCats = true;
            resetSearchView();
            searchView.controller!.text = '';
          }),
          trailing: const Icon(Icons.chevron_right),
        ),
      );
    }

    if (cards.isEmpty && selectedCategories.isEmpty) {
      cards.add(
        const Center(
          child: Text('No Categories Found'),
        ),
      );
    }

    return cards;
  }

  List<Widget> buildSelectedSubCategories() {
    List<Widget> cards;

    cards = List.empty(growable: true);

    for (var ssc in selectedSubCategories) {
      if (allSubCatsForCategory.contains(ssc)) {
        cards.add(
          ClickableCardItem(
            title: ssc.name,
            //leading: const Icon(Icons.category),
            onTap:
                widget.preventRemovalOfPreSelected && widget.preselectedSubCategoryIds.contains(ssc.documentId) ? null : () => unselectSubCategory(subCat: ssc),
            trailing: widget.preventRemovalOfPreSelected && widget.preselectedSubCategoryIds.contains(ssc.documentId)
                ? const Tooltip(
                    message: 'Cannot Remove Preselected Subcategory',
                    child: Icon(Icons.remove),
                  )
                : const Tooltip(
                    message: 'Remove Subcategory',
                    child: Icon(
                      Icons.clear,
                      color: Colors.red,
                    ),
                  ),
          ),
        );
      }
    }

    return cards;
  }

  List<Widget> buildSubCategories() {
    List<Widget> cards;

    cards = List.empty(growable: true);

    for (var sub in filteredSubCategories) {
      cards.add(
        ClickableCardItem(
          title: sub.name,
          //leading: const Icon(Icons.category),
          onTap: () => selectSubCategory(subCat: sub),
          trailing: const Icon(
            Icons.add,
            color: Colors.green,
          ),
        ),
      );
    }

    if (cards.isEmpty && selectedSubCategories.isEmpty) {
      cards.add(
        const Center(
          child: Text('No SubCategories Found'),
        ),
      );
    }

    return cards;
  }

  searchCategories(String searchTerm) {
    if (searchTerm.isEmpty) {
      filteredCategories = allCategories.where((category) => !selectedCategories.contains(category)).toList();
      filteredSubCategories = allSubCatsForCategory.where((subCategory) => !selectedSubCategories.contains(subCategory)).toList();
    } else {
      filteredCategories =
          allCategories.where((category) => category!.name.toLowerCase().contains(searchTerm.toLowerCase()) && !selectedCategories.contains(category)).toList();
      filteredSubCategories = allSubCatsForCategory
          .where((subCategory) => subCategory.name.toLowerCase().contains(searchTerm.toLowerCase()) && !selectedSubCategories.contains(subCategory))
          .toList();
    }
    setState(() {});
  }

  selectSubCategory({required SubCategory subCat}) {
    setState(() {
      if (widget.multiSelect) {
        selectedSubCategories.add(subCat);
        if (!selectedCategories.contains(allCategories.firstWhere((category) => category?.documentId == subCat.categoryId))) {
          selectedCategories.add(allCategories.firstWhere((category) => category?.documentId == subCat.categoryId));
        }
      } else {
        selectedSubCategories = [subCat];
        selectedCategories = [allCategories.firstWhere((category) => category?.documentId == subCat.categoryId)];
      }

      refreshCategories = true;
    });
  }

  unselectSubCategory({required SubCategory subCat}) {
    setState(() {
      selectedSubCategories.remove(subCat);
      refreshCategories = true;
    });
  }

  void _showBackDialog({required BuildContext context}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: const Text(
            'Are you sure you want to leave this page? You have unsaved changes.',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                Navigator.pop(context); //pop the dialog
                Navigator.pop(context);
              },
            ),
          ],
        );
      },
    );
  }

  Widget getReturnToCategories() {
    Widget widg;

    widg = Align(
      alignment: Alignment.centerLeft,
      child: TextButton(
          onPressed: () => setState(() {
                filteredSubCategories.clear();
                allSubCatsForCategory.clear();
                refreshCategories = true;
                showSubCats = false;
                resetSearchView();
                searchView.controller!.text = '';
              }),
          child: const Text('< Return to Categories')),
    );

    return widg;
  }

  void initialiseFilteredLists() {
    filteredCategories = allCategories.where((category) => !selectedCategories.contains(category)).toList();
    filteredSubCategories = allSubCatsForCategory.where((subCategory) => !selectedSubCategories.contains(subCategory)).toList();
    filteredSubCategories.sort((a, b) => a.name.compareTo(b.name));
  }

  resetSearchView() {
    searchView = TextView(label: showSubCats ? 'Search SubCategories' : 'Search Categories', decoration: StyleBase.getInputDecoration(), text: '');

    searchView.dataBind(callback: () => searchCategories(searchView.controller!.text));
  }
}
