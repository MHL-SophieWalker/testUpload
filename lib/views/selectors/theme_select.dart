import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/map_help.dart';
import 'package:hart_suite/helpers/ui/icon_help.dart';
import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/repos/discipline/discipline_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/form/text_view.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';

class ThemeSelect extends StatefulWidget {
  const ThemeSelect({
    super.key,
    required this.customer,
    required this.personSnapshot,
    this.multiSelect = false,
    this.preselectedThemeIds = const [],
    this.preventRemovalOfPreSelected = false,
    this.exclusionIds = const [],
  });

  final String customer;
  final bool preventRemovalOfPreSelected, multiSelect; //Regardless of multiselect or not, the return type will be a list of people
  final List<String> preselectedThemeIds, exclusionIds;
  final PersonSnapshot personSnapshot;

  @override
  State<ThemeSelect> createState() => _ThemeSelectState();
}

class _ThemeSelectState extends State<ThemeSelect> {
  late Future<List<Discipline>> themes;
  late List<Discipline> selectedThemes, allThemes, filteredThemes;
  late TextView searchView;
  late bool refreshThemes, firstRun;

  @override
  void initState() {
    super.initState();
    themes = DisciplineRepo(personSnapshot: widget.personSnapshot).get();

    selectedThemes = List.empty(growable: true);
    filteredThemes = List.empty(growable: true);

    searchView = TextView(label: 'Search Themes', decoration: StyleBase.getInputDecoration(), text: '');

    searchView.dataBind(callback: () => searchThemes(searchView.controller!.text));

    refreshThemes = true;
    firstRun = true;
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop) {
          if (!MapHelp.equalsList(widget.preselectedThemeIds, selectedThemes.map((theme) => theme.documentId!).toList())) {
            _showBackDialog(context: context);
          } else {
            SchedulerBinding.instance.addPostFrameCallback((_) {
              Navigator.pop(context);
            });

            return;
          }
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text(widget.multiSelect ? 'Select Themes' : 'Select Theme'),
          actions: [
            IconButton(
              icon: const Icon(Icons.check),
              onPressed: () {
                Navigator.pop(context, selectedThemes);
              },
            ),
          ],
        ),
        body: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(8.0),
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.all(4),
                  child: searchView.child,
                ),
                FutureBuilder<List<Discipline>>(
                  future: themes,
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.done) {
                      if (snapshot.hasData) {
                        if (refreshThemes) {
                          allThemes = snapshot.data!;

                          if (widget.exclusionIds.isNotEmpty) {
                            allThemes.removeWhere((theme) => widget.exclusionIds.contains(theme.documentId));
                          }

                          if (firstRun && widget.preselectedThemeIds.isNotEmpty) {
                            selectedThemes = allThemes.where((theme) => widget.preselectedThemeIds.contains(theme.documentId)).toList();
                          }

                          filteredThemes = allThemes.where((theme) => !selectedThemes.contains(theme)).toList();

                          refreshThemes = false;
                        }

                        firstRun = false;

                        return Column(
                          children: [
                            ...buildSelectedThemes(),
                            ...buildThemes(),
                          ],
                        );
                      } else if (snapshot.hasError) {
                        ErrorHandler.logError(exception: snapshot.error, stack: snapshot.stackTrace);
                        return const Center(
                          child: Text('Cannot Find Themes - Please ensure you are connected to the internet and try again.'),
                        );
                      }
                    } else {
                      return const FutureBuilderLoader();
                    }

                    return const FutureBuilderLoader();
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  List<Widget> buildSelectedThemes() {
    List<Widget> cards;

    cards = List.empty(growable: true);

    for (var theme in selectedThemes) {
      cards.add(
        ClickableCardItem(
          title: theme.name,
          leading: IconHelp.getIconFromString(name: theme.iconCode, semanticLabel: theme.name),
          onTap: widget.preventRemovalOfPreSelected && widget.preselectedThemeIds.contains(theme.documentId) ? null : () => unselectTheme(theme: theme),
          trailing: widget.preventRemovalOfPreSelected && widget.preselectedThemeIds.contains(theme.documentId)
              ? const Tooltip(
                  message: 'Cannot Remove Preselected Theme',
                  child: Icon(Icons.remove),
                )
              : const Tooltip(
                  message: 'Remove Theme',
                  child: Icon(
                    Icons.close,
                    color: Colors.red,
                  ),
                ),
        ),
      );
    }

    return cards;
  }

  List<Widget> buildThemes() {
    List<Widget> cards;

    cards = List.empty(growable: true);

    for (var theme in filteredThemes) {
      cards.add(
        ClickableCardItem(
          title: theme.name,
          leading: IconHelp.getIconFromString(name: theme.iconCode, semanticLabel: theme.name),
          onTap: () => selectArea(theme: theme),
          trailing: const Icon(
            Icons.add,
            color: Colors.green,
          ),
        ),
      );
    }

    if (cards.isEmpty && selectedThemes.isEmpty) {
      cards.add(
        const Center(
          child: Text('No Themes Found'),
        ),
      );
    }

    return cards;
  }

  searchThemes(String searchTerm) {
    if (searchTerm.isEmpty) {
      filteredThemes = allThemes;
    } else {
      filteredThemes = allThemes.where((theme) => theme.name.toLowerCase().contains(searchTerm.toLowerCase())).toList();
    }
    setState(() {});
  }

  selectArea({required Discipline theme}) {
    setState(() {
      if (widget.multiSelect) {
        selectedThemes.add(theme);
      } else {
        selectedThemes = [theme];
      }

      refreshThemes = true;
    });
  }

  unselectTheme({required Discipline theme}) {
    setState(() {
      selectedThemes.remove(theme);
      refreshThemes = true;
    });
  }

  void _showBackDialog({required BuildContext context}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: const Text(
            'Are you sure you want to leave this page? You have unsaved changes.',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                Navigator.pop(context); //pop the dialog
                Navigator.pop(context);
              },
            ),
          ],
        );
      },
    );
  }
}
