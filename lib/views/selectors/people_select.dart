import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/map_help.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/widgets/form/text_view.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/profile/profile_card_with_actions.dart';

class PeopleSelect extends StatefulWidget {
  const PeopleSelect({
    super.key,
    required this.customer,
    this.multiSelect = false,
    this.preselectedPeopleIds = const [],
    this.preventRemovalOfPreSelected = false,
    this.exclusionIds = const [],
  });

  final String customer;
  final bool preventRemovalOfPreSelected, multiSelect; //Regardless of multiselect or not, the return type will be a list of people
  final List<String> preselectedPeopleIds, exclusionIds;

  @override
  State<PeopleSelect> createState() => _PeopleSelectState();
}

class _PeopleSelectState extends State<PeopleSelect> {
  late Future<List<Person>> people;
  late List<Person> selectedPeople, allPeople, filteredPeople;
  late TextView searchView;
  late bool refreshPeople, firstRun;

  @override
  void initState() {
    super.initState();
    people = PersonRepo().getByCustomer(customer: widget.customer, populate: true);

    selectedPeople = List.empty(growable: true);
    filteredPeople = List.empty(growable: true);

    searchView = TextView(label: 'Search People', decoration: StyleBase.getInputDecoration(), text: '');

    searchView.dataBind(callback: () => searchPeople(searchView.controller!.text));

    refreshPeople = true;
    firstRun = true;
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop) {
          if (!MapHelp.equalsList(widget.preselectedPeopleIds, selectedPeople.map((person) => person.documentId!).toList())) {
            _showBackDialog(context: context);
          } else {
            SchedulerBinding.instance.addPostFrameCallback((_) {
              Navigator.pop(context);
            });

            return;
          }
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text(widget.multiSelect ? 'Select People' : 'Select Person'),
          actions: [
            IconButton(
              icon: const Icon(Icons.check),
              onPressed: () {
                Navigator.pop(context, selectedPeople);
              },
            ),
          ],
        ),
        body: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(8.0),
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.all(4),
                  child: searchView.child,
                ),
                FutureBuilder<List<Person>>(
                  future: people,
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.done) {
                      if (snapshot.hasData) {
                        if (refreshPeople) {
                          allPeople = snapshot.data!;

                          if (widget.exclusionIds.isNotEmpty) {
                            allPeople.removeWhere((person) => widget.exclusionIds.contains(person.documentId));
                          }

                          if (firstRun && widget.preselectedPeopleIds.isNotEmpty) {
                            selectedPeople = allPeople.where((person) => widget.preselectedPeopleIds.contains(person.documentId)).toList();
                          }

                          filteredPeople = allPeople.where((person) => !selectedPeople.contains(person)).toList();

                          refreshPeople = false;
                        }

                        firstRun = false;

                        return Column(
                          children: [
                            ...buildSelectedPeople(),
                            ...buildPeople(),
                          ],
                        );
                      } else if (snapshot.hasError) {
                        ErrorHandler.logError(exception: snapshot.error, stack: snapshot.stackTrace);
                        return const Center(
                          child: Text('Cannot Find People - Please ensure you are connected to the internet and try again.'),
                        );
                      }
                    } else {
                      return const FutureBuilderLoader();
                    }

                    return const FutureBuilderLoader();
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  List<Widget> buildSelectedPeople() {
    List<Widget> cards;
    bool preventClick;

    cards = List.empty(growable: true);

    for (var pers in selectedPeople) {
      preventClick = widget.preventRemovalOfPreSelected && widget.preselectedPeopleIds.contains(pers.documentId);

      cards.add(
        MouseRegion(
          cursor: preventClick ? SystemMouseCursors.basic : SystemMouseCursors.click,
          child: GestureDetector(
            onTap: preventClick ? null : () => unselectPerson(person: pers),
            child: ProfileCardWithActions(user: pers, buttons: [
              preventClick
                  ? const Tooltip(
                      message: 'Cannot Remove Preselected Person',
                      child: IconButton(
                        onPressed: null,
                        icon: Icon(
                          Icons.clear,
                          color: Colors.grey,
                        ),
                      ),
                    )
                  : Tooltip(
                      message: 'Remove Person',
                      child: IconButton(
                        onPressed: () => unselectPerson(person: pers),
                        icon: const Icon(
                          Icons.clear,
                          color: Colors.red,
                        ),
                      ),
                    )
            ]),
          ),
        ),
      );
    }

    return cards;
  }

  List<Widget> buildPeople() {
    List<Widget> cards;

    cards = List.empty(growable: true);

    for (var pers in filteredPeople) {
      cards.add(
        MouseRegion(
          cursor: SystemMouseCursors.click,
          child: GestureDetector(
            onTap: () => selectPerson(person: pers),
            child: ProfileCardWithActions(user: pers, buttons: [
              IconButton(
                onPressed: () => selectPerson(person: pers),
                icon: const Icon(
                  Icons.add,
                  color: StyleBase.successGreen,
                ),
              )
            ]),
          ),
        ),
      );
    }

    if (cards.isEmpty && selectedPeople.isEmpty) {
      cards.add(
        const Center(
          child: Text('No People Found'),
        ),
      );
    }

    return cards;
  }

  selectPerson({required Person person}) {
    setState(() {
      if (widget.multiSelect) {
        selectedPeople.add(person);
      } else {
        selectedPeople = [person];
      }

      refreshPeople = true;
    });
  }

  unselectPerson({required Person person}) {
    setState(() {
      selectedPeople.remove(person);

      refreshPeople = true;
    });
  }

  searchPeople(String query) {
    setState(() {
      if (query.isEmpty) {
        filteredPeople = allPeople;
      } else {
        filteredPeople = allPeople.where((person) => person.fullName.toLowerCase().contains(query.toLowerCase()) && !selectedPeople.contains(person)).toList();
      }
    });
  }

  void _showBackDialog({required BuildContext context}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: const Text(
            'Are you sure you want to leave this page? You have unsaved changes.',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                Navigator.pop(context); //pop the dialog
                Navigator.pop(context);
              },
            ),
          ],
        );
      },
    );
  }
}
