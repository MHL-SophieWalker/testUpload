import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/map_help.dart';
import 'package:hart_suite/models/area/area.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/repos/area/area_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/form/text_view.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';

class AreaSelect extends StatefulWidget {
  const AreaSelect({
    super.key,
    required this.customer,
    required this.personSnapshot,
    this.multiSelect = false,
    this.preselectedAreaIds = const [],
    this.preventRemovalOfPreSelected = false,
    this.exclusionIds = const [],
  });

  final String customer;
  final bool preventRemovalOfPreSelected, multiSelect; //Regardless of multiselect or not, the return type will be a list of people
  final List<String> preselectedAreaIds, exclusionIds;
  final PersonSnapshot personSnapshot;

  @override
  State<AreaSelect> createState() => _AreaSelectState();
}

class _AreaSelectState extends State<AreaSelect> {
  late Future<List<Area>> areas;
  late List<Area> selectedAreas, allAreas, filteredAreas;
  late TextView searchView;
  late bool refreshAreas, firstRun;

  @override
  void initState() {
    super.initState();
    areas = AreaRepo(customer: widget.customer, personSnapshot: widget.personSnapshot).get(populate: true);

    selectedAreas = List.empty(growable: true);
    filteredAreas = List.empty(growable: true);

    searchView = TextView(label: 'Search Areas', decoration: StyleBase.getInputDecoration(), text: '');

    searchView.dataBind(callback: () => searchAreas(searchView.controller!.text));

    refreshAreas = true;
    firstRun = true;
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop) {
          if (!MapHelp.equalsList(widget.preselectedAreaIds, selectedAreas.map((area) => area.documentId!).toList())) {
            _showBackDialog(context: context);
          } else {
            SchedulerBinding.instance.addPostFrameCallback((_) {
              Navigator.pop(context);
            });

            return;
          }
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text(widget.multiSelect ? 'Select Areas' : 'Select Area'),
          actions: [
            IconButton(
              icon: const Icon(Icons.check),
              onPressed: () {
                Navigator.pop(context, selectedAreas);
              },
            ),
          ],
        ),
        body: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(8.0),
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.all(4),
                  child: searchView.child,
                ),
                FutureBuilder<List<Area>>(
                  future: areas,
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.done) {
                      if (snapshot.hasData) {
                        if (refreshAreas) {
                          allAreas = snapshot.data!;

                          if (widget.exclusionIds.isNotEmpty) {
                            allAreas.removeWhere((area) => widget.exclusionIds.contains(area.documentId));
                          }

                          if (firstRun && widget.preselectedAreaIds.isNotEmpty) {
                            selectedAreas = allAreas.where((area) => widget.preselectedAreaIds.contains(area.documentId)).toList();
                          }

                          filteredAreas = allAreas.where((area) => !selectedAreas.contains(area)).toList();

                          refreshAreas = false;
                        }

                        firstRun = false;

                        return Column(
                          children: [
                            ...buildSelectedAreas(),
                            ...buildAreas(),
                          ],
                        );
                      } else if (snapshot.hasError) {
                        ErrorHandler.logError(exception: snapshot.error, stack: snapshot.stackTrace);
                        return const Center(
                          child: Text('Cannot Find Areas - Please ensure you are connected to the internet and try again.'),
                        );
                      }
                    } else {
                      return const FutureBuilderLoader();
                    }

                    return const FutureBuilderLoader();
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  List<Widget> buildSelectedAreas() {
    List<Widget> cards;

    cards = List.empty(growable: true);

    for (var area in selectedAreas) {
      cards.add(
        ClickableCardItem(
          title: '${area.name} - ${area.path}',
          //leading: const Icon(Icons.groups),
          onTap: widget.preventRemovalOfPreSelected && widget.preselectedAreaIds.contains(area.documentId) ? null : () => unselectArea(area: area),
          trailing: widget.preventRemovalOfPreSelected && widget.preselectedAreaIds.contains(area.documentId)
              ? const Tooltip(
                  message: 'Cannot Remove Preselected Area',
                  child: Icon(Icons.remove),
                )
              : const Tooltip(
                  message: 'Remove Area',
                  child: Icon(
                    Icons.close,
                    color: Colors.red,
                  ),
                ),
        ),
      );
    }

    return cards;
  }

  List<Widget> buildAreas() {
    List<Widget> cards;

    cards = List.empty(growable: true);

    for (var area in filteredAreas) {
      cards.add(
        ClickableCardItem(
          title: '${area.name} - ${area.path}',
          //leading: const Icon(Icons.groups),
          onTap: () => selectArea(area: area),
          trailing: const Icon(
            Icons.add,
            color: Colors.green,
          ),
        ),
      );
    }

    if (cards.isEmpty && selectedAreas.isEmpty) {
      cards.add(
        const Center(
          child: Text('No Areas Found'),
        ),
      );
    }

    return cards;
  }

  searchAreas(String searchTerm) {
    if (searchTerm.isEmpty) {
      filteredAreas = allAreas;
    } else {
      filteredAreas = allAreas.where((area) => area.name.toLowerCase().contains(searchTerm.toLowerCase())).toList();
    }
    setState(() {});
  }

  selectArea({required Area area}) {
    setState(() {
      if (widget.multiSelect) {
        selectedAreas.add(area);
      } else {
        selectedAreas = [area];
      }

      refreshAreas = true;
    });
  }

  unselectArea({required Area area}) {
    setState(() {
      selectedAreas.remove(area);
      refreshAreas = true;
    });
  }

  void _showBackDialog({required BuildContext context}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: const Text(
            'Are you sure you want to leave this page? You have unsaved changes.',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                Navigator.pop(context); //pop the dialog
                Navigator.pop(context);
              },
            ),
          ],
        );
      },
    );
  }
}
