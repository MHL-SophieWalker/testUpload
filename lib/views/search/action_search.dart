import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/models/actions/action.dart' as act;
import 'package:hart_suite/repos/actions/action_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/widgets/form/text_view.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';

class ActionSearch extends StatefulWidget {
  const ActionSearch({
    super.key,
    required this.customer,
    required this.personSnapshot,
    this.multiSelect = false,
    this.preselectedActionIds = const [],
    this.preventRemovalOfPreSelected = false,
    this.exclusionIds = const [],
  });

  final String customer;
  final bool preventRemovalOfPreSelected, multiSelect; //Regardless of multiselect or not, the return type will be a list of people
  final List<String> preselectedActionIds, exclusionIds;
  final PersonSnapshot personSnapshot;

  @override
  State<ActionSearch> createState() => _ActionSearchState();
}

class _ActionSearchState extends State<ActionSearch> {
  late List<act.Action> selectedActions, allActions, filteredActions;
  late TextView searchView;
  late bool refreshActions, firstRun;
  late Filter filter;
  late Future<List<act.Action?>> actions;

  @override
  void initState() {
    super.initState();

    selectedActions = List.empty(growable: true);
    filteredActions = List.empty(growable: true);
    actions = searchActions('');

    searchView = TextView(label: 'Search Actions', decoration: StyleBase.getInputDecoration(), text: '', autoFocus: true);

    searchView.dataBind(callback: () {
      actions = searchActions(searchView.controller!.text);
      setState(() {});
    });

    refreshActions = true;
    firstRun = true;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Search Actions'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Padding(
              padding: const EdgeInsets.fromLTRB(0, 4, 0, 4),
              child: searchView.child,
            ),
            FutureBuilder(
              future: actions,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const FutureBuilderLoader();
                } else if (snapshot.hasError) {
                  ErrorHandler.logError(exception: snapshot.error as Exception, stack: snapshot.stackTrace);
                  return const Center(child: Text('An error occurred'));
                } else if (snapshot.hasData) {
                  allActions = snapshot.data as List<act.Action>;

                  return Expanded(
                    child: SingleChildScrollView(
                      child: ListView.builder(
                        shrinkWrap: true,
                        itemCount: allActions.length,
                        itemBuilder: (context, index) {
                          act.Action action = allActions[index];
                          return Card(
                            color: Theme.of(context).cardColor,
                            child: ListTile(
                              title: Text(action.title),
                              subtitle: Text(action.description, maxLines: 1, overflow: TextOverflow.ellipsis),
                              onTap: () {
                                if (widget.multiSelect) {
                                  setState(() {
                                    selectedActions.add(action);
                                    refreshActions = true;
                                  });
                                } else {
                                  Navigator.pop(context, [action]);
                                }
                              },
                            ),
                          );
                        },
                      ),
                    ),
                  );
                } else {
                  return const Center(child: Text('No actions found'));
                }
              },
            )
          ],
        ),
      ),
    );
  }

  Future<List<act.Action?>> searchActions(String? searchTerm) async {
    Filter filter, remove, send;
    ActionRepo repo;
    List<act.Action?> actions;

    if (searchTerm == null || searchTerm.isEmpty) {
      filter = Filter('wildTags', arrayContains: '');
    } else {
      filter = Filter('wildTags', arrayContains: searchTerm.toLowerCase());
    }

    remove = Filter('documentId', whereNotIn: widget.exclusionIds);

    if (widget.exclusionIds.isNotEmpty) {
      send = Filter.and(filter, remove);
    } else {
      send = filter;
    }

    repo = ActionRepo(customer: widget.customer, personSnapshot: widget.personSnapshot);

    actions = await repo.getByFilterWithOrderBy(filter: send, orderBy: 'refNum', limit: 12);

    return actions;
  }
}
