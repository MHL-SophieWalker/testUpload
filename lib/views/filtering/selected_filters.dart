import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/models/filterable/icon_text.dart';
import 'package:hart_suite/style/style_base.dart';

class SelectedFilters extends StatefulWidget {
  final List<IconText> filters;
  final Function onTap;
  final double sidebarWidth;

  const SelectedFilters({
    super.key,
    required this.filters,
    required this.onTap,
    required this.sidebarWidth,
  });

  @override
  State<SelectedFilters> createState() => _SelectedFiltersState();
}

class _SelectedFiltersState extends State<SelectedFilters> {
  @override
  Widget build(BuildContext context) {
    return MouseRegion(
      cursor: SystemMouseCursors.click,
      child: GestureDetector(
        onTap: () => widget.onTap(),
        child: Container(
          decoration: BoxDecoration(
            border: Border.all(
              color: StyleBase.lightGrey,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(8),
          ),
          padding: const EdgeInsets.all(8),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.filter_alt_outlined,
                size: 28,
              ),
              const Gap(4),
              Expanded(
                child: SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    children: [
                      getFilterText(),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget getFilterText() {
    Widget row;
    List<Widget> children = [];

    for (IconText filter in widget.filters) {
      children.add(
        Tooltip(
          message: filter.tooltip ?? filter.text,
          child: Padding(
            padding: const EdgeInsets.only(right: 6),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  filter.icon,
                  size: 28,
                ),
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 8,
                    vertical: 4,
                  ),
                  decoration: filter.isOn
                      ? BoxDecoration(
                          color: StyleBase.lightGrey,
                          borderRadius: BorderRadius.circular(20),
                        )
                      : null,
                  child: Text(
                    filter.text,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      );
    }

    row = Row(
      children: children,
    );

    return row;
  }
}
