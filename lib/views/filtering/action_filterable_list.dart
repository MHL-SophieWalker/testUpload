import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/helpers/class/date_help.dart';
import 'package:hart_suite/models/actions/subcategory.dart';
import 'package:hart_suite/models/area/area.dart';
import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/views/data_entry/text_entry.dart';
import 'package:hart_suite/widgets/filtering/filterable.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/models/profile/team.dart';
import 'package:hart_suite/views/selectors/area_select.dart';
import 'package:hart_suite/views/selectors/people_select.dart';
import 'package:hart_suite/views/selectors/subcategory_select.dart';
import 'package:hart_suite/views/selectors/team_select.dart';
import 'package:hart_suite/views/selectors/theme_select.dart';
import 'package:hart_suite/widgets/misc/number_circle_coloured.dart';

class ActionFilterableList extends StatefulWidget {
  final String customer;
  final PersonSnapshot personSnapshot;
  final List<Person> people;
  final List<Team> teams;
  final Area? area;
  final List<Discipline> themes;
  final SubCategory? subcategory;
  final DateTime? from, to;
  final String reference;

  const ActionFilterableList({
    super.key,
    required this.customer,
    required this.personSnapshot,
    this.people = const [],
    this.teams = const [],
    this.area,
    this.themes = const [],
    this.subcategory,
    this.from,
    this.to,
    this.reference = '',
  });

  @override
  State<ActionFilterableList> createState() => _ActionFilterableListState();
}

class _ActionFilterableListState extends State<ActionFilterableList> {
  double numberIconHeight = 30;
  late List<Person> people;
  late List<Team> teams;
  late Area? area;
  late List<Discipline> themes;
  late SubCategory? subcategory;
  late DateTime? from, to;
  late String reference;
  late List<String> preselectedPeopleIds, preselectedAreaIds, preselectedTeamIds, preselectedThemeIds, preselectedSubcategoryIds;

  @override
  void initState() {
    super.initState();
    people = widget.people;
    teams = widget.teams;
    area = widget.area;
    themes = widget.themes;
    subcategory = widget.subcategory;
    from = widget.from;
    to = widget.to;
    reference = widget.reference;

    preselectedPeopleIds = widget.people.map((e) => e.documentId as String).toList();
    preselectedTeamIds = widget.teams.map((e) => e.documentId as String).toList();
    preselectedAreaIds = widget.area == null ? [] : [widget.area!.documentId as String];
    preselectedThemeIds = widget.themes.map((e) => e.documentId as String).toList();
    preselectedSubcategoryIds = widget.subcategory == null ? [] : [widget.subcategory!.documentId as String];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Filter Actions'),
        actions: [
          TextButton(
            onPressed: () {
              setState(() {
                people = [];
                teams = [];
                area = null;
                themes = [];
                subcategory = null;
                from = null;
                to = null;
                reference = '';
              });
            },
            child: const Text(
              'Clear',
              style: TextStyle(color: Colors.white),
            ),
          ),
          IconButton(
            icon: const Icon(Icons.check),
            onPressed: () {
              Navigator.pop(
                context,
                {
                  'people': people,
                  'teams': teams,
                  'area': area,
                  'themes': themes,
                  'subcategory': subcategory,
                  'from': from,
                  'to': to,
                  'reference': reference,
                },
              );
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(6),
        child: SingleChildScrollView(
          child: Column(
            children: [
              getRefFilter(),
              const Gap(4),
              getPersonFilter(),
              const Gap(4),
              getTeamFilter(),
              const Gap(4),
              getAreaFilter(),
              const Gap(4),
              getCategorisationFilter(),
              const Gap(4),
              getThemeFilter(),
              const Gap(4),
              getFromFilter(),
              const Gap(4),
              getToFilter(),
            ],
          ),
        ),
      ),
    );
  }

  Widget getRefFilter() {
    return Filterable(
      leading: const Icon(Icons.numbers),
      title: const Text('Reference'),
      display: Padding(
        padding: const EdgeInsets.fromLTRB(0, 4, 14, 4),
        child: Text(
          reference.isEmpty ? 'All' : '#$reference',
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
      onTap: () => Navigator.push(
        context,
        MaterialPageRoute(builder: (context) {
          return TextEntry(
            title: 'Reference',
            label: 'Enter reference number',
            type: TextInputType.number,
            initialValue: reference,
          );
        }),
      ).then((value) {
        if (value != null) {
          setState(() {
            reference = value.toString().trim();
          });
        }
      }),
    );
  }

  Widget getPersonFilter() {
    return Filterable(
      leading: const Icon(Icons.person),
      title: const Text('People'),
      display: getDisplay(people.length, 'People'),
      onTap: () => Navigator.push(
        context,
        MaterialPageRoute(builder: (context) {
          return PeopleSelect(
            customer: widget.customer,
            preselectedPeopleIds: getSelectedIds(people, preselectedPeopleIds),
            multiSelect: true,
          );
        }),
      ).then((value) {
        if (value != null) {
          setState(() {
            people = value;
          });
        }
      }),
    );
  }

  Widget getTeamFilter() {
    return Filterable(
      leading: const Icon(Icons.group),
      title: const Text('Teams'),
      display: getDisplay(teams.length, 'Teams'),
      onTap: () => Navigator.push(context, MaterialPageRoute(
        builder: (context) {
          return TeamSelect(
            customer: widget.customer,
            preselectedTeamIds: getSelectedIds(teams, preselectedTeamIds),
            multiSelect: true,
          );
        },
      )).then(
        (value) {
          if (value != null) {
            setState(() {
              teams = value;
            });
          }
        },
      ),
    );
  }

  Widget getAreaFilter() {
    return Filterable(
      leading: const Icon(Icons.apartment),
      title: const Text('Area'),
      display: SizedBox(
        height: numberIconHeight,
        child: Padding(
          padding: const EdgeInsets.fromLTRB(0, 4, 14, 0),
          child: Text(
            area?.name ?? 'All',
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ),
      onTap: () => Navigator.push(context, MaterialPageRoute(
        builder: (context) {
          return AreaSelect(
            customer: widget.customer,
            preselectedAreaIds: getSelectedIds(area == null ? [] : [area], preselectedAreaIds),
            multiSelect: false,
            personSnapshot: widget.personSnapshot,
          );
        },
      )).then(
        (value) {
          if (value != null) {
            setState(() {
              if (value.isNotEmpty) {
                area = value[0];
              } else {
                area = null;
              }
            });
          }
        },
      ),
    );
  }

  Widget getCategorisationFilter() {
    return Filterable(
      leading: const Icon(Icons.category),
      title: const Text('Categorisation'),
      display: SizedBox(
        height: numberIconHeight,
        child: Padding(
          padding: const EdgeInsets.fromLTRB(0, 4, 14, 0),
          child: Text(
            subcategory?.name ?? 'All',
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ),
      onTap: () => Navigator.push(context, MaterialPageRoute(
        builder: (context) {
          return SubCategorySelect(
            customer: widget.customer,
            preselectedSubCategoryIds: getSelectedIds(subcategory == null ? [] : [subcategory], preselectedSubcategoryIds),
            multiSelect: false,
            personSnapshot: widget.personSnapshot,
          );
        },
      )).then(
        (value) {
          if (value != null) {
            setState(() {
              if (value.isNotEmpty) {
                subcategory = value[0];
              } else {
                subcategory = null;
              }
            });
          }
        },
      ),
    );
  }

  Widget getThemeFilter() {
    return Filterable(
      leading: const Icon(Icons.group_work_outlined),
      title: const Text('Themes'),
      display: getDisplay(themes.length, 'Themes'),
      onTap: () => Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) {
            return ThemeSelect(
              customer: widget.customer,
              preselectedThemeIds: getSelectedIds(themes, preselectedThemeIds),
              multiSelect: true,
              personSnapshot: widget.personSnapshot,
            );
          },
        ),
      ).then(
        (value) {
          if (value != null) {
            setState(() {
              themes = value;
            });
          }
        },
      ),
    );
  }

  Widget getFromFilter() {
    return Filterable(
      leading: const Icon(Icons.date_range),
      title: const Text('From'),
      display: SizedBox(
        height: numberIconHeight,
        child: Padding(
          padding: const EdgeInsets.fromLTRB(0, 4, 14, 0),
          child: Text(
            from == null ? 'Not Set' : DateHelp.formatDateOnly(from!),
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ),
      onTap: () => showDatePicker(
        context: context,
        initialDate: from ?? DateTime.now(),
        firstDate: DateTime(2000),
        lastDate: to ?? DateTime(2100),
      ).then(
        (value) {
          if (value != null) {
            setState(() {
              from = value;
            });
          }
        },
      ),
    );
  }

  Widget getToFilter() {
    return Filterable(
      leading: const Icon(Icons.calendar_month),
      title: const Text('To'),
      display: SizedBox(
        height: numberIconHeight,
        child: Padding(
          padding: const EdgeInsets.fromLTRB(0, 4, 14, 0),
          child: Text(
            to == null ? 'Not Set' : DateHelp.formatDateOnly(to!),
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ),
      onTap: () => showDatePicker(
        context: context,
        initialDate: to ?? DateTime.now(),
        firstDate: from ?? DateTime(2000),
        lastDate: DateTime(2100),
      ).then(
        (value) {
          if (value != null) {
            setState(() {
              to = value;
            });
          }
        },
      ),
    );
  }

  Widget getDisplay(int length, String message) {
    Widget widg;

    if (length == 0) {
      widg = const Padding(
        padding: EdgeInsets.fromLTRB(0, 4, 14, 4),
        child: Text(
          'All',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w500,
          ),
        ),
      );
    } else {
      widg = SizedBox(
        height: numberIconHeight,
        child: NumberCircleColoured(
          message: message,
          color: Colors.white,
          number: length,
        ),
      );
    }

    return widg;
  }

  List<String> getSelectedIds(List<dynamic> items, List<String> ids) {
    return (items.map((e) => e.documentId as String).toList() + ids).toSet().toList();
  }
}
