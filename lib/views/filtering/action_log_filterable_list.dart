import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/enums/action_log_type.dart';
import 'package:hart_suite/enums/comment_type.dart';
import 'package:hart_suite/extensions/string_extension.dart';
import 'package:hart_suite/helpers/class/date_help.dart';
import 'package:hart_suite/views/generics_lists/single_select_list.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/filtering/filterable.dart';
import 'package:hart_suite/widgets/misc/number_circle_coloured.dart';

class ActionLogFilterableList extends StatefulWidget {
  final DateTime? from, to;
  final CommentType? commentType;
  final ActionLogType? logType;

  const ActionLogFilterableList({
    super.key,
    this.from,
    this.to,
    this.commentType,
    this.logType,
  });

  @override
  State<ActionLogFilterableList> createState() => _ActionFilterableListState();
}

class _ActionFilterableListState extends State<ActionLogFilterableList> {
  double numberIconHeight = 30;
  DateTime? from, to;
  CommentType? commentType;
  ActionLogType? logType;

  @override
  void initState() {
    super.initState();
    from = widget.from;
    to = widget.to;
    commentType = widget.commentType;
    logType = widget.logType;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Filter Actions'),
        actions: [
          TextButton(
            onPressed: () {
              setState(() {
                from = null;
                to = null;
                commentType = null;
                logType = null;
              });
            },
            child: const Text(
              'Clear',
              style: TextStyle(color: Colors.white),
            ),
          ),
          IconButton(
            icon: const Icon(Icons.check),
            onPressed: () {
              Navigator.pop(
                context,
                {
                  'from': from,
                  'to': to,
                  'commentType': commentType,
                  'logType': logType,
                },
              );
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(6),
        child: SingleChildScrollView(
          child: Column(
            children: [
              getLogTypeFilter(),
              const Gap(4),
              getCommentTypeFilter(),
              const Gap(4),
              getFromFilter(),
              const Gap(4),
              getToFilter(),
            ],
          ),
        ),
      ),
    );
  }

  Widget getFromFilter() {
    return Filterable(
      leading: const Icon(Icons.date_range),
      title: const Text('From'),
      display: SizedBox(
        height: numberIconHeight,
        child: Padding(
          padding: const EdgeInsets.fromLTRB(0, 4, 14, 0),
          child: Text(
            from == null ? 'Not Set' : DateHelp.formatDateOnly(from!),
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ),
      onTap: () => showDatePicker(
        context: context,
        initialDate: from ?? DateTime.now(),
        firstDate: DateTime(2000),
        lastDate: DateTime(2100),
      ).then(
        (value) {
          if (value != null) {
            setState(() {
              from = value;
            });
          }
        },
      ),
    );
  }

  Widget getToFilter() {
    return Filterable(
      leading: const Icon(Icons.calendar_month),
      title: const Text('To'),
      display: SizedBox(
        height: numberIconHeight,
        child: Padding(
          padding: const EdgeInsets.fromLTRB(0, 4, 14, 0),
          child: Text(
            to == null ? 'Not Set' : DateHelp.formatDateOnly(to!),
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ),
      onTap: () => showDatePicker(
        context: context,
        initialDate: to ?? DateTime.now(),
        firstDate: DateTime(2000),
        lastDate: DateTime(2100),
      ).then(
        (value) {
          if (value != null) {
            setState(() {
              to = value;
            });
          }
        },
      ),
    );
  }

  Widget getCommentTypeFilter() {
    List<ClickableCardItem> items = [];

    for (var type in CommentType.values) {
      items.add(
        ClickableCardItem(
          title: type.name.toTitleCase(),
          leading: const Icon(Icons.comment),
          onTap: () {
            setState(() {
              Navigator.pop(context, type);
            });
          },
          trailing: null,
        ),
      );
    }

    return Filterable(
      leading: const Icon(Icons.comment),
      title: const Text('Commenter Role'),
      display: SizedBox(
        height: numberIconHeight,
        child: Padding(
          padding: const EdgeInsets.fromLTRB(0, 4, 14, 0),
          child: Text(
            commentType == null ? 'All' : commentType!.name.toTitleCase(),
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ),
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) {
            return SingleSelectList(
              items: items,
              direction: AxisDirection.down,
              title: 'Commenter Role',
            );
          }),
        ).then((value) {
          if (value != null) {
            setState(() {
              commentType = value as CommentType;
            });
          }
        });
      },
    );
  }

  getLogTypeFilter() {
    List<ClickableCardItem> items = [];

    for (var type in ActionLogType.values) {
      items.add(
        ClickableCardItem(
          title: type.name.toTitleCase(),
          leading: const Icon(Icons.change_history),
          onTap: () {
            setState(() {
              Navigator.pop(context, type);
            });
          },
          trailing: null,
        ),
      );
    }

    return Filterable(
      leading: const Icon(Icons.change_history),
      title: const Text('Select Log Type'),
      display: SizedBox(
        height: numberIconHeight,
        child: Padding(
          padding: const EdgeInsets.fromLTRB(0, 4, 14, 0),
          child: Text(
            logType == null ? 'All' : logType!.name.toTitleCase(),
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ),
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) {
            return SingleSelectList(
              items: items,
              direction: AxisDirection.down,
              title: 'Select Log Type',
            );
          }),
        ).then((value) {
          if (value != null) {
            setState(() {
              logType = value as ActionLogType;
            });
          }
        });
      },
    );
  }

  Widget getDisplay(int length, String message) {
    Widget widg;

    if (length == 0) {
      widg = const Padding(
        padding: EdgeInsets.fromLTRB(0, 4, 14, 4),
        child: Text(
          'All',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w500,
          ),
        ),
      );
    } else {
      widg = SizedBox(
        height: numberIconHeight,
        child: NumberCircleColoured(
          message: message,
          color: Colors.white,
          number: length,
        ),
      );
    }

    return widg;
  }

  List<String> getSelectedIds(List<dynamic> items, List<String> ids) {
    return (items.map((e) => e.documentId as String).toList() + ids).toSet().toList();
  }
}
