import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/helpers/ui/feedback_help.dart';
import 'package:hart_suite/models/global/pending_invitation.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/global/pending_invitation_repo.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/global_admin/admin.dart';
import 'package:hart_suite/views/error/four04.dart';
import 'package:hart_suite/widgets/form/text_view.dart';

class BulkInsertInvitations extends StatefulWidget {
  static const route = '/bulkInsertInvitations';

  const BulkInsertInvitations({
    super.key,
  });

  @override
  State<BulkInsertInvitations> createState() => _BulkInsertInvitationsState();
}

class _BulkInsertInvitationsState extends State<BulkInsertInvitations> {
  late TextView mainText;
  late Future<Person?>? foetus;
  late Person person;
  List<PendingInvitation> invitations = List.empty(growable: true);
  List<String> invalidEmails = List.empty(growable: true);
  List<String> validEmails = List.empty(growable: true);

  @override
  void initState() {
    super.initState();
    foetus = PersonRepo().getMyFoetus(id: FirebaseAuth.instance.currentUser!.uid);
  }

  @override
  Widget build(BuildContext context) {
    mainText = TextView(
      label: 'Bulk Insert Invitations',
      text: '',
      decoration: StyleBase.getInputDecoration(),
      maxLines: 12,
      autoFocus: true,
    );

    return Scaffold(
      appBar: AppBar(
        title: const Text('Bulk Insert Invitations'),
        actions: getAppBarActions(),
      ),
      body: FutureBuilder(
        future: foetus,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            if (snapshot.hasData) {
              person = snapshot.data as Person;

              return Column(
                children: [
                  const Gap(8),
                  Text('Please use the space below to enter a comma separated list of emails to invite users to join HartSuite for ${person.lastAccessed!}'),
                  const Gap(16),
                  Expanded(
                    child: SingleChildScrollView(
                      child: Padding(
                        padding: const EdgeInsets.all(16),
                        child: mainText.child,
                      ),
                    ),
                  ),
                ],
              );
            } else if (snapshot.hasError) {
              return Four04Page(args: Four04Args(page: 'Admin', route: AdminPage.route));
            } else {
              return const Center(
                child: CircularProgressIndicator(),
              );
            }
          } else {
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
        },
      ),
    );
  }

  getAppBarActions() {
    return [
      IconButton(
        onPressed: () => inviteFromList(),
        icon: const Icon(Icons.check),
      ),
      IconButton(
        onPressed: () {
          Navigator.pop(context);
        },
        icon: const Icon(Icons.clear),
      )
    ];
  }

  inviteFromList() {
    String csv;
    List<String> emails = List.empty(growable: true);

    csv = mainText.controller!.text;

    emails = csv.split(',');

    for (String email in emails.nonNulls) {
      email = email.trim();
      if (email != '') {
        if (email.contains('@') && email.contains('.') && email.lastIndexOf('.') > email.lastIndexOf('@')) {
          validEmails.add(email);
        } else {
          invalidEmails.add(email);
        }
      }
    }

    for (String email in validEmails) {
      invitations.add(PendingInvitation(email: email, customer: person.lastAccessed!));
    }

    for (PendingInvitation invite in invitations) {
      PendingInvitationRepo().add(data: invite);
    }

    if (invalidEmails.isNotEmpty) {
      FeedbackHelp.showSnackbar(
          context: context, message: 'The following emails were invalid: ${invalidEmails.join(', ')}. All other invitations have been sent.', error: true);
    } else {
      FeedbackHelp.showSnackbar(context: context, message: 'All invitations have been sent.');
    }
  }
}
