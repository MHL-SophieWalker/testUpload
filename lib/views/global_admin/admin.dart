import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:hart_suite/helpers/ui/filter_help.dart';
import 'package:hart_suite/models/area/area.dart';
import 'package:hart_suite/models/general/filter.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/profile/team.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/area/area_detail.dart';
import 'package:hart_suite/views/global_admin/bulk_insert_invitations.dart';
import 'package:hart_suite/views/main/home.dart';
import 'package:hart_suite/views/team/team_detail.dart';
import 'package:hart_suite/widgets/admin/area_list.dart';
import 'package:hart_suite/widgets/admin/pending_invites_list.dart';
import 'package:hart_suite/widgets/admin/remove_access_list.dart';
import 'package:hart_suite/widgets/admin/team_list.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/misc/app_version_info.dart';
import 'package:hart_suite/widgets/misc/expand_clicker.dart';

import '../error/four04.dart';

class AdminPage extends StatefulWidget {
  static const String route = '/admin';
  static const String colAreas = 'areas';
  static const String colTeams = 'teams';
  static const String colPendingInvitations = 'pending invitations';
  static const String colRemoveAccess = 'remove access';
  static const String title = 'HartSuite® - System Admin';

  AdminPage({super.key});

  final List<Filter> filters = [
    Filter(id: '', name: 'Areas', iconCode: 'apartment', semanticLabel: 'Areas', selected: true),
    Filter(id: '', name: 'Teams', iconCode: 'groups', semanticLabel: 'Teams'),
    Filter(id: '', name: 'Pending Invitations', iconCode: 'person_add_alt_1', semanticLabel: 'Pending Invitations'),
    Filter(id: '', name: 'Remove Access', iconCode: 'person_remove_alt_1', semanticLabel: 'Remove Access'),
  ];

  @override
  State<AdminPage> createState() => _AdminPageState();
}

class _AdminPageState extends State<AdminPage> {
  late bool expanded, forceRefresh;
  late bool firstRun;
  late Future<Person?>? foetus;
  late bool showFAB;
  late String collection;
  late Person person;
  late List<Person> peopleToRemove;

  @override
  void initState() {
    PersonRepo personRepo;
    super.initState();

    firstRun = true;
    expanded = true;
    peopleToRemove = List.empty(growable: true);
    personRepo = PersonRepo();
    showFAB = true;
    foetus = personRepo.getMyFoetus(id: FirebaseAuth.instance.currentUser!.uid);
    forceRefresh = false;

    collection = AdminPage.colAreas;
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (ModalRoute.of(context)!.settings.arguments != null) {
      collection = ModalRoute.of(context)!.settings.arguments as String;
    } else if (collection == '') {
      collection = AdminPage.colAreas;
    }

    setSelectedFilter(name: collection);
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: foetus,
      builder: (BuildContext context, AsyncSnapshot<Person?> snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasData) {
            person = snapshot.data!;

            return buildWidget(context);
          } else if (snapshot.hasError) {
            return Four04Page(args: Four04Args(page: 'Admin', route: AdminPage.route, collection: AdminPage.colTeams));
          } else {
            return const FutureBuilderLoader();
          }
        } else {
          return const FutureBuilderLoader();
        }
      },
    );
  }

  Scaffold buildWidget(BuildContext context) {
    if (firstRun) {
      if (MediaQuery.of(context).size.width < 600) {
        expanded = false;
      }

      firstRun = false;
    }

    return Scaffold(
      appBar: AppBar(
        leading: !Navigator.canPop(context) ? IconButton(icon: const Icon(Icons.home), onPressed: () => Navigator.pushNamed(context, HomePage.route)) : null,
        title: const Text(AdminPage.title),
        actions: getAppBarActions(),
      ),
      floatingActionButton: showFAB
          ? FloatingActionButton(
              onPressed: () {
                addNewItem();
              },
              child: const Icon(Icons.add),
            )
          : null,
      body: Row(
        children: [
          Padding(
            padding: const EdgeInsets.only(right: 4),
            child: Container(
              decoration: StyleBase.getSidebarBoxShadowDecoration(),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  ExpandClicker(
                      onTap: () => setState(() {
                            expanded = !expanded;
                          }),
                      expanded: expanded),
                  Expanded(
                    child: SingleChildScrollView(
                      scrollDirection: Axis.vertical,
                      child: ToggleButtons(
                        renderBorder: false,
                        isSelected: FilterHelp.getSelectedFilterBools(widget.filters),
                        onPressed: (int index) {
                          setState(() {
                            collection = filterPressed(index: index);
                          });
                        },
                        direction: Axis.vertical,
                        children: FilterHelp.getFilters(widget.filters, expanded),
                      ),
                    ),
                  ),
                  Align(
                    alignment: Alignment.bottomLeft,
                    child: AppVersionInfo(expanded: expanded),
                  )
                ],
              ),
            ),
          ),
          Expanded(
            child: Align(
              alignment: Alignment.topCenter,
              child: getContent(),
            ),
          ),
        ],
      ),
    );
  }

  String filterPressed({required int index}) {
    setState(() {
      for (int i = 0; i < widget.filters.length; i++) {
        if (i == index) {
          widget.filters[i].selected = true;
        } else {
          widget.filters[i].selected = false;
        }
      }

      setShowFAB(index: index);
    });

    return widget.filters[index].name;
  }

  void setShowFAB({required int index}) {
    if (widget.filters[index].name.toLowerCase() == AdminPage.colRemoveAccess.toLowerCase() ||
        widget.filters[index].name.toLowerCase() == AdminPage.colPendingInvitations.toLowerCase()) {
      showFAB = false;
    } else {
      showFAB = true;
    }
  }

  void setSelectedFilter({required String name}) {
    setState(() {
      for (int i = 0; i < widget.filters.length; i++) {
        if (widget.filters[i].name.toLowerCase() == name.toLowerCase()) {
          widget.filters[i].selected = true;
        } else {
          widget.filters[i].selected = false;
        }
      }
    });
  }

  Widget getContent() {
    Widget content;

    switch (collection.toLowerCase()) {
      case AdminPage.colAreas:
        content = AreaList(
          person: person,
          forceRefresh: forceRefresh,
        );
        break;
      case AdminPage.colTeams:
        content = TeamList(
          person: person,
          forceRefresh: forceRefresh,
        );
        break;
      case AdminPage.colPendingInvitations:
        content = PendingInvitesList(person: person);
        break;
      case AdminPage.colRemoveAccess:
        content = RemoveAccessList(
          person: person,
          peopleToRemove: peopleToRemove,
          reservedWidth: expanded ? 200 : 50,
        );
        break;
      default:
        content = Container();
        break;
    }

    return content;
  }

  List<Widget> getAppBarActions() {
    List<Widget> actions = List.empty(growable: true);

    if (collection.toLowerCase() == AdminPage.colRemoveAccess) {
      actions.add(
        IconButton(
          onPressed: () {
            if (peopleToRemove.isNotEmpty) {
              showDialog(
                  context: context,
                  builder: (diagContext) {
                    return AlertDialog(
                      title: const Text('Remove Users'),
                      content: const Text('Are you sure you want to remove the selected users?'),
                      actions: [
                        TextButton(
                          onPressed: () {
                            Navigator.pop(diagContext);
                          },
                          child: const Text('No'),
                        ),
                        TextButton(
                          onPressed: () {
                            PersonRepo repo;

                            repo = PersonRepo(personSnapshot: person.getPersonSnapshot());

                            for (Person p in peopleToRemove) {
                              if (p.lastAccessed == person.lastAccessed) {
                                p.lastAccessed = null;
                              }
                              p.access.remove(person.lastAccessed);

                              repo.update(person: p).then((value) {
                                setState(() {
                                  peopleToRemove.remove(p);
                                });
                              });
                            }

                            Navigator.pop(diagContext);
                          },
                          child: const Text('Yes'),
                        ),
                      ],
                    );
                  });
            }
          },
          icon: const Icon(Icons.group_remove),
        ),
      );
    }

    if (collection.toLowerCase() == AdminPage.colPendingInvitations) {
      actions.add(IconButton(
        icon: const Icon(Icons.list),
        onPressed: () {
          Navigator.pushNamed(context, BulkInsertInvitations.route, arguments: person);
        },
      ));
    }

    return actions;
  }

  void addNewItem() async {
    forceRefresh = true;
    switch (collection.toLowerCase()) {
      case AdminPage.colAreas:
        await Navigator.pushNamed(context, AreaDetailPage.route, arguments: Area(name: '', description: '', customer: person.lastAccessed!)).then((value) {
          getContent();
        });
        break;
      case AdminPage.colTeams:
        await Navigator.pushNamed(context, TeamDetailPage.route, arguments: Team(name: '', customer: person.lastAccessed!)).then(
          (value) {
            getContent();
          },
        );
        break;
      case AdminPage.colPendingInvitations:
        break;
      case AdminPage.colRemoveAccess:
        break;
    }
  }
}
