import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:hart_suite/enums/comment_type.dart';
import 'package:hart_suite/helpers/permissions/action_permission_help.dart';
import 'package:hart_suite/helpers/ui/feedback_help.dart';
import 'package:hart_suite/models/comment/comment.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/widgets/form/text_view.dart';
import 'package:hart_suite/widgets/sidebar/sidebar_additional_button.dart';

class ActionComment extends StatefulWidget {
  const ActionComment({
    super.key,
    required this.type,
    required this.person,
    required this.actionPermissionHelp,
  });

  final CommentType type;
  final PersonSnapshot person;
  final ActionPermissionHelp actionPermissionHelp;

  @override
  State<ActionComment> createState() => _ActionCommentState();
}

class _ActionCommentState extends State<ActionComment> {
  late CommentType selectedType;
  late ButtonStyle selectedStyle, unselectedStyle, disabledStyle;
  late TextEditingController controller;
  late double expandedWidth, collapsedWidth;
  late TextView comment;
  late bool general, assignee, verifier, admin;

  @override
  void initState() {
    super.initState();
    selectedType = widget.type;

    unselectedStyle = StyleBase.getTextButtonSidebarStyle().copyWith(
      backgroundColor: WidgetStateProperty.all<Color>(Colors.white),
      foregroundColor: WidgetStateProperty.all<Color>(StyleBase.secondaryBlack),
      side: WidgetStateProperty.all<BorderSide>(const BorderSide(color: StyleBase.secondaryBlack, width: 0.5)),
    );

    selectedStyle = unselectedStyle.copyWith(
      backgroundColor: WidgetStateProperty.all<Color>(StyleBase.primaryRed),
      foregroundColor: WidgetStateProperty.all<Color>(StyleBase.lightGrey),
      side: WidgetStateProperty.all<BorderSide>(const BorderSide(color: StyleBase.secondaryBlack, width: 0.5)),
    );

    disabledStyle = unselectedStyle.copyWith(
      backgroundColor: WidgetStateProperty.all<Color>(StyleBase.lightGrey),
      foregroundColor: WidgetStateProperty.all<Color>(StyleBase.charcoal),
      side: WidgetStateProperty.all<BorderSide>(const BorderSide(color: StyleBase.secondaryBlack, width: 0.5)),
    );

    general = widget.actionPermissionHelp.personIsCreator();
    assignee = widget.actionPermissionHelp.personIsAssignee();
    verifier = widget.actionPermissionHelp.personIsVerifier();
    admin = widget.actionPermissionHelp.personIsAdmin();

    expandedWidth = 200;
    collapsedWidth = 80;

    controller = TextEditingController();

    comment = TextView(
      label: 'Comment',
      maxLines: 10,
      minLines: 10,
      decoration: StyleBase.getInputDecoration(),
      text: '',
      controller: controller,
      autoFocus: true,
    );
  }

  @override
  Widget build(BuildContext context) {
    Widget widg, buttonBar;

    buttonBar = SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: Row(children: [
        SidebarAdditionalButton(
          expanded: kIsWeb,
          expandedWidth: expandedWidth,
          collapsedWidth: collapsedWidth,
          onPressed: general
              ? () {
                  setState(() {
                    selectedType = CommentType.general;
                  });
                }
              : null,
          buttonStyle: selectedType == CommentType.general ? selectedStyle : unselectedStyle,
          tooltipMessage: general ? 'General Comment' : 'You are not the creator of this action',
          child: const Text(
            'General',
            textAlign: TextAlign.center,
          ),
        ),
        SidebarAdditionalButton(
          expanded: kIsWeb,
          expandedWidth: expandedWidth,
          collapsedWidth: collapsedWidth,
          onPressed: assignee
              ? () {
                  setState(() {
                    selectedType = CommentType.assignee;
                  });
                }
              : null,
          buttonStyle: selectedType == CommentType.assignee
              ? selectedStyle
              : assignee
                  ? unselectedStyle
                  : disabledStyle,
          tooltipMessage: assignee ? 'Assignee Comment' : 'You are not an assignee of this action',
          child: const Text(
            'Assignee',
            textAlign: TextAlign.center,
          ),
        ),
        SidebarAdditionalButton(
          expanded: kIsWeb,
          expandedWidth: expandedWidth,
          collapsedWidth: collapsedWidth,
          onPressed: verifier
              ? () {
                  setState(() {
                    selectedType = CommentType.verifier;
                  });
                }
              : null,
          buttonStyle: selectedType == CommentType.verifier
              ? selectedStyle
              : verifier
                  ? unselectedStyle
                  : disabledStyle,
          tooltipMessage: verifier ? 'Verifier Comment' : 'You are not a verifier of this action',
          child: const Text(
            'Verifier',
            textAlign: TextAlign.center,
          ),
        ),
        SidebarAdditionalButton(
          expanded: kIsWeb,
          expandedWidth: expandedWidth,
          collapsedWidth: collapsedWidth,
          onPressed: admin
              ? () {
                  setState(() {
                    selectedType = CommentType.admin;
                  });
                }
              : null,
          buttonStyle: selectedType == CommentType.admin
              ? selectedStyle
              : admin
                  ? unselectedStyle
                  : disabledStyle,
          tooltipMessage: admin ? 'Admin Comment' : 'You are not an admin',
          child: const Text(
            'Admin',
            textAlign: TextAlign.center,
          ),
        ),
      ]),
    );

    widg = PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop) {
          if (controller.text.isEmpty) {
            SchedulerBinding.instance.addPostFrameCallback((_) {
              Navigator.pop(context, null);
            });

            return;
          }

          _showBackDialog(context: context);
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Add A Comment'),
          actions: [
            IconButton(
              icon: const Icon(Icons.save),
              onPressed: () {
                Comment comment;
                Auditable created;

                if (controller.text.isEmpty) {
                  FeedbackHelp.showSnackbar(context: context, message: 'Please enter a comment', error: true);
                  return;
                }

                created = Auditable(dateStamp: DateTime.now(), person: widget.person);
                comment = Comment(content: controller.text, type: selectedType, created: created);

                Navigator.pop(context, comment);
              },
            ),
          ],
        ),
        body: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(12),
            child: Column(
              children: [
                buttonBar,
                const SizedBox(height: 16),
                comment.child,
              ],
            ),
          ),
        ),
      ),
    );

    return widg;
  }

  void _showBackDialog({required BuildContext context}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: const Text(
            'Are you sure you want to leave this page? Any unsaved changes will be lost',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                Navigator.pop(context); //pop the dialog
                Navigator.pop(context); //pop the page without passing back the comment
              },
            ),
          ],
        );
      },
    );
  }
}
