import 'package:cloud_firestore/cloud_firestore.dart' as fs;
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/helpers/class/date_help.dart';
import 'package:hart_suite/helpers/class/enums_help.dart';
import 'package:hart_suite/models/actions/action_status.dart';
import 'package:hart_suite/models/actions/subcategory.dart';
import 'package:hart_suite/models/area/area.dart';
import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/models/filterable/icon_text.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/general/filter.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/profile/team.dart';
import 'package:hart_suite/repos/actions/action_repo.dart';
import 'package:hart_suite/repos/actions/action_status_repo.dart';
import 'package:hart_suite/repos/actions/subcategory_repo.dart';
import 'package:hart_suite/repos/area/area_repo.dart';
import 'package:hart_suite/repos/discipline/discipline_repo.dart';
import 'package:hart_suite/repos/global/global_admin_repo.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/repos/profile/team_repo.dart';
import 'package:hart_suite/views/action/action_admin.dart';
import 'package:hart_suite/views/action/action_detail.dart';
import 'package:hart_suite/views/error/brock.dart';
import 'package:hart_suite/views/filtering/action_filterable_list.dart';
import 'package:hart_suite/views/filtering/selected_filters.dart';
import 'package:hart_suite/views/main/home.dart';
import 'package:hart_suite/widgets/cards/action_list_card.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/profile/badged_profile_image_disc.dart';
import 'package:hart_suite/models/actions/action.dart' as hartsuite_action;
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/widgets/sidebar/sidebar.dart';
import 'package:shared_preferences/shared_preferences.dart';

class _InitialisationData {
  final List<ActionStatus> statuses;
  final Person person;
  final bool userIsAdmin;
  final List<Discipline> themes;

  _InitialisationData({required this.statuses, required this.person, required this.userIsAdmin, required this.themes});
}

class ActionsHomeArgs {
  late String selectedStatusDocumentId;
  late String filterInput;

  ActionsHomeArgs({required this.selectedStatusDocumentId, required this.filterInput});
}

class ActionsHome extends StatefulWidget {
  static const route = '/actions';
  static const String statusId = 'actionshome.args.selectedstatusdocumentid';
  static const String filterInput = 'actionshome.args.filterinput';

  final pageTitle = 'Actions Home';
  const ActionsHome({super.key, required this.title});

  final String title;

  @override
  State<ActionsHome> createState() => _ActionsHomeState();
}

class _ActionsHomeState extends State<ActionsHome> {
  List<Filter> statuses = List.empty(growable: true);
  List<hartsuite_action.Action?> actions = List.empty(growable: true);
  Reference ref = FirebaseStorage.instance.ref();
  late bool expanded;
  bool firstLoad = true;
  bool refreshActions = true;
  late Future<_InitialisationData> initData;
  late Future<List<hartsuite_action.Action?>> actionsFuture;
  late Person? person;
  late _InitialisationData initialData;
  late ActionsHomeArgs args;
  late fs.Filter filter;
  late String invalidFilterMessage;
  late int actionsToLoad = 25;
  late int totalActionsMatchingFilters = 0;
  late bool userIsAdmin;
  late List<Discipline> themes;

  late DateTime? filterTo, filterFrom;
  late List<Person> filterPeople;
  late List<Team> filterTeams;
  late List<Discipline> filterThemes;
  late String filterRef;
  late Area? filterArea;
  late SubCategory? filterSubcategory;
  late List<String> themeIds, firebaseFilterIds;

  @override
  void initState() {
    super.initState();

    args = ActionsHomeArgs(selectedStatusDocumentId: 'open', filterInput: '');
    invalidFilterMessage = '';
    expanded = true;
    filterTo = null;
    filterFrom = null;
    filterPeople = List.empty(growable: true);
    filterTeams = List.empty(growable: true);
    filterThemes = List.empty(growable: true);
    filterRef = '';
    filterArea = null;
    filterSubcategory = null;
    themeIds = List.empty(growable: true);
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (ModalRoute.of(context)!.settings.arguments != null) {
      args = ModalRoute.of(context)!.settings.arguments as ActionsHomeArgs;
    } else {
      SharedPreferences.getInstance().then((prefs) {
        args.selectedStatusDocumentId = prefs.getString(ActionsHome.statusId) ?? 'open';
        args.filterInput = prefs.getString(ActionsHome.filterInput) ?? '';
      });
    }

    // filter = generateFilters();
    //called here so that the filters have been set based on args to ensure first load is performant
    initData = initialiseData();
  }

  @override
  Widget build(BuildContext context) {
    if (MediaQuery.of(context).size.width < 600 && firstLoad) {
      expanded = false;
    }

    return FutureBuilder(
      future: initData,
      builder: (BuildContext context, AsyncSnapshot<_InitialisationData?> snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasData) {
            initialData = snapshot.data!;

            if (firstLoad) {
              person = initialData.person;

              statuses = snapshot.data!.statuses
                  .map((e) => Filter(
                        id: e.documentId,
                        name: e.name,
                        selected: (args.selectedStatusDocumentId == e.documentId),
                        iconCode: e.iconCode,
                        semanticLabel: e.name,
                      ))
                  .toList();

              themes = initialData.themes;

              filter = generateFilters();
            }

            userIsAdmin = initialData.userIsAdmin;

            if (refreshActions) {
              actionsFuture = getActionsFuture();

              refreshActions = false;
            }

            firstLoad = false;

            return buildWidget(
              context: context,
            );
          } else if (snapshot.hasError) {
            return BrockPage(
              args: BrockArgs(
                page: widget.pageTitle,
                route: HomePage.route,
                collection: null,
              ),
            );
          } else {
            return const FutureBuilderLoader();
          }
        } else {
          return const FutureBuilderLoader();
        }
      },
    );
  }

  Future<List<hartsuite_action.Action?>> getActionsFuture() async {
    Future<List<hartsuite_action.Action?>> future = Future.value(List.empty(growable: true));
    List<hartsuite_action.Action?> actions = List.empty(growable: true);
    List<hartsuite_action.Action?> filteredActions = List.empty(growable: true);
    Map<int, List<String>> batchedIds = {};
    Map<String, String> profileIdMap = {};
    String? imagePath;
    fs.Filter userIdsFilter;

    filter = generateFilters();

    totalActionsMatchingFilters = 0;

    if (firebaseFilterIds.isNotEmpty) {
      if (firebaseFilterIds.length > 30) {
        for (var i = 0; i < firebaseFilterIds.length; i += 30) {
          batchedIds[i] = firebaseFilterIds.sublist(i, i + 30 < firebaseFilterIds.length ? i + 30 : firebaseFilterIds.length);
        }
      } else {
        batchedIds[0] = firebaseFilterIds;
      }
    } else {
      batchedIds[0] = [];
    }

    for (var key in batchedIds.keys) {
      if (batchedIds[key] == null || batchedIds[key]!.isEmpty) {
        userIdsFilter = fs.Filter("firebaseFilterIds", isGreaterThanOrEqualTo: []);
      } else {
        userIdsFilter = fs.Filter("firebaseFilterIds", arrayContainsAny: batchedIds[key]);
      }

      actions.addAll(await ActionRepo(personSnapshot: person!.getPersonSnapshot(), customer: person!.lastAccessed!)
          .getByFilterWithOrderBy(filter: fs.Filter.and(filter, userIdsFilter), limit: actionsToLoad, orderBy: 'due'));

      totalActionsMatchingFilters +=
          await ActionRepo(personSnapshot: person!.getPersonSnapshot(), customer: person!.lastAccessed!).getCount(filter: fs.Filter.and(filter, userIdsFilter));
    }

    await mapProfileImages(actions, imagePath, profileIdMap);

    if (themeIds.isEmpty) {
      filteredActions = actions;
    } else {
      filteredActions = actions.where((element) {
        if (element!.themeIds != null) {
          for (String themeId in element.themeIds!.nonNulls) {
            if (themeIds.contains(themeId)) {
              return true;
            }
          }
        }

        return false;
      }).toList();
    }

    future = Future.value(filteredActions);

    totalActionsMatchingFilters -= (actions.length - filteredActions.length);

    return future;
  }

  Widget buildWidget({
    required BuildContext context,
  }) {
    return Scaffold(
      appBar: AppBar(
        leading: !Navigator.canPop(context) ? IconButton(icon: const Icon(Icons.home), onPressed: () => Navigator.pushNamed(context, HomePage.route)) : null,
        title: Text(widget.title),
        actions: getAppBarActions(),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          hartsuite_action.Action act;
          Auditable created;

          created = Auditable(person: person!.getPersonSnapshot(), dateStamp: DateTime.now());

          act = hartsuite_action.Action(title: '', description: '', status: EnumsHelp.statusOpen, customer: person!.lastAccessed!, created: created);

          Navigator.pushNamed(context, ActionDetailPage.route, arguments: act).then((_) => setState(() {
                refreshActions = true;
              }));
        },
        child: const Icon(Icons.add),
      ),
      body: Row(
        children: [
          Expanded(
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Sidebar(
                  callback: (index) => statusPressed(index),
                  expanded: expanded,
                  filters: statuses,
                  onExpand: () => setState(() {
                    expanded = !expanded;
                  }),
                ),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Expanded(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.start,
                            mainAxisSize: MainAxisSize.min,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(4),
                                child: SelectedFilters(
                                  filters: generateFilterIcons(),
                                  sidebarWidth: expanded ? 200 : 50,
                                  onTap: () => Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) {
                                        return ActionFilterableList(
                                          customer: person!.lastAccessed!,
                                          personSnapshot: person!.getPersonSnapshot(),
                                          people: filterPeople,
                                          teams: filterTeams,
                                          area: filterArea,
                                          themes: filterThemes,
                                          subcategory: filterSubcategory,
                                          from: filterFrom,
                                          to: filterTo,
                                          reference: filterRef,
                                        );
                                      },
                                    ),
                                  ).then(
                                    (value) {
                                      //map the results onto the filter lists so we can generate the filters
                                      if (value != null) {
                                        setState(() {
                                          filterPeople = value['people'];
                                          filterTeams = value['teams'];
                                          filterArea = value['area'];
                                          filterThemes = value['themes'];
                                          filterSubcategory = value['subcategory'];
                                          filterFrom = value['from'];
                                          filterTo = value['to'];
                                          filterRef = value['reference'];
                                        });

                                        generateFilterString();

                                        updateList();
                                      }
                                    },
                                  ),
                                ),
                              ),
                              const Gap(8),
                              FutureBuilder(
                                  future: actionsFuture,
                                  builder: (
                                    BuildContext context,
                                    AsyncSnapshot<List<hartsuite_action.Action?>> actionSnapshot,
                                  ) {
                                    BrockArgs args;

                                    args = BrockArgs(
                                      page: widget.pageTitle,
                                      route: HomePage.route,
                                      collection: null,
                                    );

                                    if (actionSnapshot.connectionState == ConnectionState.done) {
                                      if (actionSnapshot.hasData) {
                                        actions = actionSnapshot.data!;

                                        return Expanded(
                                          child: (actions.isEmpty)
                                              ? const Center(
                                                  child: Text(
                                                    'No actions found.',
                                                  ),
                                                )
                                              : SingleChildScrollView(
                                                  child: Column(
                                                    mainAxisSize: MainAxisSize.min,
                                                    mainAxisAlignment: MainAxisAlignment.start,
                                                    children: getActionsCards(),
                                                  ),
                                                ),
                                        );
                                      } else if (actionSnapshot.hasError) {
                                        ErrorHandler.logError(
                                          exception: actionSnapshot.error,
                                          stack: actionSnapshot.stackTrace,
                                        );

                                        return BrockPage(args: args);
                                      } else {
                                        return const FutureBuilderLoader();
                                      }
                                    } else {
                                      return const FutureBuilderLoader();
                                    }
                                  }),
                            ],
                          ),
                        )
                      ],
                    ),
                  ),
                ),
              ],
            ),
          )
        ],
      ),
    );
  }

  List<IconText> generateFilterIcons() {
    List<IconText> filters = List.empty(growable: true);
    String noneSet, dateText;

    dateText = 'Not Set';
    noneSet = 'All';

    if (filterFrom != null && filterTo != null) {
      dateText = '${DateHelp.formatDateOnly(filterFrom!)} - ${DateHelp.formatDateOnly(filterTo!)}';
    } else if (filterFrom != null) {
      dateText = 'After ${DateHelp.formatDateOnly(filterFrom!)}';
    } else if (filterTo != null) {
      dateText = 'Before ${DateHelp.formatDateOnly(filterTo!)}';
    }

    filters.add(IconText(
      icon: Icons.numbers,
      text: filterRef.isEmpty ? noneSet : '#$filterRef',
      tooltip: 'Reference',
      isOn: filterRef.isNotEmpty,
    ));
    filters.add(IconText(
      icon: Icons.person,
      text: filterPeople.isEmpty
          ? noneSet
          : filterPeople.length == 1
              ? filterPeople[0].fullName
              : filterPeople.length.toString(),
      tooltip: 'People',
      isOn: filterPeople.isNotEmpty,
    ));
    filters.add(IconText(
      icon: Icons.group,
      text: filterTeams.isEmpty
          ? noneSet
          : filterTeams.length == 1
              ? filterTeams[0].name
              : filterTeams.length.toString(),
      tooltip: 'Teams',
      isOn: filterTeams.isNotEmpty,
    ));
    filters.add(IconText(
      icon: Icons.apartment,
      text: filterArea == null ? noneSet : filterArea!.name,
      tooltip: 'Areas',
      isOn: filterArea != null,
    ));
    filters.add(IconText(
      icon: Icons.category,
      text: filterSubcategory == null ? noneSet : filterSubcategory!.name,
      tooltip: 'Categorisation',
      isOn: filterSubcategory != null,
    ));
    filters.add(IconText(
      icon: Icons.group_work_outlined,
      text: filterThemes.isEmpty
          ? noneSet
          : filterThemes.length == 1
              ? filterThemes[0].name
              : filterThemes.length.toString(),
      tooltip: 'Themes',
      isOn: filterThemes.isNotEmpty,
    ));
    filters.add(IconText(
      icon: Icons.calendar_today,
      text: dateText,
      tooltip: 'Due Date',
      isOn: filterFrom != null,
    ));

    return filters;
  }

  List<Widget> getActionsCards() {
    List<Widget> cards = List.empty(growable: true);
    int remaining, remainingToLoad;

    for (hartsuite_action.Action action in actions.nonNulls) {
      List<Widget> assigneesAndVerifiers = List.empty(growable: true);

      if (action.assignees != null && action.assignees!.keys.isNotEmpty) {
        for (var key in action.assignees!.keys) {
          assigneesAndVerifiers.add(BadgedProfileImageDisc(person: action.assignees![key]!.person, badgeType: BadgedProfileImageDiscTypes.actionsAssignee));
          assigneesAndVerifiers.add(const Gap(4));
        }
      }

      if (action.verifiers != null && action.verifiers!.keys.isNotEmpty) {
        for (var key in action.verifiers!.keys) {
          assigneesAndVerifiers.add(BadgedProfileImageDisc(person: action.verifiers![key]!.person, badgeType: BadgedProfileImageDiscTypes.actionsVerifier));
          assigneesAndVerifiers.add(const Gap(4));
        }
      }

      cards.add(ActionListCard(
        action: action,
        assigneesAndVerifiers: assigneesAndVerifiers,
        refreshList: () => setState(
          () => refreshActions = true,
        ),
        expanded: expanded,
      ));
    }

    if (totalActionsMatchingFilters > actions.length) {
      remaining = totalActionsMatchingFilters - actions.length;
      remainingToLoad = actionsToLoad > remaining ? remaining : actionsToLoad;

      cards.add(Padding(
        padding: const EdgeInsets.all(8.0),
        child: TextButton(
          onPressed: loadMore,
          child: Text('Load ${remainingToLoad > 1 ? 'Next $remainingToLoad' : 'Last'} Action${remainingToLoad > 1 ? 's' : ''}'),
        ),
      ));
    }

    return cards;
  }

  Future<_InitialisationData> initialiseData() async {
    final ActionStatusRepo actionStatusRepo;
    final List<ActionStatus> statuses;
    final PersonRepo personRepo;
    final Person? person;
    final GlobalAdminRepo globalAdminRepo;
    final List<Discipline> themes;
    List<String> adminIds;

    personRepo = PersonRepo();
    person = await personRepo.getById(id: FirebaseAuth.instance.currentUser!.uid);

    if (person == null) {
      throw Exception('Person not found');
    }

    actionStatusRepo = ActionStatusRepo();
    statuses = await actionStatusRepo.get();

    globalAdminRepo = GlobalAdminRepo(customer: person.lastAccessed!);
    adminIds = await globalAdminRepo.get();

    themes = await DisciplineRepo().get();

    return _InitialisationData(statuses: statuses, person: person, userIsAdmin: adminIds.contains(person.documentId), themes: themes);
  }

  /*
      Once we have the actions we need to get the profile images for the assignees and verifiers with the firebase storage url that means an additional call to the database.
      We will store all of the verifiers and assignees in a map with the key being the person id and the value being the image path.
      This way we only have to look up the assignee or verifier profile image url once.
      */
  Future<void> mapProfileImages(List<hartsuite_action.Action?> actions, String? imagePath, Map<String, String> profileIdMap) async {
    for (hartsuite_action.Action action in actions.nonNulls) {
      for (String key in action.assignees!.keys) {
        imagePath = action.assignees![key]!.person.imagePath;

        if (!profileIdMap.containsKey(key) && imagePath != null) {
          profileIdMap[key] = imagePath;
        }
      }

      for (String key in action.verifiers!.keys) {
        imagePath = action.verifiers![key]!.person.imagePath;

        if (!profileIdMap.containsKey(key) && imagePath != null) {
          profileIdMap[key] = imagePath;
        }
      }
    }

    //At this point we now have a list of all of the profiles we need the storage urls for. Now we request those storage URL's
    for (String mapKey in profileIdMap.keys) {
      imagePath = profileIdMap[mapKey];

      if (imagePath != null) {
        try {
          await ref.child(imagePath).getDownloadURL().then((value) {
            profileIdMap[mapKey] = value;
          });
        } catch (e) {
          //user has no image
        }
      }
    }

    //Now we need to update the assignees and verifiers with the storage URL's
    for (hartsuite_action.Action? action in actions.nonNulls) {
      for (String key in action!.assignees!.keys) {
        imagePath = profileIdMap[key];

        if (imagePath != null) {
          action.assignees![key]!.person.remoteImageUrl = imagePath;
        }
      }

      for (String key in action.verifiers!.keys) {
        imagePath = profileIdMap[key];

        if (imagePath != null) {
          action.verifiers![key]!.person.remoteImageUrl = imagePath;
        }
      }
    }
  }

  List<Widget> getAppBarActions() {
    List<Widget> actions = List.empty(growable: true);

    if (userIsAdmin) {
      actions.add(IconButton(
        icon: const Icon(Icons.admin_panel_settings_outlined),
        onPressed: () {
          Navigator.pushNamed(context, ActionAdmin.route);
        },
      ));
    }

    return actions;
  }

  void statusPressed(int index) {
    for (var i = 0; i < statuses.length; i++) {
      statuses[i].selected = false;
    }

    statuses[index].selected = true;
    args.selectedStatusDocumentId = statuses[index].id!;

    updateList();
  }

  void storeArgsInPrefs() {
    // Store the args in shared preferences
    SharedPreferences.getInstance().then((prefs) async {
      prefs.setString('actionshome.args.selectedstatusdocumentid', args.selectedStatusDocumentId);
      prefs.setString('actionshome.args.filterinput', args.filterInput);
    });
  }

  void updateList() {
    storeArgsInPrefs();

    setState(() {
      refreshActions = true;
    });
  }

  void generateFilterString() {
    String filterString = '';
    List<Person?>? people;

    //add all current filter strings as they currently stand
    //then decompose the teams to their members
    //then add all team members and people to the string with a new delimiter
    //then update the filter generator to handle the list of people
    if (filterPeople.isNotEmpty) {
      filterString += 'people=';
      for (Person person in filterPeople) {
        filterString += '${person.documentId}|';
      }
      filterString += ',';
    }
    if (filterTeams.isNotEmpty) {
      filterString += 'teams=';
      for (Team team in filterTeams) {
        filterString += '${team.documentId}|';
        people = team.members?.values.toList();
        if (people != null) {
          filterString += 'members~';
          for (Person person in people.nonNulls) {
            filterString += '${person.documentId}#';
          }
        }
      }
      filterString += ',';
    }
    if (filterArea != null) {
      filterString += 'area=${filterArea!.documentId!},';
    }
    if (filterThemes.isNotEmpty) {
      filterString += 'theme=';
      for (Discipline theme in filterThemes) {
        filterString += '${theme.documentId}|';
      }
      filterString += ',';
    }
    if (filterSubcategory != null) {
      filterString += 'sub=${filterSubcategory!.documentId},';
    }
    if (filterFrom != null) {
      filterString += 'from=${DateHelp.formatDateOnly(filterFrom!)},';
    }
    if (filterTo != null) {
      filterString += 'to=${DateHelp.formatDateOnly(filterTo!)},';
    }
    if (filterRef.isNotEmpty) {
      filterString += 'ref=$filterRef,';
    }

    args.filterInput = filterString;

    filter = generateFilters();
  }

  //Filtering is now done in three stages
  //1. Generate the filter object based on the input string
  //2. Generate the list of themeIds based on the input string for the front end to filter
  //3. Generate the list of firebaseFilterIds based on the input string which is then used to generate a filter object
  //   in getActionsFuture
  //This allows us to batch the requests as we can only do an arrayContainsAny on 30 items at a time in Firebase
  fs.Filter generateFilters() {
    fs.Filter overall, statusFilter, subCategoryFilter, dateFrom, dateTo, areaFilter;
    fs.Filter? ref;
    List<String> filterKvps, kvpSplit, pipeSplit;
    String userId;

    userId = FirebaseAuth.instance.currentUser!.uid;

    filterKvps = args.filterInput.split(',');
    firebaseFilterIds = List.empty(growable: true);

    subCategoryFilter = fs.Filter('subcategoryId', isGreaterThanOrEqualTo: '');
    areaFilter = fs.Filter('areaId', isGreaterThanOrEqualTo: '');
    dateFrom = fs.Filter('due', isGreaterThanOrEqualTo: DateTime.fromMicrosecondsSinceEpoch(0));
    dateTo = fs.Filter('due', isLessThanOrEqualTo: DateTime.parse('3000-01-01'));
    ref = null;

    themeIds = List.empty(growable: true);

    switch (args.selectedStatusDocumentId) {
      case EnumsHelp.statusOpen:
        statusFilter = fs.Filter("status", isEqualTo: EnumsHelp.statusOpen);
        break;
      case EnumsHelp.statusDone:
        statusFilter = fs.Filter("status", isEqualTo: EnumsHelp.statusDone);
        break;
      case EnumsHelp.statusPastDue:
        statusFilter = fs.Filter.and(fs.Filter("status", isEqualTo: EnumsHelp.statusOpen), fs.Filter("due", isLessThan: DateTime.now()));
        break;
      case EnumsHelp.statusVerification:
        statusFilter = fs.Filter("status", isEqualTo: EnumsHelp.statusVerification);
        break;
      default:
        statusFilter = fs.Filter("status", isEqualTo: "open");
    }

    for (String kvp in filterKvps) {
      kvpSplit = kvp.split('=').where((element) => element.isNotEmpty).toList();

      if (kvpSplit.length == 2) {
        kvpSplit[1] = kvpSplit[1].trim();
        switch (kvpSplit[0].trim().toLowerCase()) {
          case 'a':
            firebaseFilterIds.add('ass:$userId');
            filterPeople.add(person!);
            break;
          case 'v':
            firebaseFilterIds.add('ver:$userId');
            filterPeople.add(person!);
            break;
          case 'sub':
            subCategoryFilter = fs.Filter("subcategoryId", isEqualTo: kvpSplit[1]);
            SubCategoryRepo(personSnapshot: person!.getPersonSnapshot(), customer: person!.lastAccessed!).getById(id: kvpSplit[1]).then((value) {
              if (value != null) {
                setState(() {
                  filterSubcategory = value;
                });
              }
            });
            break;
          case 'area':
            areaFilter = fs.Filter("areaId", isEqualTo: kvpSplit[1]);
            AreaRepo(personSnapshot: person!.getPersonSnapshot(), customer: person!.lastAccessed!).getById(id: kvpSplit[1]).then((value) {
              if (value != null) {
                setState(() {
                  filterArea = value;
                });
              }
            });
          case 'people':
            List<String> localIds;
            localIds = List.empty(growable: true);
            pipeSplit = kvpSplit[1].split('|').where((element) => element.isNotEmpty).toList();
            for (String pipe in pipeSplit) {
              firebaseFilterIds.add('per:$pipe');
              localIds.add(pipe);
            }
            PersonRepo().getByList(ids: localIds).then((value) {
              setState(() {
                filterPeople = value;
              });
            });
            pipeSplit.clear();
            break;
          case 'teams':
            List<String> localIds = [];

            pipeSplit = kvpSplit[1].split('|').where((element) => element.isNotEmpty).toList();
            for (String val in pipeSplit) {
              if (val.startsWith('members~')) {
                var arr = val.split('#').where((element) => element.isNotEmpty).toList();
                arr[0] = arr[0].substring('~members'.length);

                for (String a in arr) {
                  firebaseFilterIds.add('per:$a');
                }
              } else {
                localIds.add(val);
              }
            }

            if (localIds.isNotEmpty) {
              TeamRepo(customer: person!.lastAccessed!).getByList(ids: localIds).then((value) {
                if (value != null) {
                  setState(() {
                    filterTeams = value;
                  });
                }
              });
            }

            pipeSplit.clear();
            break;
          case 'theme':
            pipeSplit = kvpSplit[1].split('|').where((element) => element.isNotEmpty).toList();
            for (String pipe in pipeSplit) {
              themeIds.add(pipe);
            }
            DisciplineRepo().get().then((value) {
              setState(() {
                for (Discipline disc in value) {
                  if (themeIds.contains(disc.documentId)) {
                    if (!filterThemes.any((element) => element.name == disc.name)) {
                      filterThemes.add(disc);
                    }
                  }
                }
              });
            });
            pipeSplit.clear();
            break;
          case 'from':
            dateFrom = fs.Filter("due", isGreaterThanOrEqualTo: DateHelp.getDateFromString(date: kvpSplit[1], format: 'yyyy-M-d'));

            filterFrom = DateHelp.getDateFromString(date: kvpSplit[1], format: 'yyyy-M-d');

            break;
          case 'to':
            dateTo = fs.Filter("due", isLessThanOrEqualTo: DateHelp.getDateFromString(date: kvpSplit[1], format: 'yyyy-M-dd'));

            filterTo = DateHelp.getDateFromString(date: kvpSplit[1], format: 'yyyy-M-d');
            break;
          case 'ref':
            int num = int.parse(kvpSplit[1]);
            ref = fs.Filter("refNum", isEqualTo: num);
            filterRef = kvpSplit[1];
        }
      }
    }

    filterPeople = filterPeople.toSet().toList();

    if (firebaseFilterIds.isNotEmpty) {
      firebaseFilterIds = firebaseFilterIds.toSet().toList();
    }

    if (ref != null) {
      overall = ref;
    } else {
      overall = fs.Filter.and(statusFilter, subCategoryFilter, dateFrom, dateTo, areaFilter);
    }

    return overall;
  }

  void loadMore() {
    if (actionsToLoad < 100) {
      actionsToLoad += actionsToLoad;
    }
    setState(() {
      refreshActions = true;
    });
  }

  void debugOnlyTestAllFilterCombosWork() {
    //This is a debug only function to test all filter combinations work
    //DO NOT USE IN PRODUCTION
    List<String> filters = [
      'people=rGArDBJ3xqN1RIkAe7bQ|0P6tqtZmSpdwAA0gNyOGuX7fQ4B3|1s3S1JBIUAtnbdjlOGdC|2arcvZ8qV5Bnw4sKhiCA|379RrLtzZarr5dioDgzf|4SlfG1ufMDibXo996LER|5Ke9ETuAt43GILDm6CtL|7BLUDiQLb37VxJvXPOSB|',
      'teams=5M3DgQ6lK3tujsMV7pcg|members~tEgvsKRDVs2zoLEKmtOY#VpKuneW8XuZzBBxplwdlJuvMvAx1#',
      'theme=NLTXrOmRJGIhvN8Ctszj|5M3DgQ6lK3tujsMV7pcg',
      'from=2024-05-01',
      'to=2024-08-01',
      'area=H00jf6GCMvTeTS6miPrX',
      'sub=mHJJRzbqaUnrl51TjSUQ',
      'ref=9'
    ];
    List<String> statuses = [EnumsHelp.statusOpen, EnumsHelp.statusDone, EnumsHelp.statusPastDue, EnumsHelp.statusVerification];
    ActionRepo actionRepo = ActionRepo(personSnapshot: person!.getPersonSnapshot(), customer: person!.lastAccessed!);

    for (String status in statuses) {
      args.selectedStatusDocumentId = status;

      for (List<String> filter in getAllCombinations(filters)) {
        args.filterInput = filter.join(', ');

        actionRepo.getByFilter(filter: generateFilters()).onError((error, stackTrace) {
          // ignore: avoid_print
          print(filter.join(', '));
          return ErrorHandler.logError(exception: error, stack: stackTrace);
        });
      }
    }
  }
}

List<List<T>> getAllCombinations<T>(List<T> items) {
  List<List<T>> combinations = [];

  void backtrack(List<T> currentCombination, int start) {
    combinations.add(List.from(currentCombination));

    for (int i = start; i < items.length; i++) {
      currentCombination.add(items[i]);
      backtrack(currentCombination, i + 1);
      currentCombination.removeLast();
    }
  }

  backtrack([], 0);

  return combinations;
}
