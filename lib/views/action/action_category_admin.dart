import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:hart_suite/helpers/ui/feedback_help.dart';
import 'package:hart_suite/helpers/ui/layout_help.dart';
import 'package:hart_suite/models/actions/category.dart' as categ;
import 'package:hart_suite/models/actions/subcategory.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/actions/category_repo.dart';
import 'package:hart_suite/repos/actions/subcategory_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/form/inline_confirmation_buttons.dart';
import 'package:hart_suite/widgets/form/text_view.dart';

class ActionCategoryAdmin extends StatefulWidget {
  const ActionCategoryAdmin({
    super.key,
    required this.category,
    required this.person,
  });

  final categ.Category category;
  final Person person;

  @override
  State<ActionCategoryAdmin> createState() => _ActionCategoryAdminState();
}

class _ActionCategoryAdminState extends State<ActionCategoryAdmin> {
  late bool showConfirmDelete;
  late String deleteSubcatId;
  late List<SubCategory> deletedSubcategories;

  @override
  void initState() {
    super.initState();
    showConfirmDelete = false;
    deleteSubcatId = '';
    deletedSubcategories = List.empty(growable: true);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.category.name),
        actions: getAppBarActions(),
      ),
      body: Padding(
        padding: const EdgeInsets.all(12),
        child: SingleChildScrollView(
            child: Column(
          children: [
            getTitleField(),
            getDivider(text: 'Subcategories'),
            getSubcatTextField(),
            ...getSubcategories(),
          ],
        )),
      ),
    );
  }

  Widget getTitleField() {
    TextView title;

    title = TextView(
      label: 'Title',
      maxLength: 50,
      text: widget.category.name,
      decoration: StyleBase.getInputDecoration(),
    );

    title.dataBind(callback: () => widget.category.name = title.controller!.text);

    return title.child;
  }

  Widget getSubcatTextField() {
    TextView subcatTextField;
    TextEditingController controller;
    String id;

    controller = TextEditingController();

    subcatTextField = TextView(
      label: 'New Subcategory',
      decoration: StyleBase.getInputDecoration(),
      text: '',
      maxLength: 50,
      controller: controller,
      onSubmitted: (value) {
        if (value.isNotEmpty) {
          widget.category.subCategories ??= {};

          if (widget.category.subCategories!.values.any((element) => element.name.toLowerCase() == value.toLowerCase())) {
            FeedbackHelp.showSnackbar(context: context, message: 'Subcategory already exists', error: true);
          } else {
            setState(() {
              id = DateTime.now().millisecondsSinceEpoch.toString();

              widget.category.subCategories!['$id-$value'] = SubCategory(
                documentId: '$id-$value',
                name: value,
                categoryId: widget.category.documentId,
                categoryName: widget.category.name,
                customer: widget.category.customer,
              );
            });

            controller.text = '';
          }
        }
      },
    );

    return subcatTextField.child;
  }

  List<Widget> getSubcategories() {
    List<Widget> subcategories = [];

    if (widget.category.subCategories != null) {
      widget.category.subCategories!.forEach((key, value) {
        subcategories
            .add(ClickableCardItem(title: value.name, leading: const Icon(Icons.category), onTap: null, trailing: getDeletebuttons(subcategory: value)));
      });
    }

    return subcategories;
  }

  Widget getDeletebuttons({required SubCategory subcategory}) {
    Widget delete;
    double pad;

    pad = kIsWeb ? 4 : 0;

    if (showConfirmDelete && subcategory.documentId == deleteSubcatId) {
      delete = Padding(
        padding: EdgeInsets.fromLTRB(0, pad, 0, pad),
        child: InlineConfirmationButtons(
          confirmCallback: () => setState(() {
            widget.category.subCategories!.remove(deleteSubcatId);
            deletedSubcategories.add(subcategory);
          }),
          denyCallback: () => setState(() {
            showConfirmDelete = false;
            deleteSubcatId = '';
          }),
        ),
      );
    } else {
      delete = IconButton(
        icon: const Icon(Icons.delete),
        color: StyleBase.warningRed,
        onPressed: () {
          setState(() {
            showConfirmDelete = true;
            deleteSubcatId = subcategory.documentId!;
          });
        },
      );
    }

    return delete;
  }

  List<Widget> getAppBarActions() {
    List<Widget> actions = [];

    actions.add(IconButton(
      icon: const Icon(Icons.save),
      onPressed: () => saveCategory(),
    ));

    return actions;
  }

  saveCategory() async {
    CategoryRepo categoryRepo;
    SubCategoryRepo subCategoryRepo;
    List<Future<void>> futures;

    futures = List.empty(growable: true);

    if (widget.category.documentId == null) {
      widget.category.created = Auditable(person: widget.person.getPersonSnapshot(), dateStamp: DateTime.now());
      widget.category.documentId = '${DateTime.now().millisecondsSinceEpoch}-${widget.category.name}';
    } else {
      widget.category.updated = Auditable(person: widget.person.getPersonSnapshot(), dateStamp: DateTime.now());
    }

    categoryRepo = CategoryRepo(customer: widget.category.customer, personSnapshot: widget.person.getPersonSnapshot());
    subCategoryRepo = SubCategoryRepo(customer: widget.category.customer, personSnapshot: widget.person.getPersonSnapshot());

    for (SubCategory sc in deletedSubcategories) {
      sc.deleted = Auditable(person: widget.person.getPersonSnapshot(), dateStamp: DateTime.now());
      futures.add(subCategoryRepo.set(subCategory: sc));
    }

    for (SubCategory sc in widget.category.subCategories?.values.nonNulls ?? []) {
      sc.categoryId = widget.category.documentId;
      futures.add(subCategoryRepo.set(subCategory: sc));
    }

    futures.add(categoryRepo.set(category: widget.category));

    await Future.wait(futures, eagerError: true).then((value) {
      // ignore: use_build_context_synchronously
      FeedbackHelp.showSnackbar(context: context, message: 'Category saved');
    }).catchError((error) {
      // ignore: use_build_context_synchronously
      FeedbackHelp.showSnackbar(context: context, message: 'Error saving category', error: true, exception: error);
    });
  }
}
