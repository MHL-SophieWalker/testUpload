import 'package:camera/camera.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/enums/comment_type.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/enums_help.dart';
import 'package:hart_suite/helpers/class/map_help.dart';
import 'package:hart_suite/helpers/firebase/firebase_storage_helper.dart';
import 'package:hart_suite/helpers/permissions/action_permission_help.dart';
import 'package:hart_suite/helpers/ui/feedback_help.dart';
import 'package:hart_suite/models/actions/action.dart' as act;
import 'package:hart_suite/models/actions/assignee.dart';
import 'package:hart_suite/models/actions/verifier.dart';
import 'package:hart_suite/models/attachment/attachment.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/general/filter.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/actions/action_repo.dart';
import 'package:hart_suite/repos/global/global_admin_repo.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/action/action_comment.dart';
import 'package:hart_suite/views/action/action_home.dart';
import 'package:hart_suite/views/attachment/online_attachment.dart';
import 'package:hart_suite/views/camera/camera_capture.dart';
import 'package:hart_suite/views/error/four04.dart';
import 'package:hart_suite/views/main/home.dart';
import 'package:hart_suite/views/search/action_search.dart';
import 'package:hart_suite/views/selectors/people_select.dart';
import 'package:hart_suite/widgets/action/action_assignees.dart';
import 'package:hart_suite/widgets/action/action_attachments.dart';
import 'package:hart_suite/widgets/action/action_linked_actions.dart';
import 'package:hart_suite/widgets/action/action_log.dart';
import 'package:hart_suite/widgets/action/action_overview.dart';
import 'package:hart_suite/widgets/action/action_verifiers.dart';
import 'package:hart_suite/widgets/expandable_fab/action_button.dart';
import 'package:hart_suite/widgets/expandable_fab/expandable_fab.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/sidebar/sidebar.dart';
import 'package:hart_suite/widgets/status/status_icon.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart' as fs;

class _InitialisationData {
  final Person? person;
  final act.Action? action;
  final ActionPermissionHelp permissionHelp;
  final List<Person> assignees;
  final List<Person> verifiers;

  _InitialisationData({required this.person, required this.action, required this.permissionHelp, required this.assignees, required this.verifiers});
}

class ActionDetailPage extends StatefulWidget {
  static const route = '/action';

  const ActionDetailPage({super.key});

  @override
  State<ActionDetailPage> createState() => _ActionDetailPageState();
}

class _ActionDetailPageState extends State<ActionDetailPage> {
  static const String pageOverview = 'overview';
  static const String pageAssignees = 'assignees';
  static const String pageVerifiers = 'verifiers';
  late act.Action? action;
  late bool expanded, refreshData;
  late Person? person;
  late Future<_InitialisationData> initialisationData;
  _InitialisationData? initialData;
  late ActionPermissionHelp permissionHelp;
  late List<Person> assignees, verifiers;
  late Map<String, dynamic> actionMap = {};
  late double sidebarWidth;
  late ActionAttachments files;
  late List<String> errors;
  Widget? logSection, verifierSection, assigneeSection, overviewSection, linkedActionsSection;

  List<Filter> filters = [
    Filter(name: 'Overview', iconCode: 'info_rounded', id: 'overview', semanticLabel: 'Overview', selected: true),
    Filter(name: 'Assignees', iconCode: 'group', id: 'assignees', semanticLabel: 'Assignees', selected: false),
    Filter(name: 'Verifiers', iconCode: 'verified_outlined', id: 'verifiers', semanticLabel: 'Verifiers', selected: false),
  ];

  @override
  void initState() {
    super.initState();
    action = null;
    errors = List.empty(growable: true);
    refreshData = true;
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (action == null) {
      if (ModalRoute.of(context)!.settings.arguments != null) {
        action = ModalRoute.of(context)!.settings.arguments as act.Action;
      }
    }

    if (kIsWeb) {
      expanded = true;
    } else {
      expanded = false;
    }

    expanded ? sidebarWidth = StyleBase.expandedSidebarWidth : sidebarWidth = StyleBase.collapsedSidebarWidth;

    initialisationData = getInitialisationData();

    if (action != null && action!.refNum == null) {
      action!.status = EnumsHelp.statusNew;
    }
  }

  @override
  Widget build(BuildContext context) {
    if (action?.refNum != null && !filters.any((element) => element.id == 'log')) {
      setState(() {
        filters.add(Filter(name: 'Log', iconCode: 'history', id: 'log', semanticLabel: 'Log', selected: false));
        filters.add(Filter(name: 'Attachments', iconCode: 'attach_file', id: 'files', semanticLabel: 'Files', selected: false));
        filters.add(Filter(name: 'Linked Actions', iconCode: 'link', id: 'linked', semanticLabel: 'Linked Actions', selected: false));
      });
    }

    if (initialData == null || refreshData) {
      return FutureBuilder(
        future: initialisationData,
        builder: ((context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            if (snapshot.hasData) {
              initialData = snapshot.data as _InitialisationData;

              person = initialData!.person;
              action = initialData!.action;
              assignees = initialData!.assignees;
              verifiers = initialData!.verifiers;
              permissionHelp = initialData!.permissionHelp;

              logSection = getLog();
              verifierSection = getVerifiers();
              assigneeSection = getAssignees();
              overviewSection = getOverview();
              linkedActionsSection = getLinkedActions();

              refreshData = false;

              //the Attachments widget is created here so that the upload function can be called from the floating action button
              getFiles();

              if (actionMap.isEmpty) {
                actionMap = action!.toMap();
              }

              return buildWidget();
            } else if (snapshot.hasError) {
              ErrorHandler.logError(exception: snapshot.error, stack: snapshot.stackTrace);
              return Four04Page(args: Four04Args(page: 'Home', route: HomePage.route));
            } else {
              return const FutureBuilderLoader();
            }
          } else {
            return const FutureBuilderLoader();
          }
        }),
      );
    } else {
      return buildWidget();
    }
  }

  void setSectionSelected({required int index}) {
    setState(() {
      for (var i = 0; i < filters.length; i++) {
        if (i == index) {
          filters[i].selected = true;
        } else {
          filters[i].selected = false;
        }
      }
    });
  }

  Widget buildWidget() {
    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop) {
          if (canNavigateAway()) {
            Navigator.pop(context, true);

            return;
          }

          _showBackDialog(context: context);
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              StatusIcon(
                status: action?.due != null && action!.due!.isBefore(DateTime.now()) ? EnumsHelp.statusPastDue : action!.status,
                showTooltip: true,
              ),
              const Gap(4),
              Expanded(
                child: Text(
                  getAppBarTitle(),
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ],
          ),
          actions: getAppBarActions(),
          centerTitle: false,
          leading: !Navigator.canPop(context) ? IconButton(icon: const Icon(Icons.home), onPressed: () => navigateHome()) : null,
        ),
        floatingActionButton: getFAB(),
        body: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Sidebar(
                  expanded: expanded,
                  filters: filters,
                  callback: (index) => setSectionSelected(index: index),
                  errors: errors,
                )
              ],
            ),
            Expanded(
              child: Padding(
                padding: const EdgeInsets.all(12),
                child: SingleChildScrollView(
                  child: getContent(),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  bool canNavigateAway() {
    Map<String, dynamic> actionNoRef, mapNoRef;

    actionNoRef = action!.toMap();
    actionNoRef.remove('refNum');

    mapNoRef = actionMap;
    mapNoRef.remove('refNum');

    return MapHelp.equals(actionNoRef, mapNoRef);
  }

  navigateHome() {
    if (canNavigateAway()) {
      Navigator.pushNamed(context, HomePage.route);
    } else {
      _showBackDialog(context: context);
    }
  }

  void _showBackDialog({required BuildContext context}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: const Text(
            'Are you sure you want to leave this page? Any unsaved changes will be lost',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                Navigator.pop(context); //pop the dialog
                Navigator.pushReplacementNamed(
                  context,
                  ActionsHome.route,
                ); //refresh the page on a call
              },
            ),
          ],
        );
      },
    );
  }

  Widget? getFAB() {
    Widget? fab;
    List<Widget> children;

    if ((permissionHelp.canEditField(ActionPermissionHelp.attachments, actionStatus: action?.status) || action?.documentId == null) &&
        filters.where((element) => element.selected).first.name == 'Attachments') {
      children = [];
      if (!kIsWeb) {
        children.add(
          ActionButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => const CameraCapture(),
                ),
              ).then(
                (value) {
                  if (value != null) {
                    uploadCapture(image: value[0], name: value[1]);
                  }
                },
              );
            },
            icon: const Icon(Icons.camera_alt_outlined),
          ),
        );
      }

      children.add(ActionButton(
        onPressed: () {
          files.upload();
        },
        icon: const Icon(Icons.add),
      ));

      children.add(ActionButton(
        onPressed: () async {
          await Navigator.push(
            context,
            MaterialPageRoute(builder: (context) {
              return OnlineAttachment(
                personSnapshot: person!.getPersonSnapshot(),
              );
            }),
          ).then((value) {
            if (value != null && value is Attachment) {
              setState(() {
                action!.attachments ??= {};
                action!.attachments![value.documentId!] = value;
                refreshData = true;
              });
            }
          });
        },
        icon: const Icon(Icons.language),
      ));

      //this sizedBox is entirely pointless other than the fact it magically makes the button events fire
      //this happens as the button is transformed so Flutter assumes we want all the events where it was, not where it is
      //the SizedBox makes it work as expected and take the events with the UI
      fab = SizedBox.expand(
        child: ExpandableFab(
          icon: const Icon(Icons.attach_file),
          distance: kIsWeb ? 75 : 100,
          children: children,
        ),
      );
    } else if (filters.where((filt) => filt.selected).first.id == 'assignees' &&
        (permissionHelp.canEditField(ActionPermissionHelp.changeAssignees, actionStatus: action?.status) || action!.documentId == null)) {
      fab = FloatingActionButton(
        onPressed: () async {
          await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => PeopleSelect(
                customer: action!.customer,
                multiSelect: true,
                preselectedPeopleIds: action!.assignees?.keys.toList() ?? [],
                preventRemovalOfPreSelected: false,
                exclusionIds: action!.verifiers?.keys.toList() ?? [],
              ),
            ),
          ).then((value) {
            if (value != null && value is List<Person>) {
              action!.assignees = {};
              setState(() {
                for (var p in value) {
                  if (action!.assignees![p.documentId] == null) {
                    Auditable created = Auditable(
                      person: person!.getPersonSnapshot(),
                      dateStamp: DateTime.now(),
                    );

                    action!.addAssignee(
                      assignee: Assignee(
                        person: p.getPersonSnapshot(),
                        documentId: p.documentId,
                        created: created,
                      ),
                    );
                  }
                }
                refreshData = true;
              });
            }
          });
        },
        child: const Icon(Icons.person_add_alt_1),
      );
    } else if (filters.where((filt) => filt.selected).first.id == 'verifiers' &&
        (permissionHelp.canEditField(ActionPermissionHelp.changeVerifiers, actionStatus: action?.status) || action!.documentId == null)) {
      fab = FloatingActionButton(
        onPressed: () async {
          await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => PeopleSelect(
                customer: action!.customer,
                multiSelect: true,
                preselectedPeopleIds: action!.verifiers?.keys.toList() ?? [],
                preventRemovalOfPreSelected: false,
                exclusionIds: action!.assignees?.keys.toList() ?? [],
              ),
            ),
          ).then((value) {
            if (value != null && value is List<Person>) {
              action!.verifiers = {};
              setState(() {
                for (var p in value) {
                  if (action!.verifiers![p.documentId] == null) {
                    Auditable created = Auditable(
                      person: person!.getPersonSnapshot(),
                      dateStamp: DateTime.now(),
                    );

                    action!.addVerifier(
                      verifier: Verifier(
                        person: p.getPersonSnapshot(),
                        documentId: p.documentId,
                        created: created,
                      ),
                    );
                  }
                }
                refreshData = true;
              });
            }
          });
        },
        child: const Icon(Icons.person_add_alt_1),
      );
    } else if (filters.where((filt) => filt.selected).first.id == 'linked' &&
        (permissionHelp.canEditField(ActionPermissionHelp.linkedActions, actionStatus: action?.status) || action!.documentId == null)) {
      fab = FloatingActionButton(
        onPressed: () async {
          await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => ActionSearch(
                customer: person!.lastAccessed!,
                personSnapshot: person!.getPersonSnapshot(),
                preselectedActionIds: action!.linkedActionIds,
                exclusionIds: [...action!.linkedActionIds, action!.documentId!],
              ),
            ),
          ).then((value) {
            if (value != null && value is List<act.Action>) {
              setState(() {
                //this looks horrible, however if we use the add or addAll functions it also updates
                //actionMap that we use to check if the action has changed - meaning changes to the linked actions
                //are not caught by the PopScope or added to the log.
                action!.linkedActionIds = action!.linkedActionIds + (value.map((e) => e.documentId!).toList());
                refreshData = true;
              });
            }
          });
        },
        child: const Icon(Icons.add),
      );
    }

    return fab;
  }

  uploadCapture({required XFile image, required String name}) {
    Auditable created;

    action!.attachments ??= {};
    created = Auditable(person: person!.getPersonSnapshot(), dateStamp: DateTime.now());

    action!.attachments![name] = Attachment(
      fileName: '$name.jpg',
      fileLocation: '',
      documentId: name,
      created: created,
    );

    FirebaseStorageHelper.uploadFile(contentType: 'image/jpg', localPath: image.path, path: '${action!.customer}/actions/${action!.documentId!}/$name.jpg')
        .then((value) {
      action!.attachments![name]!.fileLocation = value.snapshot.ref.fullPath;
      setState(() {
        action = action;
      });
    });
  }

  Future<_InitialisationData> getInitialisationData() async {
    GlobalAdminRepo globalRepo;
    PersonRepo personRepo;
    ActionRepo actionRepo;
    List<String> adminIds;
    List<String>? assigneeIds, verifierIds;
    fs.Filter assigneeFilter, verifierFilter;

    person = await PersonRepo().getById(id: FirebaseAuth.instance.currentUser!.uid);
    action = await pageDataInitialisation(person: person, id: action?.documentId, action: action);

    globalRepo = GlobalAdminRepo(customer: person!.lastAccessed!);
    actionRepo = ActionRepo(customer: person!.lastAccessed!, personSnapshot: person!.getPersonSnapshot());
    personRepo = PersonRepo();

    adminIds = await globalRepo.get();
    adminIds.addAll(await actionRepo.getAdmins());

    assigneeIds = getAssigneeIds();
    verifierIds = getVerifierIds();

    if (assigneeIds != null && assigneeIds.isNotEmpty) {
      assigneeFilter = fs.Filter('documentId', whereIn: getAssigneeIds());
      assignees = await personRepo
          .getDocumentsByFilter(filter: assigneeFilter)
          .onError((error, stackTrace) => ErrorHandler.logError(exception: error, stack: stackTrace));
    } else {
      assignees = List.empty(growable: true);
    }

    if (verifierIds != null && verifierIds.isNotEmpty) {
      verifierFilter = fs.Filter('documentId', whereIn: getVerifierIds());
      verifiers = await personRepo
          .getDocumentsByFilter(filter: verifierFilter)
          .onError((error, stackTrace) => ErrorHandler.logError(exception: error, stack: stackTrace));
    } else {
      verifiers = List.empty(growable: true);
    }

    permissionHelp = ActionPermissionHelp(person: person!, action: action!, adminIds: adminIds);

    return _InitialisationData(person: person, action: action, permissionHelp: permissionHelp, verifiers: verifiers, assignees: assignees);
  }

  List<String>? getAssigneeIds() {
    List<String>? assigneeIds = List.empty(growable: true);

    assigneeIds = action?.assignees?.keys.toList();

    if (assigneeIds != null) {
      for (int i = 0; i < assigneeIds.length; i++) {
        assigneeIds[i] = assigneeIds[i].substring(4);
      }
    }

    return assigneeIds;
  }

  List<String>? getVerifierIds() {
    List<String>? verifierIds = List.empty(growable: true);

    verifierIds = action?.verifiers?.keys.toList();

    if (verifierIds != null) {
      for (int i = 0; i < verifierIds.length; i++) {
        verifierIds[i] = verifierIds[i].substring(4);
      }
    }

    return verifierIds;
  }

  Future<act.Action?> pageDataInitialisation({required Person? person, String? id, act.Action? action}) async {
    person ??= await PersonRepo().getById(id: FirebaseAuth.instance.currentUser!.uid);

    await SharedPreferences.getInstance().then((prefs) async {
      if (id != null) {
        await prefs.setString('actionId', id);
      } else if (action == null) {
        String actionId = prefs.getString('actionId') ?? '';

        if (actionId != '' && person != null) {
          ActionRepo actionRepo = ActionRepo(customer: person.lastAccessed!, personSnapshot: person.getPersonSnapshot());
          action = await actionRepo.getById(id: actionId, populate: true);
        }
      }
    });

    return action;
  }

  String getAppBarTitle() {
    String title, ref;

    title = action!.title;

    if (action!.refNum != null) {
      ref = action!.refNum.toString();
    } else {
      ref = 'TBC';
    }

    return title.isNotEmpty ? '#$ref - $title' : '#$ref - New Action';
  }

  Widget getContent() {
    switch (filters.where((element) => element.selected).first.id) {
      case 'overview':
        return overviewSection!;
      case 'assignees':
        return assigneeSection!;
      case 'verifiers':
        return verifierSection!;
      case 'log':
        return logSection!;
      case 'files':
        return files;
      case 'linked':
        return linkedActionsSection!;
      default:
        return overviewSection!;
    }
  }

  Widget getOverview() {
    return ActionOverview(
      action: action!,
      expanded: expanded,
      person: person!,
      permissionHelp: permissionHelp,
      errors: errors,
      updateActionState: (val) => setState(() {
        action = val;
        refreshData = true;
      }),
    );
  }

  Widget getAssignees() {
    Widget ass;

    ass = ActionAssignee(
      action: action!,
      expanded: expanded,
      person: person!,
      permissionHelp: permissionHelp,
      updateActionState: (val) => setState(() {
        action = val;
      }),
      errorText: errors.contains('assignees') ? 'At least one assignee is required' : null,
    );

    return ass;
  }

  Widget getVerifiers() {
    Widget vers;

    vers = ActionVerifiers(
      action: action!,
      expanded: expanded,
      person: person!,
      permissionHelp: permissionHelp,
      updateActionState: (val) => setState(() {
        action = val;
      }),
      errorText: errors.contains('verifiers') ? 'At least one verifier is required' : null,
    );

    return vers;
  }

  Widget getLog() {
    Widget log;

    log = ActionLog(
      action: action!,
      expanded: expanded,
    );

    return log;
  }

  Widget getLinkedActions() {
    Widget linked;

    linked = ActionLinkedAction(
      action: action!,
      personSnapshot: person!.getPersonSnapshot(),
    );

    return linked;
  }

  ActionAttachments getFiles() {
    files = ActionAttachments(
      action: action!,
      person: person!,
      widthOffset: sidebarWidth,
      permissionHelp: permissionHelp,
    );

    return files;
  }

  getAppBarActions() {
    List<Widget> actions = [];

    if (permissionHelp.canComment() && action!.documentId != null) {
      actions.add(
        Tooltip(
          message: 'Comment',
          child: IconButton(
            icon: const Icon(Icons.comment),
            onPressed: () {
              Navigator.push(context, MaterialPageRoute(builder: (context) {
                CommentType type;

                type = CommentType.general;

                if (permissionHelp.personIsAssignee()) {
                  type = CommentType.assignee;
                } else if (permissionHelp.personIsVerifier()) {
                  type = CommentType.verifier;
                } else if (permissionHelp.personIsAdmin()) {
                  type = CommentType.admin;
                }

                return ActionComment(
                  type: type,
                  person: person!.getPersonSnapshot(),
                  actionPermissionHelp: permissionHelp,
                );
              })).then(
                (value) {
                  if (value != null) {
                    setState(() {
                      action!.comments ??= List.empty(growable: true);
                      action!.comments!.add(value);
                    });

                    saveAction();
                  }
                },
              );
            },
          ),
        ),
      );
    }

    if (permissionHelp.canEditField(ActionPermissionHelp.save, actionStatus: action?.status) || action!.documentId == null) {
      actions.add(
        Tooltip(
          message: 'Save',
          child: IconButton(
            icon: const Icon(Icons.save),
            onPressed: () {
              saveAction();
            },
          ),
        ),
      );
    }

    return actions;
  }

  bool actionIsValid() {
    setState(() {
      errors.clear();

      if (action!.title.length < 5) {
        errors.add('title');
        errors.add(pageOverview);
      }

      if (action!.due == null) {
        errors.add('due date');
        errors.add(pageOverview);
      }

      if (action!.description.length < 10) {
        errors.add('description');
        errors.add(pageOverview);
      }

      if (action!.area == null) {
        errors.add('area');
        errors.add(pageOverview);
      }

      if (action!.subCategory == null) {
        errors.add('subcategory');
        errors.add(pageOverview);
      }

      if (action!.assignees == null || action!.assignees!.isEmpty) {
        errors.add('assignee');
        errors.add(pageAssignees);
      }

      if (action!.verifiers == null || action!.verifiers!.isEmpty) {
        errors.add('verifier');
        errors.add(pageVerifiers);
      }
    });

    return errors.isEmpty;
  }

  void saveAction() {
    ActionRepo repo;
    bool readyToVerify, done;

    if (!actionIsValid()) {
      FeedbackHelp.showSnackbar(context: context, message: getInvalidSnackbarMessage(), error: true);
    } else {
      readyToVerify = false;
      done = false;

      repo = ActionRepo(customer: person!.lastAccessed!, personSnapshot: person!.getPersonSnapshot());

      if (!MapHelp.equals(actionMap, action!.toMap())) {
        mapLogs();
      }

      if (action!.assignees != null && action!.assignees!.isNotEmpty) {
        if (action!.assignees!.values.every((element) => element.done != null)) {
          readyToVerify = true;
        }
      }

      if (readyToVerify && action!.verifiers != null && action!.verifiers!.isNotEmpty) {
        if (action!.verifiers!.values.every((element) => element.done != null)) {
          done = true;
        }
      }

      if (done) {
        action!.status = EnumsHelp.statusDone;
      } else if (readyToVerify) {
        action!.status = EnumsHelp.statusVerification;
      } else {
        action!.status = EnumsHelp.statusOpen;
      }

      if (action!.documentId == null) {
        repo.add(action: action!).then((value) {
          if (action!.attachments != null && action!.attachments!.isNotEmpty) {
            files.processDeleteAttachmentsQueue();
          }
          showSuccessSave();
          setState(() {
            actionMap = action!.toMap();
            errors.clear();
          });
        }).catchError((e) {
          showErrorSave(exception: e);
        });
      } else {
        repo.update(action: action!).then((value) {
          if (action!.attachments != null && action!.attachments!.isNotEmpty) {
            files.processDeleteAttachmentsQueue();
          }
          showSuccessSave();
          setState(() {
            actionMap = action!.toMap();
            errors.clear();
          });
        }).catchError((e) {
          showErrorSave(exception: e);
        });
      }
    }
  }

  String getInvalidSnackbarMessage() {
    Map<String, String> messages;
    StringBuffer sb;

    messages = {
      'title': 'Title must be at least 5 characters',
      'due date': 'Due date must be set',
      'description': 'Description must be at least 10 characters',
      'area': 'Area must be set',
      'subcategory': 'Subcategory must be set',
      'assignee': 'At least one assignee must be set',
      'verifier': 'At least one verifier must be set',
    };

    sb = StringBuffer();

    for (String s in errors) {
      if (messages[s] != null) {
        if (sb.isNotEmpty) {
          sb.write(', ');
        }

        sb.write(messages[s]);
      }
    }

    return sb.toString();
  }

  void showSuccessSave() {
    FeedbackHelp.showSnackbar(context: context, message: 'Action saved successfully');
  }

  void showErrorSave({dynamic exception}) {
    FeedbackHelp.showSnackbar(context: context, message: 'Error saving action', error: true, exception: exception);
  }

  void mapLogs() {
    Map<String, dynamic> newMap;

    newMap = action!.toMap();

    if (action!.log == null || action!.log!.isEmpty) {
      action!.log = List.empty(growable: true);

      action!.log!.add(Auditable(
        person: person!.getPersonSnapshot(),
        dateStamp: DateTime.now(),
        note: 'Action created',
      ));
    } else {
      //changed area
      if (newMap['area']['name'] != actionMap['area']['name']) {
        action!.log!.add(Auditable(
          person: person!.getPersonSnapshot(),
          dateStamp: DateTime.now(),
          note: 'Area changed from ${actionMap['area']['name']} to ${newMap['area']['name']}',
        ));
      }

      //removed assignee
      for (var key in actionMap['assignees'].keys) {
        if (newMap['assignees'][key] == null || newMap['assignees'][key].isEmpty) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Assignee removed: ${actionMap['assignees'][key]['person']['fullName']}',
          ));
        }
      }

      //added assignee
      for (var key in newMap['assignees'].keys) {
        if (actionMap['assignees'][key] == null) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Assignee added: ${newMap['assignees'][key]['person']['fullName']}',
          ));
        }
      }

      //signed off as assignee
      for (var key in newMap['assignees'].keys) {
        if (actionMap['assignees'][key] != null &&
            (newMap['assignees'][key]['done'] != null && newMap['assignees'][key]['done'] != '') &&
            (actionMap['assignees'][key]['done'] == null || actionMap['assignees'][key]['done'] == '')) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Assignee signed off: ${newMap['assignees'][key]['person']['fullName']}',
          ));
        }
      }

      //unsigned as assignee
      for (var key in newMap['assignees'].keys) {
        if (actionMap['assignees'][key] != null &&
            newMap['assignees'][key]['done'] == null &&
            (actionMap['assignees'][key]['done'] != null && actionMap['assignees'][key]['done'] != '')) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Assignee unsigned: ${newMap['assignees'][key]['person']['fullName']}',
          ));
        }
      }

      //removed attachment
      for (var key in newMap['attachments'].keys) {
        if (actionMap['attachments'][key] == null) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Attachment added: ${newMap['attachments'][key]['fileName']}',
          ));
        }
      }

      //added attachment
      for (var key in actionMap['attachments'].keys) {
        if (newMap['attachments'][key] == null) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Attachment removed: ${actionMap['attachments'][key]['fileName']}',
          ));
        }
      }

      //deleted
      if (newMap['deleted'] != null && actionMap['deleted'] == null) {
        action!.log!.add(Auditable(
          person: person!.getPersonSnapshot(),
          dateStamp: DateTime.now(),
          note: 'Action deleted',
        ));
      }

      //description
      if (newMap['description'] != actionMap['description']) {
        action!.log!.add(Auditable(
          person: person!.getPersonSnapshot(),
          dateStamp: DateTime.now(),
          note: 'Description changed',
        ));
      }

      //due
      if (newMap['due'] != actionMap['due']) {
        action!.log!.add(Auditable(
          person: person!.getPersonSnapshot(),
          dateStamp: DateTime.now(),
          note: 'Due date changed',
        ));
      }

      //category
      if (newMap['subCategory']['categoryName'] != actionMap['subCategory']['categoryName']) {
        action!.log!.add(Auditable(
          person: person!.getPersonSnapshot(),
          dateStamp: DateTime.now(),
          note: 'Category changed',
        ));
      }

      //subcategory
      if (newMap['subCategory']['name'] != actionMap['subCategory']['name']) {
        action!.log!.add(Auditable(
          person: person!.getPersonSnapshot(),
          dateStamp: DateTime.now(),
          note: 'Subcategory changed',
        ));
      }

      //title
      if (newMap['title'] != actionMap['title']) {
        action!.log!.add(Auditable(
          person: person!.getPersonSnapshot(),
          dateStamp: DateTime.now(),
          note: 'Title changed',
        ));
      }

      //removed verifier
      for (var key in actionMap['verifiers'].keys) {
        if (newMap['verifiers'][key] == null || newMap['verifiers'][key].isEmpty) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Verifier removed: ${actionMap['verifiers'][key]['person']['fullName']}',
          ));
        }
      }

      //added verifier
      for (var key in newMap['verifiers'].keys) {
        if (actionMap['verifiers'][key] == null || actionMap['verifiers'][key].isEmpty) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Verifier added: ${newMap['verifiers'][key]['person']['fullName']}',
          ));
        }
      }

      //signed off as verifier
      for (var key in newMap['verifiers'].keys) {
        if (actionMap['verifiers'][key] != null &&
            (newMap['verifiers'][key]['done'] != null && newMap['verifiers'][key]['done'] != '') &&
            (actionMap['verifiers'][key]['done'] == null || actionMap['verifiers'][key]['done'] == '')) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Verifier signed off: ${newMap['verifiers'][key]['person']['fullName']}',
          ));
        }
      }

      //unsigned as verifier
      for (var key in newMap['verifiers'].keys) {
        if (actionMap['verifiers'][key] != null &&
            newMap['verifiers'][key]['done'] == null &&
            (actionMap['verifiers'][key]['done'] != null && actionMap['verifiers'][key]['done'] != '')) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Verifier unsigned: ${newMap['verifiers'][key]['person']['fullName']}',
          ));
        }
      }

      //linked action added
      for (var key in newMap['linkedActionIds']) {
        if (!actionMap['linkedActionIds'].contains(key)) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Linked action',
          ));
        }
      }

      //linked action removed
      for (var key in actionMap['linkedActionIds']) {
        if (!newMap['linkedActionIds'].contains(key)) {
          action!.log!.add(Auditable(
            person: person!.getPersonSnapshot(),
            dateStamp: DateTime.now(),
            note: 'Unlinked action',
          ));
        }
      }
    }
  }
}
