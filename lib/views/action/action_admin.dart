import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/helpers/class/map_help.dart';
import 'package:hart_suite/helpers/ui/feedback_help.dart';
import 'package:hart_suite/models/actions/category.dart' as cat;
import 'package:hart_suite/models/actions/subcategory.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/general/filter.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/actions/action_repo.dart';
import 'package:hart_suite/repos/actions/category_repo.dart';
import 'package:hart_suite/repos/actions/subcategory_repo.dart';
import 'package:hart_suite/repos/global/global_admin_repo.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/action/action_category_admin.dart';
import 'package:hart_suite/views/action/action_home.dart';
import 'package:hart_suite/views/error/four04.dart';
import 'package:hart_suite/views/main/home.dart';
import 'package:hart_suite/views/selectors/people_select.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/form/inline_confirmation_buttons.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/misc/number_circle_coloured.dart';
import 'package:hart_suite/widgets/profile/profile_card_with_actions.dart';
import 'package:hart_suite/widgets/sidebar/sidebar.dart';

class _InitialisationData {
  const _InitialisationData({
    required this.categories,
    required this.subCategories,
    required this.admins,
    required this.user,
    required this.globalAdminIds,
    required this.actionAdminIds,
  });

  final List<cat.Category> categories;
  final List<SubCategory> subCategories;
  final List<Person> admins;
  final Person user;
  final List<String> globalAdminIds, actionAdminIds;
}

class ActionAdmin extends StatefulWidget {
  static const String route = '/actionsAdmin';

  const ActionAdmin({super.key});

  @override
  State<ActionAdmin> createState() => _ActionAdminState();
}

class _ActionAdminState extends State<ActionAdmin> {
  late Future<_InitialisationData> data;
  late List<cat.Category> categories, deletedCategories;
  late List<SubCategory> subCategories;
  late List<Person> admins;
  late Person user;
  late List<Filter> filters;
  late bool expanded, showConfirmDeleteAdmin, showConfirmDeleteCategory;
  late List<String> globalAdminIds, actionAdminIds, originalAdmins, originalCategories;
  late String categoryIdToDelete;
  late Map<String, dynamic> categoryMap;

  @override
  void initState() {
    super.initState();
    data = initialiseData();

    filters = [
      Filter(iconCode: 'person', name: 'Administrators', id: 'administrators', semanticLabel: 'Administrators', selected: true),
      Filter(iconCode: 'category_outlined', name: 'Categories', id: 'categories', semanticLabel: 'Categories'),
    ];

    expanded = kIsWeb;
    showConfirmDeleteAdmin = false;
    showConfirmDeleteCategory = false;

    deletedCategories = List.empty(growable: true);

    categoryIdToDelete = '';

    //map list of categories here to check for changes - we do not need
    //to know if the category itself has changed, just if it is still present
    originalAdmins = List.empty(growable: true);
    originalCategories = List.empty(growable: true);
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    String? filter = ModalRoute.of(context)!.settings.arguments as String?;

    switch (filter) {
      case 'administrators':
        filterPressed(0);
        break;
      case 'categories':
        filterPressed(1);
        break;
      default:
        filterPressed(0);
    }
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
        future: data,
        builder: (BuildContext context, AsyncSnapshot<_InitialisationData> snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            if (snapshot.hasData) {
              categories = snapshot.data!.categories;
              subCategories = snapshot.data!.subCategories;
              admins = snapshot.data!.admins;
              user = snapshot.data!.user;
              globalAdminIds = snapshot.data!.globalAdminIds;
              actionAdminIds = snapshot.data!.actionAdminIds;

              return buildWidget();
            } else if (snapshot.hasError) {
              ErrorHandler.logError(exception: snapshot.error, stack: snapshot.stackTrace);
              return Four04Page(args: Four04Args(page: 'Actions', route: ActionsHome.route));
            } else {
              return const FutureBuilderLoader();
            }
          } else {
            return const FutureBuilderLoader();
          }
        });
  }

  Widget buildWidget() {
    if (originalAdmins.isEmpty || originalCategories.isEmpty) {
      originalAdmins = actionAdminIds.map((e) => e.toString()).toList();
      originalCategories = categories.map((e) => e.documentId!).toList();
    }

    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        String changedSections = '';
        if (!didPop) {
          changedSections = getChangedSections();

          if (changedSections.isNotEmpty) {
            _showBackDialog(context: context, changedSections: changedSections);
          } else {
            SchedulerBinding.instance.addPostFrameCallback((_) {
              Navigator.pushReplacementNamed(
                context,
                ActionsHome.route,
              );
            });

            return;
          }
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: const Text('HartSuite® - Actions - Admin'),
          actions: getAppBarActions(),
          leading: !Navigator.canPop(context) ? IconButton(icon: const Icon(Icons.home), onPressed: () => handleHomePressed()) : null,
        ),
        floatingActionButton: getFAB(),
        body: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Sidebar(
                  expanded: expanded,
                  filters: filters,
                  callback: (index) => filterPressed(index),
                ),
              ],
            ),
            Expanded(
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: SingleChildScrollView(
                  child: getContent(),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  handleHomePressed() {
    String sect;

    sect = getChangedSections();

    if (sect.isEmpty) {
      Navigator.pushNamed(context, HomePage.route);
    } else {
      _showBackDialog(context: context, changedSections: sect);
    }
  }

  String getChangedSections() {
    String changedSections = '';

    !MapHelp.equalsList(originalAdmins, actionAdminIds) ? changedSections += 'Admins' : '';
    !MapHelp.equalsList(originalCategories, categories.map((e) => e.documentId!).toList())
        ? changedSections += changedSections.isEmpty ? 'Categories' : ' and Categories'
        : '';

    return changedSections;
  }

  Widget getContent() {
    Filter selected;

    selected = filters.firstWhere((element) => element.selected);

    switch (selected.id) {
      case 'administrators':
        return getAdmins();
      case 'categories':
        return getCategories();
      default:
        return const SizedBox();
    }
  }

  Widget getAdmins() {
    Widget widg;
    List<Widget> cards;
    cards = List.empty(growable: true);

    for (Person admin in admins) {
      cards.add(
        ProfileCardWithActions(
          user: admin,
          buttons: [
            globalAdminIds.contains(admin.documentId)
                ? const Tooltip(
                    message: 'Cannot Delete Global Admins',
                    child: IconButton(
                      onPressed: null,
                      icon: Icon(
                        Icons.delete,
                      ),
                    ),
                  )
                : showConfirmDeleteAdmin
                    ? InlineConfirmationButtons(
                        confirmCallback: () {
                          setState(() {
                            admins.remove(admin);
                            actionAdminIds.remove(admin.documentId);
                            showConfirmDeleteAdmin = false;
                          });
                        },
                        denyCallback: () => setState(() {
                          showConfirmDeleteAdmin = false;
                        }),
                      )
                    : IconButton(
                        onPressed: () {
                          setState(() {
                            showConfirmDeleteAdmin = true;
                          });
                        },
                        icon: const Icon(
                          Icons.delete,
                          color: StyleBase.warningRed,
                        ),
                      ),
          ],
        ),
      );
    }

    widg = Column(
      mainAxisAlignment: MainAxisAlignment.start,
      children: cards,
    );

    return widg;
  }

  Widget getCategories() {
    Widget widg;
    List<Widget> cats;
    double pad;

    pad = kIsWeb ? 4 : 0;

    cats = List.empty(growable: true);

    for (cat.Category categ in categories) {
      cats.add(
        ClickableCardItem(
          title: categ.name,
          leading: const Icon(Icons.category),
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => ActionCategoryAdmin(
                  category: categ,
                  person: user,
                ),
              ),
            // ignore: use_build_context_synchronously
            ).then((value) => Navigator.pushReplacementNamed(context, ActionAdmin.route, arguments: 'categories'));
          },
          trailing: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              showConfirmDeleteCategory && categoryIdToDelete == categ.documentId
                  ? Padding(
                      padding: EdgeInsets.fromLTRB(0, pad, 0, pad),
                      child: InlineConfirmationButtons(
                        confirmCallback: () => setState(() {
                          categories.remove(categ);
                          deletedCategories.add(categ);

                          showConfirmDeleteCategory = false;
                          categoryIdToDelete = '';
                        }),
                        denyCallback: () => setState(() {
                          showConfirmDeleteCategory = false;
                          categoryIdToDelete = '';
                        }),
                      ),
                    )
                  : SizedBox(
                      height: 30,
                      width: 30,
                      child: NumberCircleColoured(
                        message: 'Subcategories',
                        color: Colors.amber,
                        number: categ.subCategories == null ? 0 : categ.subCategories!.length,
                      ),
                    ),
              admins.any((element) => element.documentId == user.documentId && !showConfirmDeleteCategory)
                  ? IconButton(
                      icon: const Icon(
                        Icons.delete,
                        color: StyleBase.warningRed,
                      ),
                      onPressed: () {
                        setState(() {
                          showConfirmDeleteCategory = true;
                          categoryIdToDelete = categ.documentId!;
                        });
                      },
                    )
                  : categoryIdToDelete == categ.documentId!
                      ? Container()
                      : const IconButton(
                          icon: Icon(
                            Icons.delete,
                          ),
                          onPressed: null),
            ],
          ),
        ),
      );
    }

    widg = Column(
      mainAxisAlignment: MainAxisAlignment.start,
      children: cats,
    );

    return widg;
  }

  void filterPressed(int index) {
    setState(() {
      for (var i = 0; i < filters.length; i++) {
        if (i == index) {
          filters[i].selected = true;
        } else {
          filters[i].selected = false;
        }
      }
    });
  }

  deleteCategories() {
    CategoryRepo categoryRepo;
    SubCategoryRepo subCategoryRepo;
    Auditable deleted;
    List<Future<void>> futures;

    categoryRepo = CategoryRepo(customer: user.lastAccessed!, personSnapshot: user.getPersonSnapshot());
    subCategoryRepo = SubCategoryRepo(customer: user.lastAccessed!, personSnapshot: user.getPersonSnapshot());

    deleted = Auditable(dateStamp: DateTime.now(), person: user.getPersonSnapshot());

    futures = List.empty(growable: true);

    for (var c in deletedCategories) {
      c.deleted = deleted;

      futures.add(categoryRepo.update(category: c));

      if (c.subCategories != null && c.subCategories!.isNotEmpty) {
        for (var s in c.subCategories!.values) {
          s.deleted = deleted;

          futures.add(subCategoryRepo.update(subCategory: s));
        }
      }
    }

    Future.wait(futures, eagerError: true).then((value) async {
      // ignore: use_build_context_synchronously
      FeedbackHelp.showSnackbar(context: context, message: 'Categories deleted');
      categories = await categoryRepo.get() as List<cat.Category>;
      setState(() {
        deletedCategories.clear();
      });
    }).catchError((error) async {
      // ignore: use_build_context_synchronously
      FeedbackHelp.showSnackbar(context: context, message: 'Error deleting categories', error: true, exception: error);
      categories = await categoryRepo.get() as List<cat.Category>;
      setState(() {
        deletedCategories.clear();
      });
    });
  }

  Widget? getFAB() {
    Widget? fab;
    Function? pressed;

    switch (filters.indexWhere((element) => element.selected)) {
      case 0:
        pressed = null;
        break;
      case 1:
        pressed = addCategories;
        break;
      default:
        pressed = null;
    }

    if (pressed == null) {
      fab = null;
    } else {
      fab = FloatingActionButton(
        onPressed: () => pressed!(),
        child: const Icon(Icons.add),
      );
    }
    return fab;
  }

  List<Widget> getAppBarActions() {
    List<Widget> widgs;

    widgs = List.empty(growable: true);

    if (filters.indexWhere((element) => element.selected) == 0) {
      widgs.add(
        IconButton(
          onPressed: () async {
            await Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => PeopleSelect(
                  customer: user.lastAccessed!,
                  multiSelect: true,
                  preselectedPeopleIds: globalAdminIds + actionAdminIds,
                  preventRemovalOfPreSelected: true,
                ),
              ),
            ).then((value) {
              for (Person pers in value) {
                if (!globalAdminIds.contains(pers.documentId) && !actionAdminIds.contains(pers.documentId)) {
                  setState(() {
                    actionAdminIds.add(pers.documentId!);
                    admins.add(pers);
                  });
                }
              }
            });
          },
          icon: const Icon(Icons.person_add_alt_1),
        ),
      );

      widgs.add(IconButton(
        onPressed: saveAdmins,
        icon: const Icon(Icons.save),
      ));
    } else if (filters.indexWhere((element) => element.selected) == 1) {
      widgs.add(IconButton(
        onPressed: saveCategories,
        icon: const Icon(Icons.save),
      ));
    }

    return widgs;
  }

  addCategories() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ActionCategoryAdmin(
          category: cat.Category(name: '', subCategories: {}, customer: user.lastAccessed!),
          person: user,
        ),
      ),
    // ignore: use_build_context_synchronously
    ).then((value) => Navigator.pushReplacementNamed(context, ActionAdmin.route, arguments: 'categories'));
  }

  updateOriginals() {
    setState(() {
      originalAdmins = actionAdminIds.map((e) => e.toString()).toList();
      originalCategories = categories.map((e) => e.documentId!).toList();
    });
  }

  saveAdmins() {
    ActionRepo actionRepo;

    if (actionAdminIds.isEmpty) {
      FeedbackHelp.showSnackbar(context: context, message: 'Please add at least one Action Admin', error: true);
    } else {
      actionRepo = ActionRepo(customer: user.lastAccessed!, personSnapshot: user.getPersonSnapshot());

      actionRepo.updateAdmins(adminIds: actionAdminIds).then((value) {
        // ignore: use_build_context_synchronously
        FeedbackHelp.showSnackbar(context: context, message: 'Action Admins updated');
        updateOriginals();
      }).catchError((error) {
        // ignore: use_build_context_synchronously
        FeedbackHelp.showSnackbar(context: context, message: 'Error updating Action Admins', error: true, exception: error);
      });
    }
  }

  saveCategories() {
    //currently the only thing to save from the categories page is the deletion of categories
    if (deletedCategories.isNotEmpty) {
      deleteCategories();
      updateOriginals();
    }
  }

  Future<_InitialisationData> initialiseData() async {
    List<String> globalAdminIds, actionAdminIds;
    List<cat.Category> cats;
    List<SubCategory> subs;
    List<Person> people;
    Person? user;
    GlobalAdminRepo globalRepo;
    CategoryRepo categoryRepo;
    SubCategoryRepo subCategoryRepo;
    PersonRepo personRepo;
    ActionRepo actionRepo;

    personRepo = PersonRepo();

    user = await personRepo.getById(id: FirebaseAuth.instance.currentUser!.uid);

    if (user == null) {
      throw Exception('User not found');
    }

    globalRepo = GlobalAdminRepo(customer: user.lastAccessed!);
    categoryRepo = CategoryRepo(customer: user.lastAccessed!, personSnapshot: user.getPersonSnapshot());
    subCategoryRepo = SubCategoryRepo(customer: user.lastAccessed!, personSnapshot: user.getPersonSnapshot());
    actionRepo = ActionRepo(customer: user.lastAccessed!, personSnapshot: user.getPersonSnapshot());

    return Future.wait(
      [
        globalRepo.get(),
        categoryRepo.get(),
        subCategoryRepo.get(),
        actionRepo.getAdmins(),
      ],
      eagerError: true,
    ).then((List<dynamic> results) async {
      globalAdminIds = results[0];
      cats = results[1];
      subs = results[2];
      actionAdminIds = results[3];

      people = await personRepo.getByList(ids: globalAdminIds + actionAdminIds, populate: true);

      return _InitialisationData(
          admins: people, categories: cats, subCategories: subs, user: user!, globalAdminIds: globalAdminIds, actionAdminIds: actionAdminIds);
    });
  }

  void _showBackDialog({required BuildContext context, required String changedSections}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: Text(
            'Are you sure you want to leave this page? You have unsaved changes to $changedSections',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                Navigator.pop(context); //pop the dialog
                Navigator.pushReplacementNamed(
                  context,
                  ActionsHome.route,
                ); //refresh the page on a call
              },
            ),
          ],
        );
      },
    );
  }
}
