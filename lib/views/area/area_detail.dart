import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/helpers/ui/feedback_help.dart';
import 'package:hart_suite/helpers/ui/icon_help.dart';
import 'package:hart_suite/helpers/ui/layout_help.dart';
import 'package:hart_suite/helpers/class/map_help.dart';
import 'package:hart_suite/models/area/area.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/profile/team.dart';
import 'package:hart_suite/repos/area/area_repo.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/global_admin/admin.dart';
import 'package:hart_suite/views/main/home.dart';
import 'package:hart_suite/views/selectors/area_select.dart';
import 'package:hart_suite/views/selectors/team_select.dart';
import 'package:hart_suite/widgets/cards/clickable_card_item.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/form/text_view.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../error/four04.dart';

class AreaDetailPage extends StatefulWidget {
  static const route = '/area';

  const AreaDetailPage({super.key});

  @override
  State<AreaDetailPage> createState() => _AreaDetailPageState();
}

class _AreaDetailPageState extends State<AreaDetailPage> {
  Person? person;
  late PersonRepo personRepo;
  late Area? area;
  late List<Team> teams;
  late List<Team> selectedTeams;
  late List<String> errors;
  late Map<String, dynamic>? areaMap;
  late Future<Area?>? place;
  late Future<Person?>? foetus;

  @override
  void initState() {
    super.initState();

    personRepo = PersonRepo();
    teams = List.empty(growable: true);
    selectedTeams = List.empty(growable: true);
    errors = List.empty(growable: true);

    foetus = personRepo.getMyFoetus(id: FirebaseAuth.instance.currentUser!.uid);

    area = null;
    areaMap = null;
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (area == null) {
      if (ModalRoute.of(context)!.settings.arguments == null) {
        place = pageDataInitialisation(person: person);
      } else {
        area = ModalRoute.of(context)!.settings.arguments as Area;
        place = pageDataInitialisation(person: person, id: area?.documentId, area: area);
      }
    }

    areaMap ??= area?.toMap();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: foetus,
      builder: (BuildContext context, AsyncSnapshot<Person?> snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasData) {
            person = snapshot.data!;

            return FutureBuilder(
                future: place,
                builder: (BuildContext context, AsyncSnapshot<Area?> areaSnapshot) {
                  if (areaSnapshot.connectionState == ConnectionState.done) {
                    if (areaSnapshot.hasData) {
                      area = areaSnapshot.data;

                      areaMap = area!.toMap();
                      return buildWidget(context: context);
                    } else if (areaSnapshot.hasError) {
                      return Four04Page(args: Four04Args(page: 'Admin', route: AdminPage.route, collection: AdminPage.colAreas));
                    } else {
                      return const FutureBuilderLoader();
                    }
                  } else {
                    return const FutureBuilderLoader();
                  }
                });
          } else if (snapshot.hasError) {
            return Four04Page(args: Four04Args(page: 'Admin', route: AdminPage.route, collection: AdminPage.colAreas));
          } else {
            return const FutureBuilderLoader();
          }
        } else {
          return const FutureBuilderLoader();
        }
      },
    );
  }

  PopScope buildWidget({required BuildContext context}) {
    List<Widget> views = [];
    Widget parent;

    parent = GestureDetector(
      behavior: HitTestBehavior.opaque,
      onTap: () async {
        await Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => AreaSelect(
              personSnapshot: person!.getPersonSnapshot(),
              customer: person!.lastAccessed!,
              multiSelect: false,
              preselectedAreaIds: area!.parent?.keys.toList() ?? [],
            ),
          ),
        ).then((value) {
          if (value != null) {
            setState(() {
              area!.parent = {};
              area!.parent![value[0].documentId!] = value[0];
            });
          }
        });
      },
      child: MouseRegion(
        cursor: SystemMouseCursors.click,
        child: IgnorePointer(
          child: TextView(
            label: 'Parent',
            decoration: StyleBase.getInputDecoration(),
            text: area?.parent?[MapHelp.getFirstKey(map: area!.parent)]?.name ?? '',
            isLauncher: true,
          ).child,
        ),
      ),
    );

    views.addAll(getAreaTextViews(parent: parent));

    views.addAll(getTeamCards());

    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop) {
          if (canNavigateAway()) {
            SchedulerBinding.instance.addPostFrameCallback((_) {
              Navigator.popUntil(context, ModalRoute.withName(AdminPage.route));
            });

            return;
          }

          _showBackDialog(context: context);
        }
      },
      child: Scaffold(
        appBar: AppBar(
          leading: !Navigator.canPop(context) ? IconButton(icon: const Icon(Icons.home), onPressed: () => navigateHome()) : null,
          title: Text(area!.name.isEmpty ? 'New Area' : area!.name),
          actions: getAppBarActions(
            area: area!,
            context: context,
          ),
        ),
        body: Padding(
          padding: const EdgeInsets.fromLTRB(16, 0, 16, 0),
          child: ListView(
            shrinkWrap: true,
            children: views,
          ),
        ),
      ),
    );
  }

  Future<Area?> pageDataInitialisation({required Person? person, String? id, Area? area}) async {
    person ??= await PersonRepo().getById(id: FirebaseAuth.instance.currentUser!.uid);

    await SharedPreferences.getInstance().then((prefs) async {
      if (id != null) {
        await prefs.setString('areaId', id);
      } else if (area == null) {
        String teamId = prefs.getString('areaId') ?? '';

        if (teamId != '' && person != null) {
          AreaRepo areaRepo = AreaRepo(customer: person.lastAccessed!, personSnapshot: person.getPersonSnapshot());
          area = await areaRepo.getById(id: teamId);
        }
      }
    });

    return area;
  }

  bool canNavigateAway() {
    return MapHelp.equals(areaMap!, area!.toMap());
  }

  void _showBackDialog({required BuildContext context}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: const Text(
            'Are you sure you want to leave this page? Any unsaved changes will be lost',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                // Navigator.pop(context); //pop the dialog
                Navigator.popUntil(
                  context,
                  ModalRoute.withName(AdminPage.route),
                ); //refresh the page on a call
              },
            ),
          ],
        );
      },
    );
  }

  List<Widget> getAppBarActions({required Area area, required BuildContext context}) {
    List<Widget> actions = [];
    AreaRepo repo;

    if (person != null) {
      repo = AreaRepo(customer: person!.lastAccessed!, personSnapshot: person!.getPersonSnapshot());

      if (selectedTeams.isNotEmpty) {
        actions.add(
          Padding(
            padding: const EdgeInsets.fromLTRB(0, 0, 8, 0),
            child: Text('${selectedTeams.length} item${selectedTeams.length > 1 ? 's' : ''} selected'),
          ),
        );

        actions.add(
          IconButton(
            icon: IconHelp.getIconFromString(name: 'delete', semanticLabel: 'Delete'),
            onPressed: () {
              for (var element in selectedTeams) {
                area.teams?.remove(element.documentId);
              }

              selectedTeams.clear();

              setState(() {});
            },
          ),
        );
      } else {
        actions.add(
          IconButton(
            icon: IconHelp.getIconFromString(name: 'save', semanticLabel: 'Save'),
            onPressed: () {
              saveArea(repo: repo, context: context);
            },
          ),
        );

        if (area.documentId != null) {
          actions.add(IconButton(
            icon: const Icon(
              Icons.more_vert,
            ),
            onPressed: () {
              showOverflowPopup(context: context, person: person, area: area);
            },
          ));
        }
      }
    }

    return actions;
  }

  void saveArea({required AreaRepo repo, required BuildContext context}) {
    bool valid;

    valid = true;
    errors.clear();

    if (area!.name.isEmpty) {
      setState(() {
        valid = false;
        errors.add('Name');
      });
    }

    if (area!.description.isEmpty) {
      setState(() {
        valid = false;
        errors.add('Description');
      });
    }

    if (!valid) {
      FeedbackHelp.showSnackbar(context: context, message: 'Please correct the following errors: ${errors.join(', ')}', error: true);
      return;
    }

    if (area!.documentId == null) {
      repo
          .add(area: area!)
          .then(
            (value) => {
              // ignore: use_build_context_synchronously
              FeedbackHelp.showSnackbar(context: context, message: 'Area Created'),
              areaMap = area!.toMap(),
            },
          )
          .onError(
            (error, stackTrace) => {
              (error, stackTrace) => FeedbackHelp.showSnackbar(
                  context: context, message: 'Failed to create area, please try again', error: true, exception: error, stackTrace: stackTrace, details: []),
            },
          );
    } else {
      repo
          .update(area: area!)
          .then(
            (value) => {
              // ignore: use_build_context_synchronously
              FeedbackHelp.showSnackbar(context: context, message: 'Area Updated'),
              areaMap = area!.toMap(),
            },
          )
          .onError(
            (error, stackTrace) => {
              (error, stackTrace) => FeedbackHelp.showSnackbar(
                  context: context, message: 'Failed to update area, please try again', error: true, exception: error, stackTrace: stackTrace, details: []),
            },
          );
    }

    setState(() {});
  }

  List<Widget> getAreaTextViews({required Widget parent}) {
    List<Widget> views = [];
    TextView name, description;

    name = TextView(
      label: 'Name',
      text: area!.name,
      decoration: StyleBase.getInputDecoration(
        errorText: errors.contains('Name') ? 'Name is required' : null,
      ),
    );

    name.dataBind(callback: () => area!.name = name.controller!.text);

    description = TextView(
      label: 'Description',
      text: area!.description,
      decoration: StyleBase.getInputDecoration(
        errorText: errors.contains('Description') ? 'Description is required' : null,
      ),
    );

    description.dataBind(callback: () => area!.description = description.controller!.text);

    views.add(
      Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          kIsWeb
              ? Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    getAreaTextViewWrap(child: name.child, flex: true),
                    getAreaTextViewWrap(child: parent, flex: true),
                  ],
                )
              : Column(
                  children: [
                    getAreaTextViewWrap(child: name.child),
                    getAreaTextViewWrap(child: parent),
                  ],
                ),
          Row(
            children: [getAreaTextViewWrap(child: description.child, flex: true)],
          ),
          const Gap(12),
          Row(
            children: [
              Expanded(child: getDivider(text: 'Teams')),
              TextButton(
                onPressed: () async {
                  await Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => TeamSelect(
                          customer: person!.lastAccessed!,
                          preselectedTeamIds: area!.teams?.keys.toList() ?? [],
                          multiSelect: true,
                        ),
                      )).then((value) {
                    if (value != null) {
                      area!.teams = {};
                      for (var element in value) {
                        area!.teams![element.documentId!] = element;
                      }
                    }
                    setState(() {});
                  });
                },
                child: const Text('Search Teams'),
              ),
            ],
          ),
        ],
      ),
    );

    return views;
  }

  Widget getAreaTextViewWrap({required Widget child, bool flex = false}) {
    Widget widg;

    widg = Padding(
      padding: const EdgeInsets.fromLTRB(8, 16, 8, 8),
      child: child,
    );

    if (flex) {
      widg = Expanded(
        flex: 1,
        child: widg,
      );
    }
    return widg;
  }

  List<Widget> getTeamCards() {
    List<Widget> widgets = [];

    area!.teams?.forEach((key, value) {
      widgets.add(
        GestureDetector(
          onLongPress: () => {},
          child: ClickableCardItem(
            title: value!.name,
            leading: selectedTeams.contains(value)
                ? IconHelp.getIconFromString(name: 'check_circle', semanticLabel: 'Selected', color: Colors.green)
                : IconHelp.getIconFromString(name: 'groups', semanticLabel: 'group'),
            onTap: () => {
              if (selectedTeams.contains(value))
                {
                  selectedTeams.remove(value),
                }
              else
                {
                  selectedTeams.add(value),
                },
              setState(() {}),
            },
            trailing: null,
          ),
        ),
      );
    });

    return widgets;
  }

  showOverflowPopup({required BuildContext context, required Person? person, required Area area}) {
    double left, top, right, bottom;
    Size screenSize;
    List<PopupMenuEntry<int>> items = [];
    AreaRepo areaRepo;
    Auditable deleted;

    if (person != null) {
      areaRepo = AreaRepo(customer: person.lastAccessed!, personSnapshot: person.getPersonSnapshot());

      items.add(const PopupMenuItem(
        value: 0,
        child: Text('Delete Area'),
      ));

      screenSize = MediaQuery.of(context).size;

      left = screenSize.width;
      top = 0;
      right = 0;
      bottom = screenSize.height;

      showMenu(
        context: context,
        position: RelativeRect.fromLTRB(left, top, right, bottom),
        items: items,
        elevation: 8.0,
      ).then((value) {
        if (value != null) {
          switch (value) {
            case 0:
              showDialog<String>(
                // ignore: use_build_context_synchronously
                context: context,
                builder: (BuildContext context) => AlertDialog(
                  title: const Text('Confirm Delete'),
                  content: const Text('Are you sure you want to delete this Area? \nThis action cannot be undone.'),
                  actions: <Widget>[
                    TextButton(
                      onPressed: () => {Navigator.pop(context, 'Cancel')},
                      child: const Text('Cancel'),
                    ),
                    TextButton(
                      onPressed: () => {
                        deleted = Auditable(person: person.getPersonSnapshot(), dateStamp: DateTime.now()),
                        area.deleted = deleted,
                        areaRepo.update(area: area).then((value) {
                          // ignore: use_build_context_synchronously
                          Navigator.pushReplacementNamed(context, AdminPage.route, arguments: AdminPage.colAreas);
                        }),
                      },
                      child: const Text('OK'),
                    ),
                  ],
                ),
              );

              break;
          }
        }
      });
    }
  }

  navigateHome() {
    if (canNavigateAway()) {
      Navigator.pushNamed(context, HomePage.route);
    } else {
      _showBackDialog(context: context);
    }
  }
}
