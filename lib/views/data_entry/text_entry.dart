import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';

class TextEntry extends StatefulWidget {
  final String title, label;
  final TextInputType type;
  final String? initialValue;

  const TextEntry({super.key, required this.title, required this.label, this.type = TextInputType.text, this.initialValue});

  @override
  State<TextEntry> createState() => _TextEntryState();
}

class _TextEntryState extends State<TextEntry> {
  late TextEditingController controller;

  @override
  void initState() {
    super.initState();
    controller = TextEditingController();
    controller.text = widget.initialValue ?? '';
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop) {
          if (controller.text.isEmpty) {
            SchedulerBinding.instance.addPostFrameCallback((_) {
              Navigator.pop(context, null);
            });

            return;
          }

          _showBackDialog(context: context);
        }
      },
      child: Scaffold(
          appBar: AppBar(
            title: Text(widget.title),
            actions: [
              IconButton(
                icon: const Icon(Icons.check),
                onPressed: () {
                  Navigator.pop(context, controller.text);
                },
              ),
            ],
          ),
          body: Padding(
            padding: const EdgeInsets.all(6),
            child: TextField(
              keyboardType: widget.type,
              controller: controller,
              maxLines: null,
              decoration: InputDecoration(
                border: const OutlineInputBorder(),
                labelText: widget.label,
              ),
            ),
          )),
    );
  }

  void _showBackDialog({required BuildContext context}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: const Text(
            'Are you sure you want to leave this page? Any unsaved changes will be lost',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                Navigator.pop(context); //pop the dialog
                Navigator.pop(context); //pop the page without passing back the comment
              },
            ),
          ],
        );
      },
    );
  }
}
