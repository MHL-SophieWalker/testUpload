import 'dart:async';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:hart_suite/helpers/ui/feedback_help.dart';
import 'package:hart_suite/helpers/ui/layout_help.dart';
import 'package:hart_suite/helpers/class/map_help.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/profile/team.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/repos/profile/team_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/global_admin/admin.dart';
import 'package:hart_suite/views/error/four04.dart';
import 'package:hart_suite/views/main/home.dart';
import 'package:hart_suite/views/selectors/people_select.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:hart_suite/widgets/profile/profile_card.dart';
import 'package:hart_suite/widgets/form/text_view.dart';
import 'package:shared_preferences/shared_preferences.dart';

class _InitialisationData {
  final Person? person;
  final Team? team;

  _InitialisationData({this.person, this.team});
}

class TeamDetailPage extends StatefulWidget {
  static const route = '/team';
  final bool forceRefresh;

  const TeamDetailPage({super.key, this.forceRefresh = false});

  @override
  State<TeamDetailPage> createState() => _TeamDetailPageState();
}

class _TeamDetailPageState extends State<TeamDetailPage> {
  late PersonRepo personRepo;
  late Future<_InitialisationData> initData;
  late Person? person;
  late Team? team;
  late String? imageUrl;
  late bool firstLoad, loading;
  late Reference ref;
  late List<Widget> actionBarItems;
  late List<String> selectedPersonIds, errors;
  late bool autocompleteResultsVisible;
  late Map<String, dynamic>? teamMap;

  @override
  void initState() {
    super.initState();

    loading = true;
    personRepo = PersonRepo();
    firstLoad = true;
    ref = FirebaseStorage.instance.ref();
    actionBarItems = List.empty(growable: true);
    selectedPersonIds = List.empty(growable: true);
    errors = List.empty(growable: true);

    initData = initialiseData();

    team = null;
    person = null;
    autocompleteResultsVisible = false;
    teamMap = null;
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (ModalRoute.of(context)!.settings.arguments != null) {
      team = ModalRoute.of(context)!.settings.arguments as Team;
      setSharedPrefsId(id: team?.documentId);

      teamMap ??= team!.toMap();
    } else {
      teamMap = {};
    }
  }

  @override
  Widget build(BuildContext context) {
    if (widget.forceRefresh) {
      initData = initialiseData();
    }

    return FutureBuilder(
      future: initData,
      builder: (BuildContext context, AsyncSnapshot<_InitialisationData?> snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasData) {
            person = snapshot.data!.person;
            team = snapshot.data!.team;

            if (teamMap == null || teamMap!.isEmpty) {
              teamMap = team!.toMap();
            }

            return buildWidget(context: context);
          } else if (snapshot.hasError) {
            return Four04Page(args: Four04Args(page: 'Admin', route: AdminPage.route, collection: AdminPage.colTeams));
          } else {
            return const FutureBuilderLoader();
          }
        } else {
          return const FutureBuilderLoader();
        }
      },
    );
  }

  PopScope buildWidget({required BuildContext context}) {
    List<Widget> widgets;
    int columnCount = getColumnCount(context: context);

    widgets = initialiseWidgets(widget: widget);

    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop) {
          if (canGoBack()) {
            SchedulerBinding.instance.addPostFrameCallback((_) {
              Navigator.popUntil(context, ModalRoute.withName(AdminPage.route));
            });

            return;
          }

          _showBackDialog(context: context);
        }
      },
      child: Scaffold(
        appBar: AppBar(
          leading: !Navigator.canPop(context) ? IconButton(icon: const Icon(Icons.home), onPressed: () => navigateHome()) : null,
          title: Text(team!.name.isEmpty ? 'New Team' : team!.name),
          actions: getAppBarActions(context: context),
        ),
        body: Padding(
          padding: const EdgeInsets.fromLTRB(8, 4, 8, 4),
          child: ListView(
            children: [
              Padding(
                padding: const EdgeInsets.fromLTRB(8, 16, 8, 8),
                child: getSection(
                    context: context,
                    items: widgets,
                    sectionHeight: StyleBase.getSectionHeight(count: widgets.length, columnCount: columnCount),
                    columnCount: columnCount),
              ),
              getDivider(text: 'Team Members'),
              getMembers(),
            ],
          ),
        ),
      ),
    );
  }

  setSharedPrefsId({required String? id}) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();

    prefs.setString('teamId', id ?? '');
  }

  Future<Team?> pageDataInitialisation({required Person? person, Team? team}) async {
    String? id;

    person ??= await PersonRepo().getById(id: FirebaseAuth.instance.currentUser!.uid);
    id = team?.documentId;

    await SharedPreferences.getInstance().then((prefs) async {
      if (id != null) {
        prefs.setString('teamId', id);
      } else if (team == null) {
        String teamId = prefs.getString('teamId') ?? '';

        if (teamId != '' && person != null) {
          TeamRepo teamRepo = TeamRepo(customer: person.lastAccessed!, personSnapshot: person.getPersonSnapshot());
          team = await teamRepo.getById(
            id: teamId,
            populate: true,
          );
        }
      }

      if (team?.members != null) {
        if (team!.members!.values.any((element) => element == null || element.remoteImageUrl == null)) {
          if (person != null) {
            TeamRepo teamRepo = TeamRepo(customer: person.lastAccessed!, personSnapshot: person.getPersonSnapshot());
            team = await teamRepo.populateItem(team: team!);
          }
        }
      }
    });

    return team;
  }

  Future<_InitialisationData> initialiseData() async {
    Person? person;
    Team? myTeam;

    person = await personRepo.getById(id: FirebaseAuth.instance.currentUser!.uid);
    myTeam = await pageDataInitialisation(person: person, team: team);

    return _InitialisationData(person: person, team: myTeam);
  }

  List<Widget> initialiseWidgets({required TeamDetailPage widget}) {
    List<Widget> widgets = List.empty(growable: true);
    TextView name;

    name = TextView(
      label: 'Name',
      text: team!.name,
      decoration: StyleBase.getInputDecoration(
        errorText: errors.contains('Name') ? 'Enter a name' : null,
      ),
    );

    name.dataBind(
        callback: () => {
              team!.name = name.controller!.text,
            });

    widgets.add(name.child);

    return widgets;
  }

  Widget getMembers() {
    Widget memberSection;
    List<Person?>? members;
    bool removed;
    TeamRepo teamRepo;

    removed = false;

    if (team!.members == null || autocompleteResultsVisible) {
      memberSection = Container();
    } else {
      members = team!.members?.values.toList();

      if (members != null) {
        for (var mem in team!.members!.values.where((element) => element == null)) {
          members.remove(mem);
          removed = true;
        }

        if (removed) {
          //if a member hasn
          teamRepo = TeamRepo(customer: person!.lastAccessed!, personSnapshot: person!.getPersonSnapshot());

          teamRepo.update(team: team!);
        }
      }

      members?.sort((a, b) {
        if (a == null || b == null) {
          return 0;
        } else {
          return a.fullName.compareTo(b.fullName);
        }
      });

      team!.leaders ??= {};

      memberSection = ListView(shrinkWrap: true, children: [
        for (var val in members!) getMemberItem(person: val, isLeader: team!.leaders!.keys.contains(val?.documentId)),
      ]);
    }

    return memberSection;
  }

  Widget getMemberItem({required Person? person, required bool isLeader}) {
    Widget memberItem;
    Icon icon;

    if (isLeader) {
      icon = const Icon(
        Icons.workspace_premium_sharp,
        color: StyleBase.blue,
        size: 30,
      );
    } else {
      icon = const Icon(
        Icons.workspace_premium_sharp,
        color: StyleBase.grey,
        size: 30,
      );
    }

    if (person == null) {
      memberItem = Container();
    } else {
      memberItem = GestureDetector(
        onTap: (() => {toggleSelectedPerson(person)}),
        onLongPress: () => toggleSelectedPerson(person),
        child: Card(
          color: Theme.of(context).cardColor,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          child: Row(
            children: [
              Flexible(
                flex: 3,
                child: Align(
                  alignment: Alignment.centerLeft,
                  child:
                      ProfileCard(person: person, showItems: [ProfileCard.showJobTitle], isSelected: selectedPersonIds.contains(person.documentId)).profileCard,
                ),
              ),
              selectedPersonIds.isEmpty
                  ? Padding(
                      padding: const EdgeInsets.all(4),
                      child: IconButton(onPressed: () => toggleLeader(person: person), icon: icon),
                    )
                  : Container(),
            ],
          ),
        ),
      );
    }

    return memberItem;
  }

  Set<Set<void>> toggleSelectedPerson(Person person) {
    return {
      if (selectedPersonIds.contains(person.documentId))
        {
          setState(() {
            selectedPersonIds.remove(person.documentId);
          })
        }
      else
        {
          setState(() {
            selectedPersonIds.add(person.documentId!);
          })
        }
    };
  }

  populateTeam() {
    TeamRepo teamRepo = TeamRepo(customer: person!.lastAccessed!, personSnapshot: person!.getPersonSnapshot());

    teamRepo.populateItem(team: team!).then((value) {
      if (mounted) {
        setState(() {
          team = value;
        });
      }
    });
  }

  List<Widget> getAppBarActions({required BuildContext context}) {
    List<Widget> actions = List.empty(growable: true);

    if (person != null) {
      TeamRepo teamRepo = TeamRepo(customer: person!.lastAccessed!, personSnapshot: person!.getPersonSnapshot());

      if (selectedPersonIds.isNotEmpty) {
        actions.add(Padding(
          padding: const EdgeInsets.fromLTRB(0, 0, 8, 0),
          child: Text('${selectedPersonIds.length} item${selectedPersonIds.length > 1 ? 's' : ''} selected'),
        ));

        actions.add(IconButton(
          icon: const Icon(Icons.delete),
          onPressed: () {
            for (var element in selectedPersonIds) {
              team!.members!.remove(element);

              if (team!.leaders != null) {
                team!.leaders!.remove(element);
              }
            }

            selectedPersonIds.clear();

            setState(() {});
          },
        ));
      } else {
        actions.add(
          Tooltip(
            message: 'Add Person to Team',
            child: IconButton(
              onPressed: () async {
                await Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => PeopleSelect(
                      customer: person!.lastAccessed!,
                      multiSelect: true,
                      preselectedPeopleIds: team!.members!.keys.toList(),
                      preventRemovalOfPreSelected: true,
                    ),
                  ),
                ).then((value) {
                  team!.members ??= {};

                  setState(() {
                    for (Person pers in value) {
                      if (!team!.members!.keys.contains(pers.documentId)) {
                        team!.members![pers.documentId!] = pers;
                      }
                    }
                  });
                });
              },
              icon: const Icon(Icons.person_add_alt_1),
            ),
          ),
        );

        actions.add(IconButton(
          icon: const Icon(
            Icons.save,
          ),
          onPressed: () {
            saveTeam(teamRepo: teamRepo, context: context);
          },
        ));

        if (team!.documentId != null) {
          actions.add(IconButton(
            icon: const Icon(
              Icons.more_vert,
            ),
            onPressed: () {
              showOverflowPopup(context: context);
            },
          ));
        }
      }
    }

    return actions;
  }

  void saveTeam({required TeamRepo teamRepo, required BuildContext context}) {
    bool valid;

    valid = true;
    errors.clear();

    if (team!.name.isEmpty) {
      valid = false;

      setState(() {
        errors.add('Name');
      });

      FeedbackHelp.showSnackbar(context: context, message: 'Please enter a valid team name.', error: true);
    }

    if (valid) {
      if (team!.documentId == null) {
        teamRepo
            .add(team: team!)
            .then((value) => {
                  // ignore: use_build_context_synchronously
                  FeedbackHelp.showSnackbar(context: context, message: 'Team created successfully.'),
                  teamMap = team!.toMap(),
                })
            .onError((error, stackTrace) => {
                  FeedbackHelp.showSnackbar(
                      // ignore: use_build_context_synchronously
                      context: context,
                      message: 'An error occurred while creating the team, please try again.',
                      error: true,
                      exception: error,
                      stackTrace: stackTrace,
                      details: [])
                });
      } else {
        teamRepo
            .update(team: team!)
            .then((value) => {
                  // ignore: use_build_context_synchronously
                  FeedbackHelp.showSnackbar(context: context, message: 'Team updated successfully.'),
                  teamMap = team!.toMap(),
                })
            .onError((error, stackTrace) => {
                  FeedbackHelp.showSnackbar(
                      // ignore: use_build_context_synchronously
                      context: context,
                      message: 'An error occurred while updating the team, please try again.',
                      error: true,
                      exception: error,
                      stackTrace: stackTrace,
                      details: [])
                });
      }
    }
  }

  toggleLeader({required Person person}) {
    setState(() {
      if (team!.leaders!.keys.contains(person.documentId)) {
        team!.leaders!.remove(person.documentId);
      } else {
        team!.leaders![person.documentId!] = person;
      }
    });
  }

  showOverflowPopup({required BuildContext context}) {
    double left, top, right, bottom;
    Size screenSize;
    List<PopupMenuEntry<int>> items = [];
    TeamRepo teamRepo;
    Auditable deleted;

    if (person != null) {
      teamRepo = TeamRepo(customer: person!.lastAccessed!, personSnapshot: person!.getPersonSnapshot());

      items.add(const PopupMenuItem(
        value: 0,
        child: Text('Delete Team'),
      ));

      screenSize = MediaQuery.of(context).size;

      left = screenSize.width;
      top = 0;
      right = 0;
      bottom = screenSize.height;

      showMenu(
        context: context,
        position: RelativeRect.fromLTRB(left, top, right, bottom),
        items: items,
        elevation: 8.0,
      ).then((value) {
        if (value != null) {
          switch (value) {
            case 0:
              showDialog<String>(
                // ignore: use_build_context_synchronously
                context: context,
                builder: (BuildContext context) => AlertDialog(
                  title: const Text('Confirm Delete'),
                  content: const Text(
                      'Are you sure you want to delete this team? \nAll members and the team calendar will be removed. \nThis action cannot be undone.'),
                  actions: <Widget>[
                    TextButton(
                      onPressed: () => {Navigator.pop(context, 'Cancel')},
                      child: const Text('Cancel'),
                    ),
                    TextButton(
                      onPressed: () => {
                        deleted = Auditable(person: person!.getPersonSnapshot(), dateStamp: DateTime.now()),
                        team!.deleted = deleted,
                        teamRepo.update(team: team!).then((value) {
                          // ignore: use_build_context_synchronously
                          Navigator.pushReplacementNamed(context, AdminPage.route, arguments: AdminPage.colTeams);
                        }),
                      },
                      child: const Text('OK'),
                    ),
                  ],
                ),
              );

              break;
          }
        }
      });
    }
  }

  void _showBackDialog({required BuildContext context}) {
    showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Are you sure?'),
          content: const Text(
            'Are you sure you want to leave this page?',
          ),
          actions: <Widget>[
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Nevermind'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            TextButton(
              style: TextButton.styleFrom(
                textStyle: Theme.of(context).textTheme.labelLarge,
              ),
              child: const Text('Leave'),
              onPressed: () {
                Navigator.popUntil(context, ModalRoute.withName(AdminPage.route));
              },
            ),
          ],
        );
      },
    );
  }

  /// This go back doesn't use a strict map comparisson as otherwise it will catch any changes to the people in the teams details
  /// such as their job title, name, manager, etc. all of which are not relevant to the team itself.
  bool canGoBack() {
    bool canGo;

    canGo = true;

    if (teamMap?['name'] != team!.name) {
      canGo = false;
    } else if (team?.members == null || !MapHelp.equalsList(team!.members!.keys.toList(), teamMap!['members'].keys.toList())) {
      canGo = false;
    } else if (team?.leaders == null || !MapHelp.equalsList(team!.leaders!.keys.toList(), teamMap!['leaders'].keys.toList())) {
      canGo = false;
    }

    return canGo;
  }

  navigateHome() {
    if (canGoBack()) {
      Navigator.pushReplacementNamed(context, HomePage.route);
    } else {
      _showBackDialog(context: context);
    }
  }
}
