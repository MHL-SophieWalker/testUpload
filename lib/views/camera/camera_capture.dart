import 'package:camera/camera.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';
import 'package:gap/gap.dart';
import 'package:hart_suite/error_handler.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/views/camera/camera_capture_confirmation.dart';
import 'package:hart_suite/views/error/four04.dart';
import 'package:hart_suite/views/main/home.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:native_device_orientation/native_device_orientation.dart';
import 'package:permission_handler/permission_handler.dart';

class CameraCaptureInitialisationData {
  List<CameraDescription> cameras;
  Person person;
  PermissionStatus status;

  CameraCaptureInitialisationData({
    required this.cameras,
    required this.person,
    required this.status,
  });
}

class CameraCapture extends StatefulWidget {
  static const route = '/cameraCapture';
  const CameraCapture({super.key});

  @override
  State<CameraCapture> createState() => CameraCaptureState();
}

class CameraCaptureState extends State<CameraCapture> {
  late CameraDescription? camera;
  Future<CameraCaptureInitialisationData>? initialisationData;
  late CameraCaptureInitialisationData initialData;
  late Person person;
  late List<CameraDescription> cameras;
  late CameraController controller;
  late PermissionStatus? status;
  late Future<void> cameraFuture;

  @override
  void initState() {
    super.initState();
    camera = null;
    status = null;

    SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]);

    initialisationData = initialise();
  }

  @override
  void dispose() {
    controller.dispose();

    SystemChrome.setPreferredOrientations(
        [DeviceOrientation.portraitUp, DeviceOrientation.portraitDown, DeviceOrientation.landscapeLeft, DeviceOrientation.landscapeRight]);

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      floatingActionButton: status == null || status != PermissionStatus.granted
          ? null
          : Center(
              child: Stack(
                children: [
                  Align(
                    alignment: Alignment.bottomCenter,
                    child: Padding(
                      //used to force the FAB to be central, for some reason the other centers don't make this happen
                      padding: const EdgeInsets.only(left: 34),
                      child: FloatingActionButton(
                        heroTag: 'takeImage',
                        onPressed: () {
                          controller.takePicture().then((value) {
                            //navigate to the show image page
                            // ignore: use_build_context_synchronously
                            Navigator.push(context, MaterialPageRoute(builder: (context) {
                              return CameraCaptureConfirmation(
                                image: value,
                              );
                            })).then((value) {
                              //return the value to the previous page
                              // ignore: use_build_context_synchronously
                              Navigator.pop(context, value);
                            });
                          });
                        },
                        backgroundColor: Colors.white,
                        shape: const CircleBorder(),
                      ),
                    ),
                  ),
                  Align(
                    alignment: Alignment.bottomRight,
                    child: NativeDeviceOrientationReader(
                      useSensor: true,
                      builder: (context) {
                        NativeDeviceOrientation orientation;
                        int turns;

                        orientation = NativeDeviceOrientationReader.orientation(context);

                        switch (orientation) {
                          case NativeDeviceOrientation.portraitUp:
                            turns = 0;
                            break;
                          case NativeDeviceOrientation.portraitDown:
                            turns = 2;
                            break;
                          case NativeDeviceOrientation.landscapeLeft:
                            turns = 1;
                            break;
                          case NativeDeviceOrientation.landscapeRight:
                            turns = 3;
                            break;
                          case NativeDeviceOrientation.unknown:
                            turns = 0;
                            break;
                          default:
                            turns = 0;
                            break;
                        }
                        return RotatedBox(
                          quarterTurns: turns,
                          child: FloatingActionButton(
                            heroTag: 'changeCamera',
                            onPressed: () {
                              setState(() {
                                changeCamera();
                              });
                            },
                            backgroundColor: Colors.transparent,
                            child: const Icon(
                              Icons.sync_sharp,
                              color: Colors.white,
                              size: 48,
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
      body: FutureBuilder(
        future: initialisationData,
        builder: ((context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            if (snapshot.hasData) {
              initialData = snapshot.data as CameraCaptureInitialisationData;

              if (status == null) {
                SchedulerBinding.instance.addPostFrameCallback((timeStamp) {
                  setState(() {
                    person = initialData.person;
                    cameras = initialData.cameras;
                    status = initialData.status;
                  });
                });
              }

              camera ??= cameras.first;

              controller = CameraController(camera!, ResolutionPreset.medium);
              cameraFuture = controller.initialize();

              return FutureBuilder(
                  future: cameraFuture,
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.done) {
                      return buildWidget();
                    } else {
                      return const Center(child: CircularProgressIndicator());
                    }
                  });
            } else if (snapshot.hasError) {
              ErrorHandler.logError(exception: snapshot.error);
              return Four04Page(args: Four04Args(page: 'Home', route: HomePage.route));
            } else {
              return const FutureBuilderLoader();
            }
          } else {
            return const FutureBuilderLoader();
          }
        }),
      ),
    );
  }

  Widget buildWidget() {
    Widget widg;

    if (status == PermissionStatus.granted) {
      widg = getCameraPreview();
    } else {
      widg = Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text('Camera permission not granted, to upload images from your camera please click below to go to settings and enable camera permissions'),
            const Gap(8),
            TextButton(
              onPressed: openAppSettings,
              style: ButtonStyle(
                backgroundColor: WidgetStateProperty.all(StyleBase.lightGrey),
              ),
              child: const Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(Icons.settings),
                  Gap(6),
                  Text('Settings'),
                ],
              ),
            ),
          ],
        ),
      );
    }

    return widg;
  }

  Widget getCameraPreview() {
    Widget prev;

    prev = Column(
      children: [
        Expanded(
          child: Container(
            color: Colors.black,
          ),
        ),
        CameraPreview(controller),
        Expanded(
          child: Container(
            color: Colors.black,
          ),
        ),
      ],
    );

    return prev;
  }

  Future<CameraCaptureInitialisationData> initialise() async {
    Person? person;
    PermissionStatus status = await Permission.camera.request();
    final cameras = await availableCameras();

    person = await PersonRepo().getById(id: FirebaseAuth.instance.currentUser!.uid);

    return CameraCaptureInitialisationData(
      cameras: cameras,
      person: person!,
      status: status,
    );
  }

  void changeCamera() {
    for (int i = 0; i < cameras.length; i++) {
      if (cameras[i] == camera && i < cameras.length - 1) {
        camera = cameras[i + 1];
        break;
      } else {
        camera = cameras.first;
      }
    }
  }
}
