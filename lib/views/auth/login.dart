import 'dart:math';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:hart_suite/style/style_base.dart';
import 'package:hart_suite/widgets/loading/future_builder_loader.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:sign_in_button/sign_in_button.dart';
import 'package:url_launcher/url_launcher_string.dart';

class LoginPage extends StatefulWidget {
  static const route = '/login';
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  UserCredential? userCredential;
  late Future<SharedPreferences> prefs;
  late bool showCookies;
  late String loginImagePath;

  @override
  void initState() {
    super.initState();
    prefs = SharedPreferences.getInstance();
    loginImagePath = getLoginImagePath();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<SharedPreferences>(
      future: prefs,
      builder: (context, snapshot) {
        if (snapshot.hasData) {
          if (snapshot.data!.getBool('acceptedCookies') == null) {
            showCookies = true;
            return buildWidget();
          } else {
            showCookies = !snapshot.data!.getBool('acceptedCookies')!;
            return buildWidget();
          }
        } else {
          return const FutureBuilderLoader();
        }
      },
    );
  }

  Widget buildWidget() {
    return Stack(
      children: [
        Image.asset(loginImagePath, fit: BoxFit.cover, height: double.infinity, width: double.infinity),
        Center(
          child: Container(
            color: StyleBase.grey.withOpacity(0.9),
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                mainAxisSize: MainAxisSize.min,
                children: [
                  Image.asset(
                    'assets/images/feature_graphic.png',
                    scale: 1.2,
                  ),
                  const SizedBox(height: 16),
                  SignInButton(
                    Buttons.google,
                    onPressed: () {
                      signInWithGoogle().then((value) => userCredential = value);
                    },
                  ),
                  const SizedBox(height: 16),
                  //🍎 login needs a Mac
                  // SignInButton(
                  //   Buttons.apple,
                  //   onPressed:
                  //       () {},
                  // ),
                  SignInButton(
                    Buttons.microsoft,
                    onPressed: () {
                      signInWithMicrosoft().then((value) => userCredential = value);
                    },
                    //on web the micrsofot button is small, so we need to add padding but on Android it works well
                    //needs testing on Apple after we have a Mac
                    padding: kIsWeb ? const EdgeInsets.fromLTRB(0, 15, 0, 15) : const EdgeInsets.fromLTRB(0, 0, 0, 0),
                  ),
                  const SizedBox(height: 16),
                  RichText(
                    textScaler: const TextScaler.linear(0.9),
                    textAlign: TextAlign.center,
                    text: TextSpan(
                      text: 'By signing in you agree to our Terms of Service and Privacy Policy, \r\nMore details are available',
                      children: [
                        TextSpan(
                            text: ' here',
                            style: const TextStyle(color: StyleBase.blue),
                            recognizer: TapGestureRecognizer()..onTap = () => launchUrlString('https://www.hartsuite.com/terms')),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
        kIsWeb && showCookies
            ? Align(
                alignment: Alignment.bottomCenter,
                child: SizedBox(
                    height: 50,
                    child: Card(
                      child: Row(
                        children: [
                          const SizedBox(width: 16),
                          const Expanded(
                              child: Text(
                                  'This site uses cookies to improve your experience. By continuing to use this site, you agree to our use of cookies as listed in our terms.')),
                          Align(
                            alignment: Alignment.centerRight,
                            child: TextButton(
                              child: const Text('Terms'),
                              onPressed: () => launchUrlString('https://www.hartsuite.com/terms/cookies'),
                            ),
                          ),
                          Align(
                            alignment: Alignment.centerRight,
                            child: TextButton(
                              child: const Text('OK'),
                              onPressed: () => setAcceptedCookies(),
                            ),
                          ),
                        ],
                      ),
                    )),
              )
            : Container(),
      ],
    );
  }

  setAcceptedCookies() {
    SharedPreferences.getInstance().then((prefs) {
      prefs.setBool('acceptedCookies', true);

      setState(
        () => showCookies = false,
      );
    });
  }
}

String getLoginImagePath() {
  String path;
  int id;

  id = Random().nextInt(7);

  if (kIsWeb) {
    path = 'assets/images/login/web';
  } else {
    path = 'assets/images/login/mobile';
  }

  return '$path/$id.jpg';
}

Future<UserCredential?> signInWithGoogle() async {
  UserCredential? userCredential;

  userCredential = null;

  if (kIsWeb) {
    // Trigger the authentication flow
    final GoogleAuthProvider googleAuthProvider = GoogleAuthProvider();
    googleAuthProvider.setCustomParameters({'prompt': 'select_account'});

    await FirebaseAuth.instance.signInWithPopup(googleAuthProvider).then((value) => userCredential = value);
  } else {
    final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();

    // Obtain the auth details from the request
    final GoogleSignInAuthentication? googleAuth = await googleUser?.authentication;

    // Create a new credential
    final credential = GoogleAuthProvider.credential(
      accessToken: googleAuth?.accessToken,
      idToken: googleAuth?.idToken,
    );

    await FirebaseAuth.instance.signInWithCredential(credential).then((value) => userCredential = value);
  }
  // Once signed in, return the UserCredential
  return userCredential;
}

Future<UserCredential?> signInWithMicrosoft() async {
  UserCredential? userCredential;

  userCredential = null;

  final microsoftProvider = MicrosoftAuthProvider();
  microsoftProvider.setCustomParameters({'prompt': 'select_account'});
  if (kIsWeb) {
    await FirebaseAuth.instance.signInWithPopup(microsoftProvider).then((value) => userCredential = value);
  } else {
    await FirebaseAuth.instance.signInWithProvider(microsoftProvider).then((value) => userCredential = value);
  }

  return userCredential;
}
