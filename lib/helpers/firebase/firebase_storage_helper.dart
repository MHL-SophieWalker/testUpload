import 'dart:io';

import 'package:camera/camera.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/foundation.dart';

import 'package:image/image.dart' as img;

class FirebaseStorageHelper {
  static Future<UploadTask> uploadImage({required img.Image destImage, required XFile? image, required String remotePath, String cropPath = ''}) async {
    String path;
    SettableMetadata metaData;
    Uint8List jpg = img.encodeJpg(destImage);
    UploadTask uploadTask;

    metaData = SettableMetadata(contentType: 'image/jpeg', customMetadata: {'picked-file-path': image!.path});

    if (kIsWeb) {
      uploadTask = FirebaseStorage.instance.ref().child(remotePath).putData(jpg, metaData);
    } else {
      if (image.path.isEmpty) {
        path = cropPath;
      } else {
        path = image.path;
      }
      await File(path).writeAsBytes(jpg);
      uploadTask = FirebaseStorage.instance.ref().child(remotePath).putFile(File(path), metaData);
    }

    if (kIsWeb) {
      return Future.value(uploadTask);
    } else {
      return uploadTask;
    }
  }

  static Future<String> getProfileImageDownloadUrl({required String imagePath}) async {
    String url = '';

    await FirebaseStorage.instance
        .ref()
        .child(imagePath)
        .getDownloadURL()
        .then(
          (value) => url = value.toString(),
        )
        .catchError((error) {
      return '';
    });

    return url;
  }

  static Future<UploadTask> uploadFile({required String contentType, required String path, Uint8List? bytes, String? localPath, String? newFileName}) {
    SettableMetadata metadata;
    Reference storageRef;
    UploadTask uploadTask;

    metadata = SettableMetadata(contentType: contentType);
    storageRef = FirebaseStorage.instance.ref();

    if (newFileName != null) {}

    if (kIsWeb) {
      uploadTask = storageRef.child(path).putData(bytes!, metadata);
    } else {
      uploadTask = storageRef.child(path).putFile(File(localPath!), metadata);
    }

    return Future.value(uploadTask);
  }

  static void deleteFile(String path) {
    FirebaseStorage.instance.ref().child(path).delete();
  }
}
