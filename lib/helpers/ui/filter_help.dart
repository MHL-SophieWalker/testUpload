import 'package:flutter/material.dart';
import 'package:hart_suite/models/general/filter.dart';
import 'package:hart_suite/style/style_base.dart';

class FilterHelp {
  static List<Widget> getFilters(List<Filter> filters, bool expanded, {List<String> errors = const []}) {
    List<Widget> filterWidgets;

    filterWidgets = List.empty(growable: true);

    for (var filt in filters) {
      if (expanded) {
        //show icons and text
        filterWidgets.add(
          Align(
            alignment: Alignment.centerLeft,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(12, 0, 12, 0),
              child: Row(
                children: [
                  errors.contains(filt.name.toLowerCase())
                      ? Icon(
                          filt.icon.icon,
                          color: StyleBase.warningRed,
                        )
                      : filt.icon,
                  const SizedBox(width: 10),
                  Expanded(
                    child: Text(
                      filt.name,
                      overflow: TextOverflow.ellipsis,
                      style: errors.contains(filt.name.toLowerCase()) ? const TextStyle(color: Colors.red) : null,
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      } else {
        //just show icons
        filterWidgets.add(
          Tooltip(
            message: filt.name,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(12, 0, 0, 0),
              child: Row(
                children: [
                  errors.contains(filt.name.toLowerCase())
                      ? Icon(
                          filt.icon.icon,
                          color: StyleBase.warningRed,
                        )
                      : filt.icon,
                ],
              ),
            ),
          ),
        );
      }
    }

    return filterWidgets;
  }

  static List<bool> getSelectedFilterBools(List<Filter> filters) {
    List<bool> selectedFilters = List.empty(growable: true);

    for (var filt in filters) {
      selectedFilters.add(filt.selected);
    }

    return selectedFilters;
  }

  static bool isFilterSelected(String id, List<Filter> filters) {
    bool selected = false;

    for (var filt in filters) {
      if (filt.id == id && filt.selected) {
        selected = true;
        break;
      }
    }

    return selected;
  }
}
