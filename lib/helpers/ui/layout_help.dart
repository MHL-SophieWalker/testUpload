import 'package:flutter/material.dart';
import 'package:hart_suite/style/style_base.dart';

int getColumnCount({required BuildContext context, double excludedWidth = 0}) {
  double width = MediaQuery.of(context).size.width - excludedWidth;

  if (width < 500) {
    return 1;
  } else if (width < 850) {
    return 2;
  } else if (width < 1250) {
    return 3;
  } else {
    return 4;
  }
}

Widget getSection({required BuildContext context, required List<Widget> items, required double sectionHeight, required int columnCount}) {
  return GridView.builder(
    shrinkWrap: true,
    physics: const NeverScrollableScrollPhysics(),
    itemCount: items.length,
    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
      crossAxisCount: columnCount,
      mainAxisExtent: 50,
      crossAxisSpacing: 24,
      mainAxisSpacing: 24,
    ),
    itemBuilder: (context, index) {
      return items[index];
    },
  );
}

Widget getDivider({required String text}) {
  return Row(
    mainAxisSize: MainAxisSize.min,
    children: [
      const Padding(padding: EdgeInsets.all(4.0)),
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: Text(
          text,
          style: const TextStyle(color: StyleBase.secondaryBlack),
        ),
      ),
      const Expanded(
        flex: 3,
        child: Divider(
          color: StyleBase.primaryRed,
        ),
      ),
      const Padding(padding: EdgeInsets.all(4.0)),
    ],
  );
}
