import 'package:flutter_test/flutter_test.dart';
import 'package:hart_suite/enums/comment_type.dart';
import 'package:hart_suite/helpers/firebase/firestore_helper.dart';
import 'package:hart_suite/models/actions/action.dart';
import 'package:hart_suite/models/actions/subcategory.dart';
import 'package:hart_suite/models/app/app.dart';
import 'package:hart_suite/models/app/platform.dart';
import 'package:hart_suite/models/area/area.dart';
import 'package:hart_suite/models/area/area_snapshot.dart';
import 'package:hart_suite/models/area/coords.dart';
import 'package:hart_suite/models/attachment/attachment.dart';
import 'package:hart_suite/models/attachment/attachment_type.dart';
import 'package:hart_suite/models/calendar/calendar.dart';
import 'package:hart_suite/models/change/change_log.dart';
import 'package:hart_suite/models/comment/comment.dart';
import 'package:hart_suite/models/data/data_point.dart';
import 'package:hart_suite/models/data/data_server.dart';
import 'package:hart_suite/models/data/data_server_type.dart';
import 'package:hart_suite/models/discipline/discipline.dart';
import 'package:hart_suite/models/equipment/classification.dart';
import 'package:hart_suite/models/equipment/component.dart';
import 'package:hart_suite/models/equipment/dimensions.dart';
import 'package:hart_suite/models/equipment/equipment_category.dart';
import 'package:hart_suite/models/general/auditable.dart';
import 'package:hart_suite/models/profile/person_snapshot.dart';
import 'package:hart_suite/models/equipment/equipment_status.dart';
import 'package:hart_suite/models/equipment/equipment_subcategory.dart';
import 'package:hart_suite/models/equipment/equipment_type.dart';
import 'package:hart_suite/models/equipment/equipment.dart';
import 'package:hart_suite/models/profile/person.dart';
import 'package:hart_suite/models/profile/profile.dart';
import 'package:hart_suite/models/profile/profile_app_role.dart';
import 'package:hart_suite/models/profile/role.dart';
import 'package:hart_suite/models/profile/team.dart';
import 'package:hart_suite/models/tag/tag.dart';
import 'package:hart_suite/models/tag/tag_type.dart';
import 'package:hart_suite/repos/app/app_repo.dart';
import 'package:hart_suite/repos/app/platform_repo.dart';
import 'package:hart_suite/repos/area/area_repo.dart';
import 'package:hart_suite/repos/attachment/attachment_repo.dart';
import 'package:hart_suite/repos/attachment/attachment_type_repo.dart';
import 'package:hart_suite/repos/calendar/calendar_repo.dart';
import 'package:hart_suite/repos/change/change_log_repo.dart';
import 'package:hart_suite/repos/comment/comment_repo.dart';
import 'package:hart_suite/repos/data/data_point_repo.dart';
import 'package:hart_suite/repos/data/data_server_repo.dart';
import 'package:hart_suite/repos/data/data_server_type_repo.dart';
import 'package:hart_suite/repos/equipment/classification_repo.dart';
import 'package:hart_suite/repos/equipment/component_repo.dart';
import 'package:hart_suite/repos/equipment/equipment_category_repo.dart';
import 'package:hart_suite/repos/equipment/equipment_repo.dart';
import 'package:hart_suite/repos/equipment/equipment_status_repo.dart';
import 'package:hart_suite/repos/equipment/equipment_subcategory_repo.dart';
import 'package:hart_suite/repos/equipment/equipment_type_repo.dart';
import 'package:hart_suite/repos/profile/person_repo.dart';
import 'package:hart_suite/repos/profile/profile_app_role_repo.dart';
import 'package:hart_suite/repos/profile/profile_repo.dart';
import 'package:hart_suite/repos/profile/role_repo.dart';
import 'package:hart_suite/repos/profile/team_repo.dart';
import 'package:hart_suite/repos/tag/tag_repo.dart';
import 'package:hart_suite/repos/tag/tag_type_repo.dart';
import 'package:hart_suite/repos/actions/action_repo.dart';

void main() async {
  PersonSnapshot created = PersonSnapshot(uid: 'test123', fullName: 'Test');
  String customer = 'testCustomer';

  group('Area Testing', () {
    List<Area> areas = List.empty(growable: true);
    AreaRepo areaRepo = AreaRepo(useMocks: true, personSnapshot: created, customer: 'MHL');

    Area test1, test2;

    test1 = Area(
        documentId: 'thisIsMyIdentifier',
        name: 'Test One',
        description: 'Testing Inserts',
        customer: 'Cayman Cider',
        calendars: {'test123': Calendar(documentId: 'test123', name: 'Test', description: 'Test', datePoints: List<DateTime>.empty())},
        teams: {'test123': null},
        geoFence: [Coords(lat: 0, long: 0)]);

    test2 = Area(
        documentId: 'thisIsMyOtherIdentifier',
        name: 'Test Two',
        description: 'Testing Inserts',
        customer: 'Cayman Cider',
        calendars: {'test123': null},
        teams: {'test123': null},
        geoFence: [Coords(lat: 0, long: 0)]);

    test('Area add, get, getById', () async {
      await areaRepo.add(area: test1);
      await areaRepo.add(area: test2);

      areas = await areaRepo.get();
      expect(areas.length, 2);

      Area? area1 = await areaRepo.getById(id: test1.documentId!);

      expect(area1?.name, 'Test One');
    });

    test('Area update', () async {
      await areaRepo.add(area: test1);
      await areaRepo.add(area: test2);

      Area? area1 = await areaRepo.getById(id: test1.documentId!);

      area1?.name = 'Test One Updated';

      await areaRepo.update(area: area1!);

      Area? area2 = await areaRepo.getById(id: test1.documentId!);

      expect(area2?.name, 'Test One Updated');
    });
  });

  group('App Repos', () {
    group('App Repo Testing', () {
      AppRepo appRepo = AppRepo(useMocks: true);
      List<App> apps = List.empty(growable: true);

      App test1, test2;

      test1 = App(name: 'HartActions', documentId: 'test123');
      test2 = App(name: 'HartSuite', documentId: 'test456');

      test('App add, get, getById', () async {
        await appRepo.add(app: test1);
        await appRepo.add(app: test2);

        apps = await appRepo.get();

        expect(apps.length, 2);

        App? app1 = await appRepo.getById(id: test1.documentId!);

        expect(app1?.name, 'HartActions');
      });

      test('App update', () async {
        await appRepo.add(app: test1);
        await appRepo.add(app: test2);

        App? app1 = await appRepo.getById(id: test1.documentId!);

        app1?.name = 'HartActionsUpdated';

        await appRepo.update(app: app1!);

        App? app2 = await appRepo.getById(id: test1.documentId!);

        expect(app2?.name, 'HartActionsUpdated');
      });
    });

    group('Platform Repo Testing', () {
      PlatformRepo platformRepo = PlatformRepo(useMocks: true);
      List<Platform> platforms = List.empty(growable: true);

      Platform test1, test2, test3;

      test1 = Platform(name: 'Web', documentId: 'test123');
      test2 = Platform(name: 'Android', documentId: 'test456');
      test3 = Platform(name: 'iOS', documentId: 'test789');

      test('Platform add, get, getById', () async {
        await platformRepo.add(platform: test1);
        await platformRepo.add(platform: test2);
        await platformRepo.add(platform: test3);

        platforms = await platformRepo.get();

        expect(platforms.length, 3);

        Platform? platform1 = await platformRepo.getById(id: test1.documentId!);

        expect(platform1?.name, 'Web');
      });

      test('Platform update', () async {
        await platformRepo.add(platform: test1);
        await platformRepo.add(platform: test2);
        await platformRepo.add(platform: test3);

        Platform? platform1 = await platformRepo.getById(id: test1.documentId!);

        platform1?.name = 'WebUpdated';

        await platformRepo.update(platform: platform1!);

        Platform? platform2 = await platformRepo.getById(id: test1.documentId!);

        expect(platform2?.name, 'WebUpdated');
      });
    });
  });
  group('Attachment Repos', () {
    group('Attachment Repo Testing', () {
      AttachmentRepo attachmentRepo = AttachmentRepo(useMocks: true, personSnapshot: created, customer: customer);
      List<Attachment> attachments = List.empty(growable: true);

      Attachment test1, test2, test3;

      test1 = Attachment(
        documentId: 'test123',
        fileName: 'test123',
        fileLocation: 'test123',
      );
      test2 = Attachment(
        documentId: 'test456',
        fileName: 'test456',
        fileLocation: 'test456',
      );
      test3 = Attachment(
        documentId: 'test789',
        fileName: 'test789',
        fileLocation: 'test789',
      );

      test('Attachment add, get, getById', () async {
        await attachmentRepo.add(attachment: test1);
        await attachmentRepo.add(attachment: test2);
        await attachmentRepo.add(attachment: test3);

        attachments = await attachmentRepo.get();

        expect(attachments.length, 3);

        Attachment? attachment1 = await attachmentRepo.getById(id: test1.documentId!);

        expect(attachment1?.fileName, 'test123');
      });

      test('Attachment update', () async {
        await attachmentRepo.add(attachment: test1);
        await attachmentRepo.add(attachment: test2);
        await attachmentRepo.add(attachment: test3);

        Attachment? attachment1 = await attachmentRepo.getById(id: test1.documentId!);

        attachment1?.fileName = 'test123Updated';

        await attachmentRepo.update(attachment: attachment1!);

        Attachment? attachment2 = await attachmentRepo.getById(id: test1.documentId!);

        expect(attachment2?.fileName, 'test123Updated');
      });
    });

    group('Attachment Type Repo Testing', () {
      test('Attachment Type add, get, getById', () async {
        AttachmentTypeRepo attachmentTypeRepo = AttachmentTypeRepo(useMocks: true, personSnapshot: created, customer: customer);
        List<AttachmentType> attachmentTypes = List.empty(growable: true);

        AttachmentType test1, test2, test3;

        test1 = AttachmentType(name: 'test123', documentId: 'test123');
        test2 = AttachmentType(name: 'test456', documentId: 'test456');
        test3 = AttachmentType(name: 'test789', documentId: 'test789');

        await attachmentTypeRepo.add(attachmentType: test1);
        await attachmentTypeRepo.add(attachmentType: test2);
        await attachmentTypeRepo.add(attachmentType: test3);

        attachmentTypes = await attachmentTypeRepo.get();

        expect(attachmentTypes.length, 3);

        AttachmentType? attachmentType1 = await attachmentTypeRepo.getById(id: test1.documentId!);

        expect(attachmentType1?.name, 'test123');
      });

      test('Attachment Type update', () async {
        AttachmentTypeRepo attachmentTypeRepo = AttachmentTypeRepo(useMocks: true, personSnapshot: created, customer: customer);

        AttachmentType test1, test2, test3;

        test1 = AttachmentType(name: 'test123', documentId: 'test123');
        test2 = AttachmentType(name: 'test456', documentId: 'test456');
        test3 = AttachmentType(name: 'test789', documentId: 'test789');

        await attachmentTypeRepo.add(attachmentType: test1);
        await attachmentTypeRepo.add(attachmentType: test2);
        await attachmentTypeRepo.add(attachmentType: test3);

        AttachmentType? attachmentType1 = await attachmentTypeRepo.getById(id: test1.documentId!);

        attachmentType1?.name = 'test123Updated';

        await attachmentTypeRepo.update(attachmentType: attachmentType1!);

        AttachmentType? attachmentType2 = await attachmentTypeRepo.getById(id: test1.documentId!);

        expect(attachmentType2?.name, 'test123Updated');
      });
    });
  });
  group('Calendar Repos', () {
    group('Calendar Repo Test', () {
      test('Calendar add, get, getById', () async {
        CalendarRepo calendarRepo = CalendarRepo(useMocks: true, personSnapshot: created, customer: customer);
        List<Calendar> calendars = List.empty(growable: true);

        Calendar test1, test2, test3;

        test1 = Calendar(name: 'test123', documentId: 'test123', description: 'Test Description', datePoints: List<DateTime>.empty());
        test2 = Calendar(name: 'test456', documentId: 'test456', description: 'Test Description', datePoints: List<DateTime>.empty());
        test3 = Calendar(name: 'test789', documentId: 'test789', description: 'Test Description', datePoints: List<DateTime>.empty());

        await calendarRepo.add(calendar: test1);
        await calendarRepo.add(calendar: test2);
        await calendarRepo.add(calendar: test3);

        calendars = await calendarRepo.get();

        expect(calendars.length, 3);

        Calendar? calendar1 = await calendarRepo.getById(id: test1.documentId!);

        expect(calendar1?.name, 'test123');
      });

      test('Calendar update', () async {
        CalendarRepo calendarRepo = CalendarRepo(useMocks: true, personSnapshot: created, customer: customer);

        Calendar test1, test2, test3;

        test1 = Calendar(name: 'test123', documentId: 'test123', description: 'Test Description', datePoints: List<DateTime>.empty());
        test2 = Calendar(name: 'test456', documentId: 'test456', description: 'Test Description', datePoints: List<DateTime>.empty());
        test3 = Calendar(name: 'test789', documentId: 'test789', description: 'Test Description', datePoints: List<DateTime>.empty());

        await calendarRepo.add(calendar: test1);
        await calendarRepo.add(calendar: test2);
        await calendarRepo.add(calendar: test3);

        Calendar? calendar1 = await calendarRepo.getById(id: test1.documentId!);

        calendar1?.name = 'test123Updated';

        await calendarRepo.update(calendar: calendar1!);

        Calendar? calendar2 = await calendarRepo.getById(id: test1.documentId!);

        expect(calendar2?.name, 'test123Updated');
      });
    });
  });
  group('Change Repos', () {
    group('Change Log Repo Test', () {
      test('Change Log add, get, getById', () async {
        ChangeLogRepo changeLogRepo = ChangeLogRepo(useMocks: true, personSnapshot: created, customer: customer);
        List<ChangeLog> changeLogs = List.empty(growable: true);

        ChangeLog test1, test2, test3;

        test1 = ChangeLog(
          documentId: 'test123',
          app: {'test123': null},
          changedDocumentId: 'changed123',
          profile: {'profile123': null},
          changeTarget: 'changeTarget123',
          changeField: 'changeField123',
          changeOn: DateTime.now(),
          valueFrom: 'valueFrom123',
          valueTo: 'valueTo123',
          message: 'message123',
        );
        test2 = ChangeLog(
          documentId: 'test456',
          app: {'test456': null},
          changedDocumentId: 'changed456',
          profile: {'profile456': null},
          changeTarget: 'changeTarget456',
          changeField: 'changeField456',
          changeOn: DateTime.now(),
          valueFrom: 'valueFrom456',
          valueTo: 'valueTo456',
          message: 'message456',
        );
        test3 = ChangeLog(
          documentId: 'test789',
          app: {'test789': null},
          changedDocumentId: 'changed789',
          profile: {'profile789': null},
          changeTarget: 'changeTarget789',
          changeField: 'changeField789',
          changeOn: DateTime.now(),
          valueFrom: 'valueFrom789',
          valueTo: 'valueTo789',
          message: 'message789',
        );

        await changeLogRepo.add(changeLog: test1);
        await changeLogRepo.add(changeLog: test2);
        await changeLogRepo.add(changeLog: test3);

        changeLogs = await changeLogRepo.get();

        expect(changeLogs.length, 3);

        ChangeLog? changeLog1 = await changeLogRepo.getById(id: test1.documentId!);

        expect(changeLog1?.valueFrom, 'valueFrom123');
      });

      test('Change Log update', () async {
        ChangeLogRepo changeLogRepo = ChangeLogRepo(useMocks: true, personSnapshot: created, customer: customer);

        ChangeLog test1, test2, test3;

        test1 = ChangeLog(
          documentId: 'test123',
          app: {'test123': null},
          changedDocumentId: 'changed123',
          profile: {'profile123': null},
          changeTarget: 'changeTarget123',
          changeField: 'changeField123',
          changeOn: DateTime.now(),
          valueFrom: 'valueFrom123',
          valueTo: 'valueTo123',
          message: 'message123',
        );
        test2 = ChangeLog(
          documentId: 'test456',
          app: {'test456': null},
          changedDocumentId: 'changed456',
          profile: {'profile456': null},
          changeTarget: 'changeTarget456',
          changeField: 'changeField456',
          changeOn: DateTime.now(),
          valueFrom: 'valueFrom456',
          valueTo: 'valueTo456',
          message: 'message456',
        );
        test3 = ChangeLog(
          documentId: 'test789',
          app: {'test789': null},
          changedDocumentId: 'changed789',
          profile: {'profile789': null},
          changeTarget: 'changeTarget789',
          changeField: 'changeField789',
          changeOn: DateTime.now(),
          valueFrom: 'valueFrom789',
          valueTo: 'valueTo789',
          message: 'message789',
        );

        await changeLogRepo.add(changeLog: test1);
        await changeLogRepo.add(changeLog: test2);
        await changeLogRepo.add(changeLog: test3);

        ChangeLog? changeLog1 = await changeLogRepo.getById(id: test1.documentId!);

        changeLog1?.valueFrom = 'valueFrom123Updated';

        await changeLogRepo.update(changeLog: changeLog1!);

        ChangeLog? changeLog2 = await changeLogRepo.getById(id: test1.documentId!);

        expect(changeLog2?.valueFrom, 'valueFrom123Updated');
      });
    });
  });
  group('Comment Repos', () {
    group('Comment Repo Test', () {
      PersonSnapshot created = PersonSnapshot(uid: 'test123', fullName: 'Test');
      test('Comment add, get, getById', () async {
        CommentRepo commentRepo = CommentRepo(useMocks: true, personSnapshot: created, customer: customer);
        List<Comment> comments = List.empty(growable: true);

        Comment test1, test2, test3;

        test1 = Comment(
          documentId: 'test123',
          app: {'test123': null},
          attachments: {'attachments123': null},
          content: 'comment123',
          created: Auditable(dateStamp: DateTime.now(), person: created),
          type: CommentType.general,
        );
        test2 = Comment(
          documentId: 'test456',
          app: {'test456': null},
          attachments: {'attachments456': null},
          content: 'comment456',
          created: Auditable(dateStamp: DateTime.now(), person: created),
          type: CommentType.general,
        );
        test3 = Comment(
          documentId: 'test789',
          app: {'test789': null},
          attachments: {'attachments789': null},
          content: 'comment789',
          created: Auditable(dateStamp: DateTime.now(), person: created),
          type: CommentType.general,
        );

        await commentRepo.add(comment: test1);
        await commentRepo.add(comment: test2);
        await commentRepo.add(comment: test3);

        comments = await commentRepo.get();

        expect(comments.length, 3);

        Comment? comment1 = await commentRepo.getById(id: test1.documentId!);

        expect(comment1?.content, 'comment123');
      });

      test('Comment update', () async {
        CommentRepo commentRepo = CommentRepo(useMocks: true, personSnapshot: created, customer: customer);

        Comment test1, test2, test3;

        test1 = Comment(
          documentId: 'test123',
          app: {'test123': null},
          attachments: {'attachments123': null},
          content: 'comment123',
          created: Auditable(dateStamp: DateTime.now(), person: created),
          type: CommentType.general,
        );

        test2 = Comment(
          documentId: 'test456',
          app: {'test456': null},
          attachments: {'attachments456': null},
          content: 'comment456',
          created: Auditable(dateStamp: DateTime.now(), person: created),
          type: CommentType.general,
        );

        test3 = Comment(
          documentId: 'test789',
          app: {'test789': null},
          attachments: {'attachments789': null},
          content: 'comment789',
          created: Auditable(dateStamp: DateTime.now(), person: created),
          type: CommentType.general,
        );

        await commentRepo.add(comment: test1);
        await commentRepo.add(comment: test2);
        await commentRepo.add(comment: test3);

        Comment? comment1 = await commentRepo.getById(id: test1.documentId!);

        comment1?.content = 'comment123Updated';

        await commentRepo.update(comment: comment1!);

        Comment? comment2 = await commentRepo.getById(id: test1.documentId!);

        expect(comment2?.content, 'comment123Updated');
      });
    });
  });
  group('Data Repos', () {
    group('Data Point Repo Test', () {
      PersonSnapshot created = PersonSnapshot(uid: 'test123', fullName: 'Test');

      test('Data Point add, get, getById', () async {
        DataPoint test1, test2, test3;
        DataPointRepo dataPointRepo = DataPointRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = DataPoint(
          dataServer: {'tesdDS123': null},
          name: 'testPoint1',
          description: 'testPoint1',
          readOperation: 'SELECT * FROM Point',
          writeOperation: null,
        );

        test2 = DataPoint(
          dataServer: {'tesdDS456': null},
          name: 'testPoint2',
          description: 'testPoint2',
          readOperation: 'SELECT * FROM Point',
          writeOperation: null,
        );

        test3 = DataPoint(
          dataServer: {'tesdDS789': null},
          name: 'testPoint3',
          description: 'testPoint3',
          readOperation: 'SELECT * FROM Point',
          writeOperation: null,
        );

        await dataPointRepo.add(dataPoint: test1);
        await dataPointRepo.add(dataPoint: test2);
        await dataPointRepo.add(dataPoint: test3);

        dataPointRepo.get().then((value) {
          expect(value.length, 3);
        });

        dataPointRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'testPoint1');
        });
      });

      test('Data Server Repo Update', () async {
        DataPoint test1, test2, test3;
        DataPointRepo dataPointRepo = DataPointRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = DataPoint(
          dataServer: {'tesdDS123': null},
          name: 'testPoint1',
          description: 'testPoint1',
          readOperation: 'SELECT * FROM Point',
          writeOperation: null,
        );

        test2 = DataPoint(
          dataServer: {'tesdDS456': null},
          name: 'testPoint2',
          description: 'testPoint2',
          readOperation: 'SELECT * FROM Point',
          writeOperation: null,
        );

        test3 = DataPoint(
          dataServer: {'tesdDS789': null},
          name: 'testPoint3',
          description: 'testPoint3',
          readOperation: 'SELECT * FROM Point',
          writeOperation: null,
        );

        await dataPointRepo.add(dataPoint: test1);
        await dataPointRepo.add(dataPoint: test2);
        await dataPointRepo.add(dataPoint: test3);

        test1.name = 'testPoint1Updated';

        await dataPointRepo.update(dataPoint: test1);

        dataPointRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'testPoint1Updated');
        });
      });
    });
    group('Data Server Repo Test', () {
      test('Data Server add, get, getById', () async {
        DataServer test1, test2, test3;
        DataServerRepo dataServerRepo = DataServerRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = DataServer(
          name: 'testServer1',
          connectionString: 'testServer1',
          dataServerType: {'dsType123': null},
        );

        test2 = DataServer(
          name: 'testServer2',
          connectionString: 'testServer2',
          dataServerType: {'dsType456': null},
        );

        test3 = DataServer(
          name: 'testServer3',
          connectionString: 'testServer3',
          dataServerType: {'dsType789': null},
        );

        await dataServerRepo.add(dataServer: test1);
        await dataServerRepo.add(dataServer: test2);
        await dataServerRepo.add(dataServer: test3);

        dataServerRepo.get().then((value) {
          expect(value.length, 3);
        });

        dataServerRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'testServer1');
        });
      });

      test('Data Server Repo Update', () async {
        DataServer test1, test2, test3;
        DataServerRepo dataServerRepo = DataServerRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = DataServer(
          name: 'testServer1',
          connectionString: 'testServer1',
          dataServerType: {'dsType123': null},
        );

        test2 = DataServer(
          name: 'testServer2',
          connectionString: 'testServer2',
          dataServerType: {'dsType456': null},
        );

        test3 = DataServer(
          name: 'testServer3',
          connectionString: 'testServer3',
          dataServerType: {'dsType789': null},
        );

        await dataServerRepo.add(dataServer: test1);
        await dataServerRepo.add(dataServer: test2);
        await dataServerRepo.add(dataServer: test3);

        test1.name = 'testServer1Updated';

        await dataServerRepo.update(dataServer: test1);

        dataServerRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'testServer1Updated');
        });
      });
    });

    group('Data Server Type', () {
      test('Data Server Repo add, get, getById', () async {
        DataServerType test1, test2, test3;
        DataServerTypeRepo dataServerTypeRepo = DataServerTypeRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = DataServerType(
          name: 'testServerType1',
        );

        test2 = DataServerType(
          name: 'testServerType2',
        );

        test3 = DataServerType(
          name: 'testServerType3',
        );

        await dataServerTypeRepo.add(dataServerType: test1);
        await dataServerTypeRepo.add(dataServerType: test2);
        await dataServerTypeRepo.add(dataServerType: test3);

        dataServerTypeRepo.get().then((value) {
          expect(value.length, 3);
        });

        dataServerTypeRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'testServerType1');
        });
      });

      test('Data Server Repo Update', () async {
        DataServerType test1, test2, test3;
        DataServerTypeRepo dataServerTypeRepo = DataServerTypeRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = DataServerType(
          name: 'testServerType1',
        );

        test2 = DataServerType(
          name: 'testServerType2',
        );

        test3 = DataServerType(
          name: 'testServerType3',
        );

        await dataServerTypeRepo.add(dataServerType: test1);
        await dataServerTypeRepo.add(dataServerType: test2);
        await dataServerTypeRepo.add(dataServerType: test3);

        test1.name = 'testServerType1Updated';

        await dataServerTypeRepo.update(dataServerType: test1);

        dataServerTypeRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'testServerType1Updated');
        });
      });
    });
  });

  group('Equipment Repos', () {
    group('Classification Repo Test', () {
      test('Classification add, get, getById', () async {
        ClassificationRepo classificationRepo = ClassificationRepo(useMocks: true, personSnapshot: created, customer: customer);
        List<Classification> classifications = List.empty(growable: true);

        Classification test1, test2, test3;

        test1 = Classification(
          name: 'test123',
          documentId: 'test123',
        );
        test2 = Classification(
          name: 'test456',
          documentId: 'test456',
        );
        test3 = Classification(
          name: 'test789',
          documentId: 'test789',
        );

        await classificationRepo.add(classification: test1);
        await classificationRepo.add(classification: test2);
        await classificationRepo.add(classification: test3);

        classifications = await classificationRepo.get();

        expect(classifications.length, 3);

        Classification? classification1 = await classificationRepo.getById(id: test1.documentId!);

        expect(classification1?.name, 'test123');
      });

      test('Classification update', () async {
        ClassificationRepo classificationRepo = ClassificationRepo(useMocks: true, personSnapshot: created, customer: customer);

        Classification test1, test2, test3;

        test1 = Classification(
          name: 'test123',
          documentId: 'test123',
        );
        test2 = Classification(
          name: 'test456',
          documentId: 'test456',
        );
        test3 = Classification(
          name: 'test789',
          documentId: 'test789',
        );

        await classificationRepo.add(classification: test1);
        await classificationRepo.add(classification: test2);
        await classificationRepo.add(classification: test3);

        Classification? classification1 = await classificationRepo.getById(id: test1.documentId!);

        classification1?.name = 'test123Updated';
        classification1?.updated = Auditable(dateStamp: DateTime.now(), person: created);

        await classificationRepo.update(classification: classification1!);

        Classification? classification2 = await classificationRepo.getById(id: test1.documentId!);

        expect(classification2?.name, 'test123Updated');
      });
    });

    group('Component Repo Testing', () {
      test('Component add, get, getById', () async {
        ComponentRepo componentRepo = ComponentRepo(useMocks: true, personSnapshot: created, customer: customer);
        List<Component> components = List.empty(growable: true);

        Component test1, test2, test3;

        test1 = Component(name: 'test123', documentId: 'test123', description: 'test123', manufacturer: 'test123', equipment: {'test123': null}, quantity: 3);
        test2 = Component(name: 'test456', documentId: 'test456', description: 'test456', manufacturer: 'test456', equipment: {'test456': null}, quantity: 2);
        test3 = Component(name: 'test789', documentId: 'test789', description: 'test789', manufacturer: 'test789', equipment: {'test789': null}, quantity: 1);

        await componentRepo.add(component: test1);
        await componentRepo.add(component: test2);
        await componentRepo.add(component: test3);

        components = await componentRepo.get();

        expect(components.length, 3);

        Component? component1 = await componentRepo.getById(id: test1.documentId!);

        expect(component1?.name, 'test123');
      });

      test('Component Repo Update', () async {
        Component test1, test2, test3;
        ComponentRepo componentRepo = ComponentRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = Component(name: 'test123', documentId: 'test123', description: 'test123', manufacturer: 'test123', equipment: {'test123': null}, quantity: 3);
        test2 = Component(name: 'test456', documentId: 'test456', description: 'test456', manufacturer: 'test456', equipment: {'test456': null}, quantity: 2);
        test3 = Component(name: 'test789', documentId: 'test789', description: 'test789', manufacturer: 'test789', equipment: {'test789': null}, quantity: 1);

        await componentRepo.add(component: test1);
        await componentRepo.add(component: test2);
        await componentRepo.add(component: test3);

        test1.name = 'test123Updated';

        await componentRepo.update(component: test1);

        componentRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123Updated');
        });
      });
    });

    group('Equipment Category Repo Test', () {
      test('Equipment Category Repo add, get, getById', () async {
        EquipmentCategory test1, test2, test3;
        EquipmentCategoryRepo equipmentCategoryRepo = EquipmentCategoryRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = EquipmentCategory(name: 'test123', documentId: 'test123');
        test2 = EquipmentCategory(name: 'test456', documentId: 'test456');
        test3 = EquipmentCategory(name: 'test789', documentId: 'test789');

        await equipmentCategoryRepo.add(equipmentCategory: test1);
        await equipmentCategoryRepo.add(equipmentCategory: test2);
        await equipmentCategoryRepo.add(equipmentCategory: test3);

        equipmentCategoryRepo.get().then((value) {
          expect(value.length, 3);
        });

        equipmentCategoryRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123');
        });
      });

      test('Equipment Category Repo Update', () async {
        EquipmentCategory test1, test2, test3;
        EquipmentCategoryRepo equipmentCategoryRepo = EquipmentCategoryRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = EquipmentCategory(name: 'test123', documentId: 'test123');
        test2 = EquipmentCategory(name: 'test456', documentId: 'test456');
        test3 = EquipmentCategory(name: 'test789', documentId: 'test789');

        await equipmentCategoryRepo.add(equipmentCategory: test1);
        await equipmentCategoryRepo.add(equipmentCategory: test2);
        await equipmentCategoryRepo.add(equipmentCategory: test3);

        test1.name = 'test123Updated';

        await equipmentCategoryRepo.update(equipmentCategory: test1);

        equipmentCategoryRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123Updated');
        });
      });
    });

    group('Equipment Repo Test', () {
      test('Equipment Repo add, get, getById', () async {
        Equipment test1, test2, test3;
        EquipmentRepo equipmentRepo = EquipmentRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = Equipment(
          name: 'test123',
          documentId: 'test123',
          description: 'test123',
          manufacturer: 'test123',
          model: 'test123',
          serialNumber: 'test123',
          status: {'test123': null},
          area: {'test123': null},
          dimensions: Dimensions(height: 120, width: 120, length: 120),
          partNumber: 'test123',
          nextInspectionDate: DateTime.now().add(const Duration(days: 30)),
          warrantyEndDate: DateTime.now().add(const Duration(days: 365)),
          subcategory: {'test123': null},
          type: {'test123': null},
          classifications: {'test123': null},
          tags: {'test123': null},
          dataPoints: {'test123': null},
        );
        test2 = Equipment(
          name: 'test456',
          documentId: 'test456',
          description: 'test456',
          manufacturer: 'test456',
          model: 'test456',
          serialNumber: 'test456',
          status: {'test456': null},
          area: {'test456': null},
          dimensions: Dimensions(height: 120, width: 120, length: 120),
          partNumber: 'test456',
          nextInspectionDate: DateTime.now().add(const Duration(days: 30)),
          warrantyEndDate: DateTime.now().add(const Duration(days: 365)),
          subcategory: {'test456': null},
          type: {'test456': null},
          classifications: {'test456': null},
          tags: {'test456': null},
          dataPoints: {'test456': null},
        );

        test3 = Equipment(
          name: 'test789',
          documentId: 'test789',
          description: 'test789',
          manufacturer: 'test789',
          model: 'test789',
          serialNumber: 'test789',
          status: {'test789': null},
          area: {'test789': null},
          dimensions: Dimensions(height: 120, width: 120, length: 120),
          partNumber: 'test789',
          nextInspectionDate: DateTime.now().add(const Duration(days: 30)),
          warrantyEndDate: DateTime.now().add(const Duration(days: 365)),
          subcategory: {'test789': null},
          type: {'test789': null},
          classifications: {'test789': null},
          tags: {'test789': null},
          dataPoints: {'test789': null},
        );

        await equipmentRepo.add(equipment: test1);
        await equipmentRepo.add(equipment: test2);
        await equipmentRepo.add(equipment: test3);

        equipmentRepo.get().then((value) {
          expect(value.length, 3);
        });

        equipmentRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123');
        });
      });
    });

    group('Equipment Status Repo Testing', () {
      test('Equipent Status Repo add, get, getById', () async {
        EquipmentStatus test1, test2, test3;
        EquipmentStatusRepo equipmentStatusRepo = EquipmentStatusRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = EquipmentStatus(name: 'test123', documentId: 'test123');
        test2 = EquipmentStatus(name: 'test456', documentId: 'test456');
        test3 = EquipmentStatus(name: 'test789', documentId: 'test789');

        await equipmentStatusRepo.add(equipmentStatus: test1);
        await equipmentStatusRepo.add(equipmentStatus: test2);
        await equipmentStatusRepo.add(equipmentStatus: test3);

        equipmentStatusRepo.get().then((value) {
          expect(value.length, 3);
        });

        equipmentStatusRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123');
        });
      });

      test('Equipent Status Repo Update', () async {
        EquipmentStatus test1, test2, test3;
        EquipmentStatusRepo equipmentStatusRepo = EquipmentStatusRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = EquipmentStatus(name: 'test123', documentId: 'test123');
        test2 = EquipmentStatus(name: 'test456', documentId: 'test456');
        test3 = EquipmentStatus(name: 'test789', documentId: 'test789');

        await equipmentStatusRepo.add(equipmentStatus: test1);
        await equipmentStatusRepo.add(equipmentStatus: test2);
        await equipmentStatusRepo.add(equipmentStatus: test3);

        test1.name = 'test123Updated';

        await equipmentStatusRepo.update(equipmentStatus: test1);

        equipmentStatusRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123Updated');
        });
      });
    });

    group('Equipment Subcategory Repo Testing', () {
      test('Equipment Subcategory Repo add, get, getById', () async {
        EquipmentSubcategory test1, test2, test3;
        EquipmentSubcategoryRepo equipmentSubcategoryRepo = EquipmentSubcategoryRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = EquipmentSubcategory(name: 'test123', documentId: 'test123', equipmentCategory: {'test123': null});
        test2 = EquipmentSubcategory(name: 'test456', documentId: 'test456', equipmentCategory: {'test456': null});
        test3 = EquipmentSubcategory(name: 'test789', documentId: 'test789', equipmentCategory: {'test789': null});

        await equipmentSubcategoryRepo.add(equipmentSubcategory: test1);
        await equipmentSubcategoryRepo.add(equipmentSubcategory: test2);
        await equipmentSubcategoryRepo.add(equipmentSubcategory: test3);

        equipmentSubcategoryRepo.get().then((value) {
          expect(value.length, 3);
        });

        equipmentSubcategoryRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123');
        });
      });

      test('Equipment Subcategory Repo Update', () async {
        EquipmentSubcategory test1, test2, test3;
        EquipmentSubcategoryRepo equipmentSubcategoryRepo = EquipmentSubcategoryRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = EquipmentSubcategory(name: 'test123', documentId: 'test123', equipmentCategory: {'test123': null});
        test2 = EquipmentSubcategory(name: 'test456', documentId: 'test456', equipmentCategory: {'test456': null});
        test3 = EquipmentSubcategory(name: 'test789', documentId: 'test789', equipmentCategory: {'test789': null});

        await equipmentSubcategoryRepo.add(equipmentSubcategory: test1);
        await equipmentSubcategoryRepo.add(equipmentSubcategory: test2);
        await equipmentSubcategoryRepo.add(equipmentSubcategory: test3);

        test1.name = 'test123Updated';

        await equipmentSubcategoryRepo.update(equipmentSubcategory: test1);

        equipmentSubcategoryRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123Updated');
        });
      });
    });

    group('Equipment Type Repo', () {
      test('Equipment Type Repo add, get, getById', () async {
        EquipmentType test1, test2, test3;
        EquipmentTypeRepo equipmentTypeRepo = EquipmentTypeRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = EquipmentType(
          name: 'test123',
          documentId: 'test123',
        );
        test2 = EquipmentType(
          name: 'test456',
          documentId: 'test456',
        );
        test3 = EquipmentType(
          name: 'test789',
          documentId: 'test789',
        );

        await equipmentTypeRepo.add(equipmentType: test1);
        await equipmentTypeRepo.add(equipmentType: test2);
        await equipmentTypeRepo.add(equipmentType: test3);

        equipmentTypeRepo.get().then((value) {
          expect(value.length, 3);
        });

        equipmentTypeRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123');
        });
      });

      test('Equipment Type Repo Update', () async {
        EquipmentType test1, test2, test3;
        EquipmentTypeRepo equipmentTypeRepo = EquipmentTypeRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = EquipmentType(
          name: 'test123',
          documentId: 'test123',
        );
        test2 = EquipmentType(
          name: 'test456',
          documentId: 'test456',
        );
        test3 = EquipmentType(
          name: 'test789',
          documentId: 'test789',
        );

        await equipmentTypeRepo.add(equipmentType: test1);
        await equipmentTypeRepo.add(equipmentType: test2);
        await equipmentTypeRepo.add(equipmentType: test3);

        test1.name = 'test123Updated';

        await equipmentTypeRepo.update(equipmentType: test1);

        equipmentTypeRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123Updated');
        });
      });
    });
  });
  group('Profile Repos', () {
    group('Person Repo Testing', () {
      test('Person Repo add, get, getById', () async {
        Person test1, test2, test3;
        PersonRepo personRepo = PersonRepo(useMocks: true, personSnapshot: created);

        test1 = Person(
          image: 'test123',
          firstName: 'firstName123',
          lastName: 'lastName123',
          disciplines: {'discipline123': null},
        );
        test2 = Person(
          image: 'test456',
          firstName: 'firstName456',
          lastName: 'lastName456',
          disciplines: {'discipline456': null},
        );
        test3 = Person(
          image: 'test789',
          firstName: 'firstName789',
          lastName: 'lastName789',
          disciplines: {'discipline789': null},
        );

        await personRepo.add(person: test1);
        await personRepo.add(person: test2);
        await personRepo.add(person: test3);

        personRepo.get().then((value) {
          expect(value.length, 3);
        });

        personRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.image, 'test123');
        });
      });

      test('Person Repo Update', () async {
        Person test1, test2, test3;
        PersonRepo personRepo = PersonRepo(useMocks: true, personSnapshot: created);

        test1 = Person(
          image: 'test123',
          firstName: 'firstName123',
          lastName: 'lastName123',
          disciplines: {'discipline123': null},
        );
        test2 = Person(
          image: 'test456',
          firstName: 'firstName456',
          lastName: 'lastName456',
          disciplines: {'discipline456': null},
        );
        test3 = Person(
          image: 'test789',
          firstName: 'firstName789',
          lastName: 'lastName789',
          disciplines: {'discipline789': null},
        );

        await personRepo.add(person: test1);
        await personRepo.add(person: test2);
        await personRepo.add(person: test3);

        test1.image = 'test123Updated';

        await personRepo.update(person: test1);

        personRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.image, 'test123Updated');
        });
      });
    });

    group('Profile App Role Repo Testing', () {
      test('Profile App Role Repo Testing', () async {
        ProfileAppRole test1, test2, test3;
        ProfileAppRoleRepo profileAppRoleRepo = ProfileAppRoleRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = ProfileAppRole(
          documentId: 'test123',
          profile: {'profile123': null},
          app: {'app123': null},
          role: {'role123': null},
        );
        test2 = ProfileAppRole(
          documentId: 'test456',
          profile: {'profile456': null},
          app: {'app456': null},
          role: {'role456': null},
        );
        test3 = ProfileAppRole(
          documentId: 'test789',
          profile: {'profile789': null},
          app: {'app789': null},
          role: {'role789': null},
        );

        await profileAppRoleRepo.add(profileAppRole: test1);
        await profileAppRoleRepo.add(profileAppRole: test2);
        await profileAppRoleRepo.add(profileAppRole: test3);

        profileAppRoleRepo.get().then((value) {
          expect(value.length, 3);
        });

        profileAppRoleRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.profile.keys.first, 'profile123');
        });
      });

      test('Profile App Role Repo update Testing', () async {
        ProfileAppRole test1, test2, test3;
        ProfileAppRoleRepo profileAppRoleRepo = ProfileAppRoleRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = ProfileAppRole(
          profile: {'profile123': null},
          app: {'app123': null},
          role: {'role123': null},
        );
        test2 = ProfileAppRole(
          profile: {'profile456': null},
          app: {'app456': null},
          role: {'role456': null},
        );
        test3 = ProfileAppRole(
          profile: {'profile789': null},
          app: {'app789': null},
          role: {'role789': null},
        );

        await profileAppRoleRepo.add(profileAppRole: test1);
        await profileAppRoleRepo.add(profileAppRole: test2);
        await profileAppRoleRepo.add(profileAppRole: test3);

        App app = App(name: 'HartSuite', documentId: 'app123');

        test1.app.update('app123', (value) => app);

        await profileAppRoleRepo.update(profileAppRole: test1);

        var res = await profileAppRoleRepo.getById(id: test1.documentId!);

        expect(res?.app['app123']?.name, 'HartSuite');
      });
    });

    group('Profile Repo Testing', () {
      test('Profile Repo add, get, getById', () async {
        Profile test1, test2, test3;
        ProfileRepo profileRepo = ProfileRepo(useMocks: true, personSnapshot: created, customer: customer);
        PersonRepo personRepo = PersonRepo(useMocks: true, personSnapshot: created);
        TeamRepo teamRepo = TeamRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = Person(
          image: 'test123',
          firstName: 'first',
          lastName: 'lastName',
          disciplines: {'test123': Discipline(name: 'test', iconCode: 'iconCode', documentId: 'test123'), 'test456': Discipline(name: 'test', iconCode: 'iconCode', documentId: 'test456')},
        );

        test3 = Person(
          image: 'test789',
          firstName: 'first',
          lastName: 'lastName',
          disciplines: {'test789': Discipline(name: 'test', iconCode: 'iconCode', documentId: 'test789'), 'test456': Discipline(name: 'test', iconCode: 'iconCode', documentId: 'test456')},
        );

        await personRepo.add(person: test1 as Person);
        await personRepo.add(person: test3 as Person);

        test2 = Team(
            name: 'test456',
            customer: 'Cayman Cider',
            documentId: 'test456',
            calendar: {'test456': null},
            leaders: {test1.documentId!: test1},
            members: {test3.documentId!: test3},
            disciplines: {'test456': Discipline(name: 'test', iconCode: 'iconCode', documentId: 'test456')});

        await teamRepo.add(team: test2 as Team);

        await profileRepo.get().then((value) {
          //depending on when this test is run, there may be more than 3 profiles due ti the in memory firebase being seeded in other tests with Persons
          expect(value.length >= 3, true);
        });

        await profileRepo.getById(id: test1.documentId!).then((value) {
          expect((value as Person).firstName, 'first');
        });
      });
    });

    group('Role Repo Testing', () {
      test('Role Repo add, get, getById', () async {
        Role test1, test2, test3;
        RoleRepo roleRepo = RoleRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = Role(
          name: 'test123',
          documentId: 'test123',
        );
        test2 = Role(
          name: 'test456',
          documentId: 'test456',
        );
        test3 = Role(
          name: 'test789',
          documentId: 'test789',
        );

        await roleRepo.add(role: test1);
        await roleRepo.add(role: test2);
        await roleRepo.add(role: test3);

        roleRepo.get().then((value) {
          expect(value.length, 3);
        });

        roleRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123');
        });
      });

      test('Role Repo Update', () async {
        Role test1, test2, test3;
        RoleRepo roleRepo = RoleRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = Role(
          name: 'test123',
          documentId: 'test123',
        );
        test2 = Role(
          name: 'test456',
          documentId: 'test456',
        );
        test3 = Role(
          name: 'test789',
          documentId: 'test789',
        );

        await roleRepo.add(role: test1);
        await roleRepo.add(role: test2);
        await roleRepo.add(role: test3);

        test1.name = 'test123Updated';

        await roleRepo.update(role: test1);

        roleRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123Updated');
        });
      });
    });

    group('Team Repo Test', () {
      test('Team Repo add, get, getById', () async {
        Team test1, test2, test3;
        TeamRepo teamRepo = TeamRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = Team(
          name: 'test123',
          customer: 'Cayman Cider',
          documentId: 'test123',
          calendar: {'test123': null},
          leaders: {'test123': null},
          members: {'test123': null},
          disciplines: {'test123': Discipline(name: 'test', iconCode: 'iconCode', documentId: 'test123')},
        );
        test2 = Team(
          name: 'test456',
          customer: 'Cayman Cider',
          documentId: 'test456',
          calendar: {'test456': null},
          leaders: {'test456': null},
          members: {'test456': null},
          disciplines: {'test456': Discipline(name: 'test', iconCode: 'iconCode', documentId: 'test456')},
        );
        test3 = Team(
          name: 'test789',
          customer: 'Cayman Cider',
          documentId: 'test789',
          calendar: {'test789': null},
          leaders: {'test789': null},
          members: {'test789': null},
          disciplines: {'test789': Discipline(name: 'test', iconCode: 'iconCode', documentId: 'test789')},
        );

        await teamRepo.add(team: test1);
        await teamRepo.add(team: test2);
        await teamRepo.add(team: test3);

        teamRepo.get().then((value) {
          //depending on when this test is run, there may be more than 3 profiles due to the in memory firebase being seeded in other tests with Teams
          expect(value.length >= 3, true);
        });

        teamRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123');
        });
      });

      test('Team Repo Update', () async {
        Team test1, test2, test3;
        TeamRepo teamRepo = TeamRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = Team(
          name: 'test123',
          customer: 'Cayman Cider',
          documentId: 'test123',
          calendar: {'test123': null},
          leaders: {'test123': null},
          members: {'test123': null},
          disciplines: {'test123': Discipline(name: 'test', iconCode: 'iconCode', documentId: 'test123')},
        );
        test2 = Team(
          name: 'test456',
          customer: 'Cayman Cider',
          documentId: 'test456',
          calendar: {'test456': null},
          leaders: {'test456': null},
          members: {'test456': null},
          disciplines: {'test456': Discipline(name: 'test', iconCode: 'iconCode', documentId: 'test456')},
        );
        test3 = Team(
          name: 'test789',
          customer: 'Cayman Cider',
          documentId: 'test789',
          calendar: {'test789': null},
          leaders: {'test789': null},
          members: {'test789': null},
          disciplines: {'test789': Discipline(name: 'test', iconCode: 'iconCode', documentId: 'test789')},
        );

        await teamRepo.add(team: test1);
        await teamRepo.add(team: test2);
        await teamRepo.add(team: test3);

        test1.name = 'test123Updated';

        await teamRepo.update(team: test1);

        teamRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123Updated');
        });
      });
    });
  });
  group('Tag Repos', () {
    group('Tag Repo Test', () {
      test('Tag Repo add, get, getById', () async {
        Tag test1, test2, test3;
        TagRepo tagRepo = TagRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = Tag(
          name: 'test123',
          documentId: 'test123',
          payload: 'www.google.com',
          tagType: {'tagType123': TagType(name: 'test123', documentId: 'test123')},
        );
        test2 = Tag(
          name: 'test456',
          documentId: 'test456',
          payload: 'www.google.com',
          tagType: {'tagType456': TagType(name: 'test456', documentId: 'test456')},
        );
        test3 = Tag(
          name: 'test789',
          documentId: 'test789',
          payload: 'www.google.com',
          tagType: {'tagType789': TagType(name: 'test789', documentId: 'test789')},
        );

        await tagRepo.add(tag: test1);
        await tagRepo.add(tag: test2);
        await tagRepo.add(tag: test3);

        tagRepo.get().then((value) {
          expect(value.length, 3);
        });

        tagRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123');
        });
      });

      test('Tag Repo Update', () async {
        Tag test1, test2, test3;
        TagRepo tagRepo = TagRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = Tag(
          name: 'test123',
          documentId: 'test123',
          payload: 'www.google.com',
          tagType: {'tagType123': TagType(name: 'test123', documentId: 'test123')},
        );
        test2 = Tag(
          name: 'test456',
          documentId: 'test456',
          payload: 'www.google.com',
          tagType: {'tagType456': TagType(name: 'test456', documentId: 'test456')},
        );
        test3 = Tag(
          name: 'test789',
          documentId: 'test789',
          payload: 'www.google.com',
          tagType: {'tagType789': TagType(name: 'test789', documentId: 'test789')},
        );

        await tagRepo.add(tag: test1);
        await tagRepo.add(tag: test2);
        await tagRepo.add(tag: test3);

        test1.name = 'test123Updated';

        await tagRepo.update(tag: test1);

        tagRepo.getById(id: test1.documentId!).then((value) {
          expect(value?.name, 'test123Updated');
        });
      });
    });

    group('Tag Type Repo Testing', () {
      test('Tag Type Repo add, get, getById', () async {
        TagType test1, test2, test3;
        TagTypeRepo tagTypeRepo = TagTypeRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = TagType(
          name: 'test123',
          documentId: 'test123',
        );
        test2 = TagType(
          name: 'test456',
          documentId: 'test456',
        );
        test3 = TagType(
          name: 'test789',
          documentId: 'test789',
        );

        await tagTypeRepo.add(tagType: test1);
        await tagTypeRepo.add(tagType: test2);
        await tagTypeRepo.add(tagType: test3);

        tagTypeRepo.get().then((value) {
          expect(value.length, 3);
        });

        tagTypeRepo.getById(id: test1.documentId).then((value) {
          expect(value?.name, 'test123');
        });
      });

      test('Tag Type Repo Update', () async {
        TagType test1, test2, test3;
        TagTypeRepo tagTypeRepo = TagTypeRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = TagType(
          name: 'test123',
          documentId: 'test123',
        );
        test2 = TagType(
          name: 'test456',
          documentId: 'test456',
        );
        test3 = TagType(
          name: 'test789',
          documentId: 'test789',
        );

        await tagTypeRepo.add(tagType: test1);
        await tagTypeRepo.add(tagType: test2);
        await tagTypeRepo.add(tagType: test3);

        test1.name = 'test123Updated';

        await tagTypeRepo.update(tagType: test1);

        tagTypeRepo.getById(id: test1.documentId).then((value) {
          expect(value?.name, 'test123Updated');
        });
      });
    });
  });

  group("Actions Repos", () {
    //Due to RefNum and the transaction testing on this will always fail until we have a way to manually set the refNum
    //this seems like a bad idea to expose so needs som thought before resolving
    group("Action Repo Testing", () {
      test("Action Repo add, get, getById", () async {
        Action test1, test2, test3;
        ActionRepo actionRepo = ActionRepo(useMocks: true, personSnapshot: created, customer: customer);

        await FirestoreHelper.instance?.setDocument(path: 'customers/$customer/apps', data: {"nextRef": 1, "actions": [], "categories": [], "subCategories": []}, id: 'Actions');

        test1 = Action(
          title: 'test123',
          documentId: 'test123',
          description: 'www.google.com',
          due: DateTime.now().add(const Duration(days: 30)),
          customer: customer,
          status: 'open',
          subCategory: SubCategory(name: 'test123', documentId: 'test123', categoryId: 'test123', categoryName: 'test123', customer: 'test'),
          area: AreaSnapshot(name: 'test123', documentId: 'test123', description: 'test123', path: 'test/test'),
          assignees: {},
          verifiers: {},
        );

        test2 = Action(
          title: 'test456',
          documentId: 'test456',
          description: 'www.google.com',
          due: DateTime.now().add(const Duration(days: 30)),
          customer: customer,
          status: 'open',
          subCategory: SubCategory(name: 'test123', documentId: 'test123', categoryId: 'test123', categoryName: 'test123', customer: 'test'),
          area: AreaSnapshot(name: 'test123', documentId: 'test123', description: 'test123', path: 'test/test'),
          assignees: {},
          verifiers: {},
        );

        test3 = Action(
          title: 'test789',
          documentId: 'test789',
          description: 'www.google.com',
          due: DateTime.now().add(const Duration(days: 30)),
          customer: customer,
          status: 'open',
          subCategory: SubCategory(name: 'test123', documentId: 'test123', categoryId: 'test123', categoryName: 'test', customer: 'test'),
          area: AreaSnapshot(name: 'test123', documentId: 'test123', description: 'test123', path: 'test/test'),
          assignees: {},
          verifiers: {},
        );

        await actionRepo.add(action: test1).then((value) {
          test1 = value;
        });

        await actionRepo.add(action: test2).then((value) {
          test2 = value;
        });

        await actionRepo.add(action: test3).then((value) {
          test3 = value;
        });

        actionRepo.get().then((value) {
          expect(value.length, 3);
        });

        actionRepo.getById(id: test1.documentId!, populate: false).then((value) {
          expect(value?.title, 'test123');
        });
      });

      test("Action Repo update", () async {
        Action test1, test2, test3;
        ActionRepo actionRepo = ActionRepo(useMocks: true, personSnapshot: created, customer: customer);

        test1 = Action(
          title: 'test123',
          documentId: 'test123',
          description: 'www.google.com',
          due: DateTime.now().add(const Duration(days: 30)),
          status: 'open',
          customer: customer,
          subCategory: SubCategory(name: 'test123', documentId: 'test123', categoryId: 'test123', categoryName: 'test123', customer: 'test'),
          area: AreaSnapshot(name: 'test123', documentId: 'test123', description: 'test123', path: 'test/test'),
          assignees: {},
          verifiers: {},
        );

        test2 = Action(
          title: 'test456',
          documentId: 'test456',
          description: 'www.google.com',
          due: DateTime.now().add(const Duration(days: 30)),
          customer: customer,
          status: 'open',
          subCategory: SubCategory(name: 'test123', documentId: 'test123', categoryId: 'test123', categoryName: 'test123', customer: 'test'),
          area: AreaSnapshot(name: 'test123', documentId: 'test123', description: 'test123', path: 'test/test'),
          assignees: {},
          verifiers: {},
        );

        test3 = Action(
          title: 'test789',
          documentId: 'test789',
          description: 'www.google.com',
          due: DateTime.now().add(const Duration(days: 30)),
          customer: customer,
          status: 'open',
          subCategory: SubCategory(name: 'test123', documentId: 'test123', categoryId: 'test123', categoryName: 'test123', customer: 'test'),
          area: AreaSnapshot(name: 'test123', documentId: 'test123', description: 'test123', path: 'test/test'),
          assignees: {},
          verifiers: {},
        );

        await actionRepo.add(action: test1);
        await actionRepo.add(action: test2);
        await actionRepo.add(action: test3);

        test1.title = 'test123Updated';

        await actionRepo.update(action: test1);

        actionRepo.getById(id: test1.documentId!, populate: true).then((value) {
          expect(value?.title, 'test123Updated');
        });
      });
    });
  });
}
